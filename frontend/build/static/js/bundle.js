/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},p=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var E=b.prototype=new y;E.constructor=b,p(E,g.prototype),E.isPureReactComponent=!0;var w=Array.isArray,k=Object.prototype.hasOwnProperty,N={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var a,o={},i=null,s=null;if(null!=t)for(a in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,a)&&!S.hasOwnProperty(a)&&(o[a]=t[a]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===o[a]&&(o[a]=l[a]);return{$$typeof:n,type:e,key:i,ref:s,props:o,_owner:N.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var I=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,o,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return i=i(l=e),e=""===o?"."+C(l,0):o,w(i)?(a="",null!=e&&(a=e.replace(I,"$&/")+"/"),T(i,t,a,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(I,"$&/")+"/")+e)),t.push(i)),1;if(l=0,o=""===o?".":o+":",w(e))for(var c=0;c<e.length;c++){var u=o+C(s=e[c],c);l+=T(s,t,a,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=T(s=s.value,t,a,u=o+C(s,c++),i);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function L(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O={current:null},R={transition:null},A={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:R,ReactCurrentOwner:N};function D(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:L,forEach:function(e,t,n){L(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.act=D,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=p({},e.props),o=e.key,i=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,s=N.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)k.call(t,c)&&!S.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];a.children=l}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=D,t.useCallback=function(e,t){return O.current.useCallback(e,t)},t.useContext=function(e){return O.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return O.current.useDeferredValue(e)},t.useEffect=function(e,t){return O.current.useEffect(e,t)},t.useId=function(){return O.current.useId()},t.useImperativeHandle=function(e,t,n){return O.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return O.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return O.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return O.current.useMemo(e,t)},t.useReducer=function(e,t,n){return O.current.useReducer(e,t,n)},t.useRef=function(e){return O.current.useRef(e)},t.useState=function(e){return O.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return O.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return O.current.useTransition()},t.version="18.3.1"},338:(e,t,n)=>{"use strict";var r=n(961);t.H=r.createRoot,r.hydrateRoot},463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>o(l,n))c<a&&0>o(u,l)?(e[r]=u,e[c]=n,r=c):(e[r]=l,e[s]=n,r=s);else{if(!(c<a&&0>o(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,f=null,h=3,m=!1,p=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function E(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function w(e){if(v=!1,E(e),!p)if(null!==r(c))p=!0,R(k);else{var t=r(u);null!==t&&A(w,t.startTime-e)}}function k(e,n){p=!1,v&&(v=!1,y(x),x=-1),m=!0;var o=h;try{for(E(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!T());){var i=f.callback;if("function"==typeof i){f.callback=null,h=f.priorityLevel;var s=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?f.callback=s:f===r(c)&&a(c),E(n)}else a(c);f=r(c)}if(null!==f)var l=!0;else{var d=r(u);null!==d&&A(w,d.startTime-n),l=!1}return l}finally{f=null,h=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var N,S=!1,_=null,x=-1,I=5,C=-1;function T(){return!(t.unstable_now()-C<I)}function L(){if(null!==_){var e=t.unstable_now();C=e;var n=!0;try{n=_(!0,e)}finally{n?N():(S=!1,_=null)}}else S=!1}if("function"==typeof b)N=function(){b(L)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,O=P.port2;P.port1.onmessage=L,N=function(){O.postMessage(null)}}else N=function(){g(L,0)};function R(e){_=e,S||(S=!0,N())}function A(e,n){x=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){p||m||(p=!0,R(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):I=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>i?(e.sortIndex=o,n(u,e),null===r(c)&&e===r(u)&&(v?(y(x),x=-1):v=!0,A(w,o-i))):(e.sortIndex=s,n(c,e),p||m||(p=!0,R(k))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},540:(e,t,n)=>{"use strict";e.exports=n(287)},551:(e,t,n)=>{"use strict";var r=n(540),a=n(982);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)i.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},m={};function p(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new p(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new p(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new p(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new p(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new p(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new p(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new p(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new p(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new p(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(m,e)||!d.call(h,e)&&(f.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new p(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new p(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new p(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new p(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new p("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new p(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),k=Symbol.for("react.portal"),N=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),I=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),L=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),O=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var A=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=A&&e[A]||e["@@iterator"])?e:null}var j,M=Object.assign;function F(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var U=!1;function z(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,s=o.length-1;1<=i&&0<=s&&a[i]!==o[s];)s--;for(;1<=i&&0<=s;i--,s--)if(a[i]!==o[s]){if(1!==i||1!==s)do{if(i--,0>--s||a[i]!==o[s]){var l="\n"+a[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function V(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case N:return"Fragment";case k:return"Portal";case _:return"Profiler";case S:return"StrictMode";case T:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case I:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case P:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case O:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function W(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function J(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){J(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function oe(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function pe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=pe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(he).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var ge=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ee=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ne=null,Se=null;function _e(e){if(e=ba(e)){if("function"!=typeof ke)throw Error(o(280));var t=e.stateNode;t&&(t=wa(t),ke(e.stateNode,e.type,t))}}function xe(e){Ne?Se?Se.push(e):Se=[e]:Ne=e}function Ie(){if(Ne){var e=Ne,t=Se;if(Se=Ne=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Ce(e,t){return e(t)}function Te(){}var Le=!1;function Pe(e,t,n){if(Le)return e(t,n);Le=!0;try{return Ce(e,t,n)}finally{Le=!1,(null!==Ne||null!==Se)&&(Te(),Ie())}}function Oe(e,t){var n=e.stateNode;if(null===n)return null;var r=wa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Re=!1;if(u)try{var Ae={};Object.defineProperty(Ae,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Ae,Ae),window.removeEventListener("test",Ae,Ae)}catch(ue){Re=!1}function De(e,t,n,r,a,o,i,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var je=!1,Me=null,Fe=!1,Ue=null,ze={onError:function(e){je=!0,Me=e}};function Ve(e,t,n,r,a,o,i,s,l){je=!1,Me=null,De.apply(ze,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function We(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(Be(e)!==e)throw Error(o(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return He(a),e;if(i===r)return He(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var s=!1,l=a.child;l;){if(l===n){s=!0,n=a,r=i;break}if(l===r){s=!0,r=a,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=a;break}if(l===r){s=!0,r=i,n=a;break}l=l.sibling}if(!s)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Qe=a.unstable_requestPaint,Je=a.unstable_now,Xe=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var s=i&~a;0!==s?r=dt(s):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&!(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&4194240&o))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function pt(){var e=ct;return!(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function Et(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var wt,kt,Nt,St,_t,xt=!1,It=[],Ct=null,Tt=null,Lt=null,Pt=new Map,Ot=new Map,Rt=[],At="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Lt=null;break;case"pointerover":case"pointerout":Pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ot.delete(t.pointerId)}}function jt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Mt(e){var t=ya(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=We(n)))return e.blockedOn=t,void _t(e.priority,(function(){Nt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ee=r,n.target.dispatchEvent(r),Ee=null,t.shift()}return!0}function Ut(e,t,n){Ft(e)&&n.delete(t)}function zt(){xt=!1,null!==Ct&&Ft(Ct)&&(Ct=null),null!==Tt&&Ft(Tt)&&(Tt=null),null!==Lt&&Ft(Lt)&&(Lt=null),Pt.forEach(Ut),Ot.forEach(Ut)}function Vt(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Bt(e){function t(t){return Vt(t,e)}if(0<It.length){Vt(It[0],e);for(var n=1;n<It.length;n++){var r=It[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Vt(Ct,e),null!==Tt&&Vt(Tt,e),null!==Lt&&Vt(Lt,e),Pt.forEach(t),Ot.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Mt(n),null===n.blockedOn&&Rt.shift()}var Wt=E.ReactCurrentBatchConfig,Ht=!0;function $t(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function Gt(e,t,n,r){var a=bt,o=Wt.transition;Wt.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Wt.transition=o}}function qt(e,t,n,r){if(Ht){var a=Yt(e,t,n,r);if(null===a)Hr(e,t,r,Kt,n),Dt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Ct=jt(Ct,e,t,n,r,a),!0;case"dragenter":return Tt=jt(Tt,e,t,n,r,a),!0;case"mouseover":return Lt=jt(Lt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Pt.set(o,jt(Pt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Ot.set(o,jt(Ot.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<At.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&wt(o),null===(o=Yt(e,t,n,r))&&Hr(e,t,r,Kt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Kt=null;function Yt(e,t,n,r){if(Kt=null,null!==(e=ya(e=we(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=We(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Jt=null,Xt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Xt,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,sn,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=an(cn),dn=M({},cn,{view:0,detail:0}),fn=an(dn),hn=M({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:_n,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(on=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=on=0,ln=e),on)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),mn=an(hn),pn=an(M({},hn,{dataTransfer:0})),vn=an(M({},dn,{relatedTarget:0})),gn=an(M({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=M({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),En=an(M({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Nn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Nn[e])&&!!t[e]}function _n(){return Sn}var xn=M({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:_n,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),In=an(xn),Cn=an(M({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(M({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:_n})),Ln=an(M({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=M({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),On=an(Pn),Rn=[9,13,27,32],An=u&&"CompositionEvent"in window,Dn=null;u&&"documentMode"in document&&(Dn=document.documentMode);var jn=u&&"TextEvent"in window&&!Dn,Mn=u&&(!An||Dn&&8<Dn&&11>=Dn),Fn=String.fromCharCode(32),Un=!1;function zn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function $n(e,t,n,r){xe(r),0<(t=Gr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,qn=null;function Kn(e){Fr(e,0)}function Yn(e){if(q(Ea(e)))return e}function Qn(e,t){if("change"===e)return t}var Jn=!1;if(u){var Xn;if(u){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Xn=Zn}else Xn=!1;Jn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Gn&&(Gn.detachEvent("onpropertychange",nr),qn=Gn=null)}function nr(e){if("value"===e.propertyName&&Yn(qn)){var t=[];$n(t,qn,e,we(e)),Pe(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Gn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(qn)}function or(e,t){if("click"===e)return Yn(t)}function ir(e,t){if("input"===e||"change"===e)return Yn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!sr(e[a],t[a]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=ur(n,o);var i=ur(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var pr=u&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function Er(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==K(r)||(r="selectionStart"in(r=vr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&lr(yr,r)||(yr=r,0<(r=Gr(gr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Nr={},Sr={};function _r(e){if(Nr[e])return Nr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return Nr[e]=n[t];return e}u&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var xr=_r("animationend"),Ir=_r("animationiteration"),Cr=_r("animationstart"),Tr=_r("transitionend"),Lr=new Map,Pr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Or(e,t){Lr.set(e,t),l(t,[e])}for(var Rr=0;Rr<Pr.length;Rr++){var Ar=Pr[Rr];Or(Ar.toLowerCase(),"on"+(Ar[0].toUpperCase()+Ar.slice(1)))}Or(xr,"onAnimationEnd"),Or(Ir,"onAnimationIteration"),Or(Cr,"onAnimationStart"),Or("dblclick","onDoubleClick"),Or("focusin","onFocus"),Or("focusout","onBlur"),Or(Tr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),jr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,s,l,c){if(Ve.apply(this,arguments),je){if(!je)throw Error(o(198));var u=Me;je=!1,Me=null,Fe||(Fe=!0,Ue=u)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&a.isPropagationStopped())break e;Mr(a,s,c),o=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,c=s.currentTarget,s=s.listener,l!==o&&a.isPropagationStopped())break e;Mr(a,s,c),o=l}}}if(Fe)throw e=Ue,Fe=!1,Ue=null,e}function Ur(e,t){var n=t[pa];void 0===n&&(n=t[pa]=new Set);var r=e+"__bubble";n.has(r)||(Wr(t,e,2,!1),n.add(r))}function zr(e,t,n){var r=0;t&&(r|=4),Wr(n,e,r,t)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[Vr]){e[Vr]=!0,i.forEach((function(t){"selectionchange"!==t&&(jr.has(t)||zr(t,!1,e),zr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Vr]||(t[Vr]=!0,zr("selectionchange",!1,t))}}function Wr(e,t,n,r){switch(Qt(t)){case 1:var a=$t;break;case 4:a=Gt;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,a){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===a||8===s.nodeType&&s.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;i=i.return}for(;null!==s;){if(null===(i=ya(s)))return;if(5===(l=i.tag)||6===l){r=o=i;continue e}s=s.parentNode}}r=r.return}Pe((function(){var r=o,a=we(n),i=[];e:{var s=Lr.get(e);if(void 0!==s){var l=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=In;break;case"focusin":c="focus",l=vn;break;case"focusout":c="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Tn;break;case xr:case Ir:case Cr:l=gn;break;case Tr:l=Ln;break;case"scroll":l=fn;break;case"wheel":l=On;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Cn}var u=!!(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var h,m=r;null!==m;){var p=(h=m).stateNode;if(5===h.tag&&null!==p&&(h=p,null!==f&&null!=(p=Oe(m,f))&&u.push($r(m,p,h))),d)break;m=m.return}0<u.length&&(s=new l(s,c,null,n,a),i.push({event:s,listeners:u}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Ee||!(c=n.relatedTarget||n.fromElement)||!ya(c)&&!c[ma])&&(l||s)&&(s=a.window===a?a:(s=a.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?ya(c):null)&&(c!==(d=Be(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=mn,p="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(u=Cn,p="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==l?s:Ea(l),h=null==c?s:Ea(c),(s=new u(p,m+"leave",l,n,a)).target=d,s.relatedTarget=h,p=null,ya(a)===r&&((u=new u(f,m+"enter",c,n,a)).target=h,u.relatedTarget=d,p=u),d=p,l&&c)e:{for(f=c,m=0,h=u=l;h;h=qr(h))m++;for(h=0,p=f;p;p=qr(p))h++;for(;0<m-h;)u=qr(u),m--;for(;0<h-m;)f=qr(f),h--;for(;m--;){if(u===f||null!==f&&u===f.alternate)break e;u=qr(u),f=qr(f)}u=null}else u=null;null!==l&&Kr(i,s,l,u,!1),null!==c&&null!==d&&Kr(i,d,c,u,!0)}if("select"===(l=(s=r?Ea(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var v=Qn;else if(Hn(s))if(Jn)v=ir;else{v=ar;var g=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(v=or);switch(v&&(v=v(e,r))?$n(i,v,n,a):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ee(s,"number",s.value)),g=r?Ea(r):window,e){case"focusin":(Hn(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Er(i,n,a);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":Er(i,n,a)}var y;if(An)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=en()):(Xt="value"in(Jt=a)?Jt.value:Jt.textContent,Bn=!0)),0<(g=Gr(r,b)).length&&(b=new En(b,e,null,n,a),i.push({event:b,listeners:g}),(y||null!==(y=Vn(n)))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Un=!0,Fn);case"textInput":return(e=t.data)===Fn&&Un?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!An&&zn(e,t)?(e=en(),Zt=Xt=Jt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Gr(r,"onBeforeInput")).length&&(a=new En("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Fr(i,t)}))}function $r(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Gr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Oe(e,n))&&r.unshift($r(e,o,a)),null!=(o=Oe(e,t))&&r.push($r(e,o,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,a?null!=(l=Oe(n,o))&&i.unshift($r(n,l,s)):a||null!=(l=Oe(n,o))&&i.push($r(n,l,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Yr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Jr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Qr,"")}function Xr(e,t,n){if(t=Jr(t),Jr(e)!==t&&n)throw Error(o(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(sa)}:ra;function sa(e){setTimeout((function(){throw e}))}function la(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Bt(t)}function ca(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ua(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,ha="__reactProps$"+da,ma="__reactContainer$"+da,pa="__reactEvents$"+da,va="__reactListeners$"+da,ga="__reactHandles$"+da;function ya(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ua(e);null!==e;){if(n=e[fa])return n;e=ua(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[fa]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ea(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wa(e){return e[ha]||null}var ka=[],Na=-1;function Sa(e){return{current:e}}function _a(e){0>Na||(e.current=ka[Na],ka[Na]=null,Na--)}function xa(e,t){Na++,ka[Na]=e.current,e.current=t}var Ia={},Ca=Sa(Ia),Ta=Sa(!1),La=Ia;function Pa(e,t){var n=e.type.contextTypes;if(!n)return Ia;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Oa(e){return null!=e.childContextTypes}function Ra(){_a(Ta),_a(Ca)}function Aa(e,t,n){if(Ca.current!==Ia)throw Error(o(168));xa(Ca,t),xa(Ta,n)}function Da(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,W(e)||"Unknown",a));return M({},n,r)}function ja(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ia,La=Ca.current,xa(Ca,e),xa(Ta,Ta.current),!0}function Ma(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Da(e,t,La),r.__reactInternalMemoizedMergedChildContext=e,_a(Ta),_a(Ca),xa(Ca,e)):_a(Ta),xa(Ta,n)}var Fa=null,Ua=!1,za=!1;function Va(e){null===Fa?Fa=[e]:Fa.push(e)}function Ba(){if(!za&&null!==Fa){za=!0;var e=0,t=bt;try{var n=Fa;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fa=null,Ua=!1}catch(t){throw null!==Fa&&(Fa=Fa.slice(e+1)),qe(Ze,Ba),t}finally{bt=t,za=!1}}return null}var Wa=[],Ha=0,$a=null,Ga=0,qa=[],Ka=0,Ya=null,Qa=1,Ja="";function Xa(e,t){Wa[Ha++]=Ga,Wa[Ha++]=$a,$a=e,Ga=t}function Za(e,t,n){qa[Ka++]=Qa,qa[Ka++]=Ja,qa[Ka++]=Ya,Ya=e;var r=Qa;e=Ja;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Qa=1<<32-it(t)+a|n<<a|r,Ja=o+e}else Qa=1<<o|n<<a|r,Ja=e}function eo(e){null!==e.return&&(Xa(e,1),Za(e,1,0))}function to(e){for(;e===$a;)$a=Wa[--Ha],Wa[Ha]=null,Ga=Wa[--Ha],Wa[Ha]=null;for(;e===Ya;)Ya=qa[--Ka],qa[Ka]=null,Ja=qa[--Ka],qa[Ka]=null,Qa=qa[--Ka],qa[Ka]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Pc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function so(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=ca(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ya?{id:Qa,overflow:Ja}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Pc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function lo(e){return!(!(1&e.mode)||128&e.flags)}function co(e){if(ao){var t=ro;if(t){var n=t;if(!so(e,t)){if(lo(e))throw Error(o(418));t=ca(n.nextSibling);var r=no;t&&so(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return uo(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(lo(e))throw ho(),Error(o(418));for(;t;)io(e,t),t=ca(t.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=ca(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?ca(e.stateNode.nextSibling):null;return!0}function ho(){for(var e=ro;e;)e=ca(e.nextSibling)}function mo(){ro=no=null,ao=!1}function po(e){null===oo?oo=[e]:oo.push(e)}var vo=E.ReactCurrentBatchConfig;function go(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function yo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function Eo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Rc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){var o=n.type;return o===N?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===O&&bo(o)===t.type)?((r=a(t,n.props)).ref=go(e,t,n),r.return=e,r):((r=Ac(n.type,n.key,n.props,null,e.mode,r)).ref=go(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fc(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Dc(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ac(t.type,t.key,t.props,null,e.mode,n)).ref=go(e,null,t),n.return=e,n;case k:return(t=Fc(t,e.mode,n)).return=e,t;case O:return f(e,(0,t._init)(t._payload),n)}if(te(t)||D(t))return(t=Dc(t,e.mode,n,null)).return=e,t;yo(e,t)}return null}function h(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?c(e,t,n,r):null;case k:return n.key===a?u(e,t,n,r):null;case O:return h(e,t,(a=n._init)(n._payload),r)}if(te(n)||D(n))return null!==a?null:d(e,t,n,r,null);yo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case O:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||D(r))return d(t,e=e.get(n)||null,r,a,null);yo(t,r)}return null}function p(a,o,s,l){for(var c=null,u=null,d=o,p=o=0,v=null;null!==d&&p<s.length;p++){d.index>p?(v=d,d=null):v=d.sibling;var g=h(a,d,s[p],l);if(null===g){null===d&&(d=v);break}e&&d&&null===g.alternate&&t(a,d),o=i(g,o,p),null===u?c=g:u.sibling=g,u=g,d=v}if(p===s.length)return n(a,d),ao&&Xa(a,p),c;if(null===d){for(;p<s.length;p++)null!==(d=f(a,s[p],l))&&(o=i(d,o,p),null===u?c=d:u.sibling=d,u=d);return ao&&Xa(a,p),c}for(d=r(a,d);p<s.length;p++)null!==(v=m(d,a,p,s[p],l))&&(e&&null!==v.alternate&&d.delete(null===v.key?p:v.key),o=i(v,o,p),null===u?c=v:u.sibling=v,u=v);return e&&d.forEach((function(e){return t(a,e)})),ao&&Xa(a,p),c}function v(a,s,l,c){var u=D(l);if("function"!=typeof u)throw Error(o(150));if(null==(l=u.call(l)))throw Error(o(151));for(var d=u=null,p=s,v=s=0,g=null,y=l.next();null!==p&&!y.done;v++,y=l.next()){p.index>v?(g=p,p=null):g=p.sibling;var b=h(a,p,y.value,c);if(null===b){null===p&&(p=g);break}e&&p&&null===b.alternate&&t(a,p),s=i(b,s,v),null===d?u=b:d.sibling=b,d=b,p=g}if(y.done)return n(a,p),ao&&Xa(a,v),u;if(null===p){for(;!y.done;v++,y=l.next())null!==(y=f(a,y.value,c))&&(s=i(y,s,v),null===d?u=y:d.sibling=y,d=y);return ao&&Xa(a,v),u}for(p=r(a,p);!y.done;v++,y=l.next())null!==(y=m(p,a,v,y.value,c))&&(e&&null!==y.alternate&&p.delete(null===y.key?v:y.key),s=i(y,s,v),null===d?u=y:d.sibling=y,d=y);return e&&p.forEach((function(e){return t(a,e)})),ao&&Xa(a,v),u}return function e(r,o,i,l){if("object"==typeof i&&null!==i&&i.type===N&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var c=i.key,u=o;null!==u;){if(u.key===c){if((c=i.type)===N){if(7===u.tag){n(r,u.sibling),(o=a(u,i.props.children)).return=r,r=o;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===O&&bo(c)===u.type){n(r,u.sibling),(o=a(u,i.props)).ref=go(r,u,i),o.return=r,r=o;break e}n(r,u);break}t(r,u),u=u.sibling}i.type===N?((o=Dc(i.props.children,r.mode,l,i.key)).return=r,r=o):((l=Ac(i.type,i.key,i.props,null,r.mode,l)).ref=go(r,o,i),l.return=r,r=l)}return s(r);case k:e:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Fc(i,r.mode,l)).return=r,r=o}return s(r);case O:return e(r,o,(u=i._init)(i._payload),l)}if(te(i))return p(r,o,i,l);if(D(i))return v(r,o,i,l);yo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Mc(i,r.mode,l)).return=r,r=o),s(r)):n(r,o)}}var wo=Eo(!0),ko=Eo(!1),No=Sa(null),So=null,_o=null,xo=null;function Io(){xo=_o=So=null}function Co(e){var t=No.current;_a(No),e._currentValue=t}function To(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Lo(e,t){So=e,xo=_o=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bs=!0),e.firstContext=null)}function Po(e){var t=e._currentValue;if(xo!==e)if(e={context:e,memoizedValue:t,next:null},null===_o){if(null===So)throw Error(o(308));_o=e,So.dependencies={lanes:0,firstContext:e}}else _o=_o.next=e;return t}var Oo=null;function Ro(e){null===Oo?Oo=[e]:Oo.push(e)}function Ao(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,Ro(t)):(n.next=a.next,a.next=n),t.interleaved=n,Do(e,r)}function Do(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var jo=!1;function Mo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Fo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Uo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function zo(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Cl){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,Do(e,n)}return null===(a=r.interleaved)?(t.next=t,Ro(r)):(t.next=a.next,a.next=t),r.interleaved=t,Do(e,n)}function Vo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Bo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Wo(e,t,n,r){var a=e.updateQueue;jo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var l=s,c=l.next;l.next=null,null===i?o=c:i.next=c,i=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==o){var d=a.baseState;for(i=0,u=c=l=null,s=o;;){var f=s.lane,h=s.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:h,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var m=e,p=s;switch(f=t,h=n,p.tag){case 1:if("function"==typeof(m=p.payload)){d=m.call(h,d,f);break e}d=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(f="function"==typeof(m=p.payload)?m.call(h,d,f):m))break e;d=M({},d,f);break e;case 2:jo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[s]:f.push(s))}else h={eventTime:h,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=h,l=d):u=u.next=h,i|=f;if(null===(s=s.next)){if(null===(s=a.shared.pending))break;s=(f=s).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===u&&(l=d),a.baseState=l,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);jl|=i,e.lanes=i,e.memoizedState=d}}function Ho(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var $o={},Go=Sa($o),qo=Sa($o),Ko=Sa($o);function Yo(e){if(e===$o)throw Error(o(174));return e}function Qo(e,t){switch(xa(Ko,t),xa(qo,e),xa(Go,$o),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_a(Go),xa(Go,t)}function Jo(){_a(Go),_a(qo),_a(Ko)}function Xo(e){Yo(Ko.current);var t=Yo(Go.current),n=le(t,e.type);t!==n&&(xa(qo,e),xa(Go,n))}function Zo(e){qo.current===e&&(_a(Go),_a(qo))}var ei=Sa(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var ai=E.ReactCurrentDispatcher,oi=E.ReactCurrentBatchConfig,ii=0,si=null,li=null,ci=null,ui=!1,di=!1,fi=0,hi=0;function mi(){throw Error(o(321))}function pi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function vi(e,t,n,r,a,i){if(ii=i,si=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ai.current=null===e||null===e.memoizedState?Zi:es,e=n(r,a),di){i=0;do{if(di=!1,fi=0,25<=i)throw Error(o(301));i+=1,ci=li=null,t.updateQueue=null,ai.current=ts,e=n(r,a)}while(di)}if(ai.current=Xi,t=null!==li&&null!==li.next,ii=0,ci=li=si=null,ui=!1,t)throw Error(o(300));return e}function gi(){var e=0!==fi;return fi=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ci?si.memoizedState=ci=e:ci=ci.next=e,ci}function bi(){if(null===li){var e=si.alternate;e=null!==e?e.memoizedState:null}else e=li.next;var t=null===ci?si.memoizedState:ci.next;if(null!==t)ci=t,li=e;else{if(null===e)throw Error(o(310));e={memoizedState:(li=e).memoizedState,baseState:li.baseState,baseQueue:li.baseQueue,queue:li.queue,next:null},null===ci?si.memoizedState=ci=e:ci=ci.next=e}return ci}function Ei(e,t){return"function"==typeof t?t(e):t}function wi(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=li,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var l=s=null,c=null,u=i;do{var d=u.lane;if((ii&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=f,s=r):c=c.next=f,si.lanes|=d,jl|=d}u=u.next}while(null!==u&&u!==i);null===c?s=r:c.next=l,sr(r,t.memoizedState)||(bs=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,si.lanes|=i,jl|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function ki(e){var t=bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);sr(i,t.memoizedState)||(bs=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ni(){}function Si(e,t){var n=si,r=bi(),a=t(),i=!sr(r.memoizedState,a);if(i&&(r.memoizedState=a,bs=!0),r=r.queue,ji(Ii.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ci&&1&ci.memoizedState.tag){if(n.flags|=2048,Pi(9,xi.bind(null,n,r,a,t),void 0,null),null===Tl)throw Error(o(349));30&ii||_i(n,t,a)}return a}function _i(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=si.updateQueue)?(t={lastEffect:null,stores:null},si.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function xi(e,t,n,r){t.value=n,t.getSnapshot=r,Ci(t)&&Ti(e)}function Ii(e,t,n){return n((function(){Ci(t)&&Ti(e)}))}function Ci(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Ti(e){var t=Do(e,1);null!==t&&nc(t,e,1,-1)}function Li(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ei,lastRenderedState:e},t.queue=e,e=e.dispatch=Ki.bind(null,si,e),[t.memoizedState,e]}function Pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=si.updateQueue)?(t={lastEffect:null,stores:null},si.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Oi(){return bi().memoizedState}function Ri(e,t,n,r){var a=yi();si.flags|=e,a.memoizedState=Pi(1|t,n,void 0,void 0===r?null:r)}function Ai(e,t,n,r){var a=bi();r=void 0===r?null:r;var o=void 0;if(null!==li){var i=li.memoizedState;if(o=i.destroy,null!==r&&pi(r,i.deps))return void(a.memoizedState=Pi(t,n,o,r))}si.flags|=e,a.memoizedState=Pi(1|t,n,o,r)}function Di(e,t){return Ri(8390656,8,e,t)}function ji(e,t){return Ai(2048,8,e,t)}function Mi(e,t){return Ai(4,2,e,t)}function Fi(e,t){return Ai(4,4,e,t)}function Ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function zi(e,t,n){return n=null!=n?n.concat([e]):null,Ai(4,4,Ui.bind(null,t,e),n)}function Vi(){}function Bi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Wi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Hi(e,t,n){return 21&ii?(sr(n,t)||(n=pt(),si.lanes|=n,jl|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bs=!0),e.memoizedState=n)}function $i(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=oi.transition;oi.transition={};try{e(!1),t()}finally{bt=n,oi.transition=r}}function Gi(){return bi().memoizedState}function qi(e,t,n){var r=tc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Yi(e)?Qi(t,n):null!==(n=Ao(e,t,n,r))&&(nc(n,e,r,ec()),Ji(n,t,r))}function Ki(e,t,n){var r=tc(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Yi(e))Qi(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,s=o(i,n);if(a.hasEagerState=!0,a.eagerState=s,sr(s,i)){var l=t.interleaved;return null===l?(a.next=a,Ro(t)):(a.next=l.next,l.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Ao(e,t,a,r))&&(nc(n,e,r,a=ec()),Ji(n,t,r))}}function Yi(e){var t=e.alternate;return e===si||null!==t&&t===si}function Qi(e,t){di=ui=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ji(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Xi={readContext:Po,useCallback:mi,useContext:mi,useEffect:mi,useImperativeHandle:mi,useInsertionEffect:mi,useLayoutEffect:mi,useMemo:mi,useReducer:mi,useRef:mi,useState:mi,useDebugValue:mi,useDeferredValue:mi,useTransition:mi,useMutableSource:mi,useSyncExternalStore:mi,useId:mi,unstable_isNewReconciler:!1},Zi={readContext:Po,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:Po,useEffect:Di,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ri(4194308,4,Ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ri(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ri(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=qi.bind(null,si,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:Li,useDebugValue:Vi,useDeferredValue:function(e){return yi().memoizedState=e},useTransition:function(){var e=Li(!1),t=e[0];return e=$i.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=si,a=yi();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Tl)throw Error(o(349));30&ii||_i(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Di(Ii.bind(null,r,i,e),[e]),r.flags|=2048,Pi(9,xi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=Tl.identifierPrefix;if(ao){var n=Ja;t=":"+t+"R"+(n=(Qa&~(1<<32-it(Qa)-1)).toString(32)+n),0<(n=fi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=hi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},es={readContext:Po,useCallback:Bi,useContext:Po,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:Mi,useLayoutEffect:Fi,useMemo:Wi,useReducer:wi,useRef:Oi,useState:function(){return wi(Ei)},useDebugValue:Vi,useDeferredValue:function(e){return Hi(bi(),li.memoizedState,e)},useTransition:function(){return[wi(Ei)[0],bi().memoizedState]},useMutableSource:Ni,useSyncExternalStore:Si,useId:Gi,unstable_isNewReconciler:!1},ts={readContext:Po,useCallback:Bi,useContext:Po,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:Mi,useLayoutEffect:Fi,useMemo:Wi,useReducer:ki,useRef:Oi,useState:function(){return ki(Ei)},useDebugValue:Vi,useDeferredValue:function(e){var t=bi();return null===li?t.memoizedState=e:Hi(t,li.memoizedState,e)},useTransition:function(){return[ki(Ei)[0],bi().memoizedState]},useMutableSource:Ni,useSyncExternalStore:Si,useId:Gi,unstable_isNewReconciler:!1};function ns(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rs(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var as={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ec(),a=tc(e),o=Uo(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=zo(e,o,a))&&(nc(t,e,a,r),Vo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ec(),a=tc(e),o=Uo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=zo(e,o,a))&&(nc(t,e,a,r),Vo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),r=tc(e),a=Uo(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=zo(e,a,r))&&(nc(t,e,r,n),Vo(t,e,r))}};function os(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(a,o))}function is(e,t,n){var r=!1,a=Ia,o=t.contextType;return"object"==typeof o&&null!==o?o=Po(o):(a=Oa(t)?La:Ca.current,o=(r=null!=(r=t.contextTypes))?Pa(e,a):Ia),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=as,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function ss(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&as.enqueueReplaceState(t,t.state,null)}function ls(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs={},Mo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Po(o):(o=Oa(t)?La:Ca.current,a.context=Pa(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(rs(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&as.enqueueReplaceState(a,a.state,null),Wo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function cs(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function us(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function ds(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fs="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=Uo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hl||(Hl=!0,$l=r),ds(0,t)},n}function ms(e,t,n){(n=Uo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ds(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ds(0,t),"function"!=typeof r&&(null===Gl?Gl=new Set([this]):Gl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ps(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fs;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=_c.bind(null,e,t,n),t.then(e,e))}function vs(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gs(e,t,n,r,a){return 1&e.mode?(e.flags|=65536,e.lanes=a,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Uo(-1,1)).tag=2,zo(n,t,1))),n.lanes|=1),e)}var ys=E.ReactCurrentOwner,bs=!1;function Es(e,t,n,r){t.child=null===e?ko(t,null,n,r):wo(t,e.child,n,r)}function ws(e,t,n,r,a){n=n.render;var o=t.ref;return Lo(t,a),r=vi(e,t,n,r,o,a),n=gi(),null===e||bs?(ao&&n&&eo(t),t.flags|=1,Es(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hs(e,t,a))}function ks(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Oc(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ac(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Ns(e,t,o,r,a))}if(o=e.child,!(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)return Hs(e,t,a)}return t.flags|=1,(e=Rc(o,r)).ref=t.ref,e.return=t,t.child=e}function Ns(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===t.ref){if(bs=!1,t.pendingProps=r=o,!(e.lanes&a))return t.lanes=e.lanes,Hs(e,t,a);131072&e.flags&&(bs=!0)}}return xs(e,t,n,r,a)}function Ss(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xa(Rl,Ol),Ol|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,xa(Rl,Ol),Ol|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xa(Rl,Ol),Ol|=n;else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,xa(Rl,Ol),Ol|=r;return Es(e,t,a,n),t.child}function _s(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function xs(e,t,n,r,a){var o=Oa(n)?La:Ca.current;return o=Pa(t,o),Lo(t,a),n=vi(e,t,n,r,o,a),r=gi(),null===e||bs?(ao&&r&&eo(t),t.flags|=1,Es(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Hs(e,t,a))}function Is(e,t,n,r,a){if(Oa(n)){var o=!0;ja(t)}else o=!1;if(Lo(t,a),null===t.stateNode)Ws(e,t),is(t,n,r),ls(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var l=i.context,c=n.contextType;c="object"==typeof c&&null!==c?Po(c):Pa(t,c=Oa(n)?La:Ca.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==c)&&ss(t,i,r,c),jo=!1;var f=t.memoizedState;i.state=f,Wo(t,r,i,a),l=t.memoizedState,s!==r||f!==l||Ta.current||jo?("function"==typeof u&&(rs(t,n,u,r),l=t.memoizedState),(s=jo||os(t,n,s,r,f,l,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=c,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Fo(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:ns(t.type,s),i.props=c,d=t.pendingProps,f=i.context,l="object"==typeof(l=n.contextType)&&null!==l?Po(l):Pa(t,l=Oa(n)?La:Ca.current);var h=n.getDerivedStateFromProps;(u="function"==typeof h||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==d||f!==l)&&ss(t,i,r,l),jo=!1,f=t.memoizedState,i.state=f,Wo(t,r,i,a);var m=t.memoizedState;s!==d||f!==m||Ta.current||jo?("function"==typeof h&&(rs(t,n,h,r),m=t.memoizedState),(c=jo||os(t,n,c,r,f,m,l)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=l,r=c):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Cs(e,t,n,r,o,a)}function Cs(e,t,n,r,a,o){_s(e,t);var i=!!(128&t.flags);if(!r&&!i)return a&&Ma(t,n,!1),Hs(e,t,o);r=t.stateNode,ys.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=wo(t,e.child,null,o),t.child=wo(t,null,s,o)):Es(e,t,s,o),t.memoizedState=r.state,a&&Ma(t,n,!0),t.child}function Ts(e){var t=e.stateNode;t.pendingContext?Aa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Aa(0,t.context,!1),Qo(e,t.containerInfo)}function Ls(e,t,n,r,a){return mo(),po(a),t.flags|=256,Es(e,t,n,r),t.child}var Ps,Os,Rs,As,Ds={dehydrated:null,treeContext:null,retryLane:0};function js(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ms(e,t,n){var r,a=t.pendingProps,i=ei.current,s=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xa(ei,1&i),null===e)return co(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=a.children,e=a.fallback,s?(a=t.mode,s=t.child,l={mode:"hidden",children:l},1&a||null===s?s=jc(l,a,0,null):(s.childLanes=0,s.pendingProps=l),e=Dc(e,a,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=js(n),t.memoizedState=Ds,e):Fs(t,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,s){if(n)return 256&t.flags?(t.flags&=-257,Us(e,t,s,r=us(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=jc({mode:"visible",children:r.children},a,0,null),(i=Dc(i,a,s,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&wo(t,e.child,null,s),t.child.memoizedState=js(s),t.memoizedState=Ds,i);if(!(1&t.mode))return Us(e,t,s,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var l=r.dgst;return r=l,Us(e,t,s,r=us(i=Error(o(419)),r,void 0))}if(l=!!(s&e.childLanes),bs||l){if(null!==(r=Tl)){switch(s&-s){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=a&(r.suspendedLanes|s)?0:a)&&a!==i.retryLane&&(i.retryLane=a,Do(e,a),nc(r,e,a,-1))}return pc(),Us(e,t,s,r=us(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=Ic.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=ca(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(qa[Ka++]=Qa,qa[Ka++]=Ja,qa[Ka++]=Ya,Qa=e.id,Ja=e.overflow,Ya=t),(t=Fs(t,r.children)).flags|=4096,t)}(e,t,l,a,r,i,n);if(s){s=a.fallback,l=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:a.children};return 1&l||t.child===i?(a=Rc(i,c)).subtreeFlags=14680064&i.subtreeFlags:((a=t.child).childLanes=0,a.pendingProps=c,t.deletions=null),null!==r?s=Rc(r,s):(s=Dc(s,l,n,null)).flags|=2,s.return=t,a.return=t,a.sibling=s,t.child=a,a=s,s=t.child,l=null===(l=e.child.memoizedState)?js(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Ds,a}return e=(s=e.child).sibling,a=Rc(s,{mode:"visible",children:a.children}),!(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Fs(e,t){return(t=jc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Us(e,t,n,r){return null!==r&&po(r),wo(t,e.child,null,n),(e=Fs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),To(e.return,t,n)}function Vs(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Bs(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Es(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zs(e,n,t);else if(19===e.tag)zs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(ei,r),1&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Vs(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ti(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Vs(t,!0,n,null,o);break;case"together":Vs(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Ws(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hs(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),jl|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Rc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Rc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $s(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function qs(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Gs(t),null;case 1:case 17:return Oa(t.type)&&Ra(),Gs(t),null;case 3:return r=t.stateNode,Jo(),_a(Ta),_a(Ca),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==oo&&(ic(oo),oo=null))),Os(e,t),Gs(t),null;case 5:Zo(t);var a=Yo(Ko.current);if(n=t.type,null!==e&&null!=t.stateNode)Rs(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Gs(t),null}if(e=Yo(Go.current),fo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fa]=t,r[ha]=i,e=!!(1&t.mode),n){case"dialog":Ur("cancel",r),Ur("close",r);break;case"iframe":case"object":case"embed":Ur("load",r);break;case"video":case"audio":for(a=0;a<Dr.length;a++)Ur(Dr[a],r);break;case"source":Ur("error",r);break;case"img":case"image":case"link":Ur("error",r),Ur("load",r);break;case"details":Ur("toggle",r);break;case"input":Q(r,i),Ur("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Ur("invalid",r);break;case"textarea":ae(r,i),Ur("invalid",r)}for(var l in ye(n,i),a=null,i)if(i.hasOwnProperty(l)){var c=i[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),a=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Ur("scroll",r)}switch(n){case"input":G(r),Z(r,i,!0);break;case"textarea":G(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[fa]=t,e[ha]=r,Ps(e,t,!1,!1),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Ur("cancel",e),Ur("close",e),a=r;break;case"iframe":case"object":case"embed":Ur("load",e),a=r;break;case"video":case"audio":for(a=0;a<Dr.length;a++)Ur(Dr[a],e);a=r;break;case"source":Ur("error",e),a=r;break;case"img":case"image":case"link":Ur("error",e),Ur("load",e),a=r;break;case"details":Ur("toggle",e),a=r;break;case"input":Q(e,r),a=Y(e,r),Ur("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Ur("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Ur("invalid",e)}for(i in ye(n,a),c=a)if(c.hasOwnProperty(i)){var u=c[i];"style"===i?ve(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Ur("scroll",e):null!=u&&b(e,i,u,l))}switch(n){case"input":G(e),Z(e,r,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Gs(t),null;case 6:if(e&&null!=t.stateNode)As(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Yo(Ko.current),Yo(Go.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Xr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Gs(t),null;case 13:if(_a(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&1&t.mode&&!(128&t.flags))ho(),mo(),t.flags|=98560,i=!1;else if(i=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[fa]=t}else mo(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Gs(t),i=!1}else null!==oo&&(ic(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Al&&(Al=3):pc())),null!==t.updateQueue&&(t.flags|=4),Gs(t),null);case 4:return Jo(),Os(e,t),null===e&&Br(t.stateNode.containerInfo),Gs(t),null;case 10:return Co(t.type._context),Gs(t),null;case 19:if(_a(ei),null===(i=t.memoizedState))return Gs(t),null;if(r=!!(128&t.flags),null===(l=i.rendering))if(r)$s(i,!1);else{if(0!==Al||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ti(e))){for(t.flags|=128,$s(i,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Je()>Bl&&(t.flags|=128,r=!0,$s(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),$s(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!ao)return Gs(t),null}else 2*Je()-i.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=128,r=!0,$s(i,!1),t.lanes=4194304);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=i.last)?n.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Je(),t.sibling=null,n=ei.current,xa(ei,r?1&n|2:1&n),t):(Gs(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Ol)&&(Gs(t),6&t.subtreeFlags&&(t.flags|=8192)):Gs(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ks(e,t){switch(to(t),t.tag){case 1:return Oa(t.type)&&Ra(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Jo(),_a(Ta),_a(Ca),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zo(t),null;case 13:if(_a(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));mo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _a(ei),null;case 4:return Jo(),null;case 10:return Co(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ps=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Os=function(){},Rs=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Yo(Go.current);var o,i=null;switch(n){case"input":a=Y(e,a),r=Y(e,r),i=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(u in ye(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var l=a[u];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(n||(n={}),n[o]=c[o])}else n||(i||(i=[]),i.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Ur("scroll",e),i||l===c||(i=[])):(i=i||[]).push(u,c))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},As=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ys=!1,Qs=!1,Js="function"==typeof WeakSet?WeakSet:Set,Xs=null;function Zs(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Sc(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Sc(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&el(t,n,o)}a=a.next}while(a!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function al(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ol(e){var t=e.alternate;null!==t&&(e.alternate=null,ol(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[ha],delete t[pa],delete t[va],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function il(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||il(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}var ul=null,dl=!1;function fl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Qs||Zs(n,t);case 6:var r=ul,a=dl;ul=null,fl(e,t,n),dl=a,null!==(ul=r)&&(dl?(e=ul,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ul.removeChild(n.stateNode));break;case 18:null!==ul&&(dl?(e=ul,n=n.stateNode,8===e.nodeType?la(e.parentNode,n):1===e.nodeType&&la(e,n),Bt(e)):la(ul,n.stateNode));break;case 4:r=ul,a=dl,ul=n.stateNode.containerInfo,dl=!0,fl(e,t,n),ul=r,dl=a;break;case 0:case 11:case 14:case 15:if(!Qs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(2&o||4&o)&&el(n,t,i),a=a.next}while(a!==r)}fl(e,t,n);break;case 1:if(!Qs&&(Zs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Sc(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Qs=(r=Qs)||null!==n.memoizedState,fl(e,t,n),Qs=r):fl(e,t,n);break;default:fl(e,t,n)}}function ml(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Js),t.forEach((function(t){var r=Cc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function pl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===ul)throw Error(o(160));hl(i,s,a),ul=null,dl=!1;var c=a.alternate;null!==c&&(c.return=null),a.return=null}catch(e){Sc(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vl(t,e),t=t.sibling}function vl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(pl(t,e),gl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Sc(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Sc(e,e.return,t)}}break;case 1:pl(t,e),gl(e),512&r&&null!==n&&Zs(n,n.return);break;case 5:if(pl(t,e),gl(e),512&r&&null!==n&&Zs(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){Sc(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,s=null!==n?n.memoizedProps:i,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===i.type&&null!=i.name&&J(a,i),be(l,s);var u=be(l,i);for(s=0;s<c.length;s+=2){var d=c[s],f=c[s+1];"style"===d?ve(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):b(a,d,f,u)}switch(l){case"input":X(a,i);break;case"textarea":oe(a,i);break;case"select":var h=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):h!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[ha]=i}catch(t){Sc(e,e.return,t)}}break;case 6:if(pl(t,e),gl(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){Sc(e,e.return,t)}}break;case 3:if(pl(t,e),gl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){Sc(e,e.return,t)}break;case 4:default:pl(t,e),gl(e);break;case 13:pl(t,e),gl(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Vl=Je())),4&r&&ml(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Qs=(u=Qs)||d,pl(t,e),Qs=u):pl(t,e),gl(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&1&e.mode)for(Xs=e,d=e.child;null!==d;){for(f=Xs=d;null!==Xs;){switch(m=(h=Xs).child,h.tag){case 0:case 11:case 14:case 15:nl(4,h,h.return);break;case 1:Zs(h,h.return);var p=h.stateNode;if("function"==typeof p.componentWillUnmount){r=h,n=h.return;try{t=r,p.props=t.memoizedProps,p.state=t.memoizedState,p.componentWillUnmount()}catch(e){Sc(r,n,e)}}break;case 5:Zs(h,h.return);break;case 22:if(null!==h.memoizedState){wl(f);continue}}null!==m?(m.return=h,Xs=m):wl(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,u?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=f.stateNode,s=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=pe("display",s))}catch(t){Sc(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(t){Sc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:pl(t,e),gl(e),4&r&&ml(e);case 21:}}function gl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(il(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),cl(e,sl(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ll(e,sl(e),i);break;default:throw Error(o(161))}}catch(t){Sc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,n){Xs=e,bl(e,t,n)}function bl(e,t,n){for(var r=!!(1&e.mode);null!==Xs;){var a=Xs,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Ys;if(!i){var s=a.alternate,l=null!==s&&null!==s.memoizedState||Qs;s=Ys;var c=Qs;if(Ys=i,(Qs=l)&&!c)for(Xs=a;null!==Xs;)l=(i=Xs).child,22===i.tag&&null!==i.memoizedState?kl(a):null!==l?(l.return=i,Xs=l):kl(a);for(;null!==o;)Xs=o,bl(o,t,n),o=o.sibling;Xs=a,Ys=s,Qs=c}El(e)}else 8772&a.subtreeFlags&&null!==o?(o.return=a,Xs=o):El(e)}}function El(e){for(;null!==Xs;){var t=Xs;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Qs||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Qs)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:ns(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Ho(t,i,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ho(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Bt(f)}}}break;default:throw Error(o(163))}Qs||512&t.flags&&al(t)}catch(e){Sc(t,t.return,e)}}if(t===e){Xs=null;break}if(null!==(n=t.sibling)){n.return=t.return,Xs=n;break}Xs=t.return}}function wl(e){for(;null!==Xs;){var t=Xs;if(t===e){Xs=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Xs=n;break}Xs=t.return}}function kl(e){for(;null!==Xs;){var t=Xs;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Sc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Sc(t,a,e)}}var o=t.return;try{al(t)}catch(e){Sc(t,o,e)}break;case 5:var i=t.return;try{al(t)}catch(e){Sc(t,i,e)}}}catch(e){Sc(t,t.return,e)}if(t===e){Xs=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Xs=s;break}Xs=t.return}}var Nl,Sl=Math.ceil,_l=E.ReactCurrentDispatcher,xl=E.ReactCurrentOwner,Il=E.ReactCurrentBatchConfig,Cl=0,Tl=null,Ll=null,Pl=0,Ol=0,Rl=Sa(0),Al=0,Dl=null,jl=0,Ml=0,Fl=0,Ul=null,zl=null,Vl=0,Bl=1/0,Wl=null,Hl=!1,$l=null,Gl=null,ql=!1,Kl=null,Yl=0,Ql=0,Jl=null,Xl=-1,Zl=0;function ec(){return 6&Cl?Je():-1!==Xl?Xl:Xl=Je()}function tc(e){return 1&e.mode?2&Cl&&0!==Pl?Pl&-Pl:null!==vo.transition?(0===Zl&&(Zl=pt()),Zl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type):1}function nc(e,t,n,r){if(50<Ql)throw Ql=0,Jl=null,Error(o(185));gt(e,n,r),2&Cl&&e===Tl||(e===Tl&&(!(2&Cl)&&(Ml|=n),4===Al&&sc(e,Pl)),rc(e,r),1===n&&0===Cl&&!(1&t.mode)&&(Bl=Je()+500,Ua&&Ba()))}function rc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),s=1<<i,l=a[i];-1===l?s&n&&!(s&r)||(a[i]=ht(s,t)):l<=t&&(e.expiredLanes|=s),o&=~s}}(e,t);var r=ft(e,e===Tl?Pl:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Ua=!0,Va(e)}(lc.bind(null,e)):Va(lc.bind(null,e)),ia((function(){!(6&Cl)&&Ba()})),n=null;else{switch(Et(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Tc(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Xl=-1,Zl=0,6&Cl)throw Error(o(327));var n=e.callbackNode;if(kc()&&e.callbackNode!==n)return null;var r=ft(e,e===Tl?Pl:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=vc(e,r);else{t=r;var a=Cl;Cl|=2;var i=mc();for(Tl===e&&Pl===t||(Wl=null,Bl=Je()+500,fc(e,t));;)try{yc();break}catch(t){hc(e,t)}Io(),_l.current=i,Cl=a,null!==Ll?t=0:(Tl=null,Pl=0,t=Al)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=oc(e,a)),1===t)throw n=Dl,fc(e,0),sc(e,r),rc(e,Je()),n;if(6===t)sc(e,r);else{if(a=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!sr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)||(t=vc(e,r),2===t&&(i=mt(e),0!==i&&(r=i,t=oc(e,i))),1!==t)))throw n=Dl,fc(e,0),sc(e,r),rc(e,Je()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:wc(e,zl,Wl);break;case 3:if(sc(e,r),(130023424&r)===r&&10<(t=Vl+500-Je())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(wc.bind(null,e,zl,Wl),t);break}wc(e,zl,Wl);break;case 4:if(sc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var s=31-it(r);i=1<<s,(s=t[s])>a&&(a=s),r&=~i}if(r=a,10<(r=(120>(r=Je()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Sl(r/1960))-r)){e.timeoutHandle=ra(wc.bind(null,e,zl,Wl),r);break}wc(e,zl,Wl);break;default:throw Error(o(329))}}}return rc(e,Je()),e.callbackNode===n?ac.bind(null,e):null}function oc(e,t){var n=Ul;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=vc(e,t))&&(t=zl,zl=n,null!==t&&ic(t)),e}function ic(e){null===zl?zl=e:zl.push.apply(zl,e)}function sc(e,t){for(t&=~Fl,t&=~Ml,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function lc(e){if(6&Cl)throw Error(o(327));kc();var t=ft(e,0);if(!(1&t))return rc(e,Je()),null;var n=vc(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=oc(e,r))}if(1===n)throw n=Dl,fc(e,0),sc(e,t),rc(e,Je()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wc(e,zl,Wl),rc(e,Je()),null}function cc(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&(Bl=Je()+500,Ua&&Ba())}}function uc(e){null!==Kl&&0===Kl.tag&&!(6&Cl)&&kc();var t=Cl;Cl|=1;var n=Il.transition,r=bt;try{if(Il.transition=null,bt=1,e)return e()}finally{bt=r,Il.transition=n,!(6&(Cl=t))&&Ba()}}function dc(){Ol=Rl.current,_a(Rl)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Ll)for(n=Ll.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:Jo(),_a(Ta),_a(Ca),ri();break;case 5:Zo(r);break;case 4:Jo();break;case 13:case 19:_a(ei);break;case 10:Co(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Tl=e,Ll=e=Rc(e.current,null),Pl=Ol=t,Al=0,Dl=null,Fl=Ml=jl=0,zl=Ul=null,null!==Oo){for(t=0;t<Oo.length;t++)if(null!==(r=(n=Oo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}Oo=null}return e}function hc(e,t){for(;;){var n=Ll;try{if(Io(),ai.current=Xi,ui){for(var r=si.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ui=!1}if(ii=0,ci=li=si=null,di=!1,fi=0,xl.current=null,null===n||null===n.return){Al=1,Dl=t,Ll=null;break}e:{var i=e,s=n.return,l=n,c=t;if(t=Pl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=vs(s);if(null!==m){m.flags&=-257,gs(m,s,l,0,t),1&m.mode&&ps(i,u,t),c=u;var p=(t=m).updateQueue;if(null===p){var v=new Set;v.add(c),t.updateQueue=v}else p.add(c);break e}if(!(1&t)){ps(i,u,t),pc();break e}c=Error(o(426))}else if(ao&&1&l.mode){var g=vs(s);if(null!==g){!(65536&g.flags)&&(g.flags|=256),gs(g,s,l,0,t),po(cs(c,l));break e}}i=c=cs(c,l),4!==Al&&(Al=2),null===Ul?Ul=[i]:Ul.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Bo(i,hs(0,c,t));break e;case 1:l=c;var y=i.type,b=i.stateNode;if(!(128&i.flags||"function"!=typeof y.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Gl&&Gl.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Bo(i,ms(i,l,t));break e}}i=i.return}while(null!==i)}Ec(n)}catch(e){t=e,Ll===n&&null!==n&&(Ll=n=n.return);continue}break}}function mc(){var e=_l.current;return _l.current=Xi,null===e?Xi:e}function pc(){0!==Al&&3!==Al&&2!==Al||(Al=4),null===Tl||!(268435455&jl)&&!(268435455&Ml)||sc(Tl,Pl)}function vc(e,t){var n=Cl;Cl|=2;var r=mc();for(Tl===e&&Pl===t||(Wl=null,fc(e,t));;)try{gc();break}catch(t){hc(e,t)}if(Io(),Cl=n,_l.current=r,null!==Ll)throw Error(o(261));return Tl=null,Pl=0,Al}function gc(){for(;null!==Ll;)bc(Ll)}function yc(){for(;null!==Ll&&!Ye();)bc(Ll)}function bc(e){var t=Nl(e.alternate,e,Ol);e.memoizedProps=e.pendingProps,null===t?Ec(e):Ll=t,xl.current=null}function Ec(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Ks(n,t)))return n.flags&=32767,void(Ll=n);if(null===e)return Al=6,void(Ll=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=qs(n,t,Ol)))return void(Ll=n);if(null!==(t=t.sibling))return void(Ll=t);Ll=t=e}while(null!==t);0===Al&&(Al=5)}function wc(e,t,n){var r=bt,a=Il.transition;try{Il.transition=null,bt=1,function(e,t,n,r){do{kc()}while(null!==Kl);if(6&Cl)throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Tl&&(Ll=Tl=null,Pl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||ql||(ql=!0,Tc(tt,(function(){return kc(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Il.transition,Il.transition=null;var s=bt;bt=1;var l=Cl;Cl|=4,xl.current=null,function(e,t){if(ea=Ht,hr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var s=0,l=-1,c=-1,u=0,d=0,f=e,h=null;t:for(;;){for(var m;f!==n||0!==a&&3!==f.nodeType||(l=s+a),f!==i||0!==r&&3!==f.nodeType||(c=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(m=f.firstChild);)h=f,f=m;for(;;){if(f===e)break t;if(h===n&&++u===a&&(l=s),h===i&&++d===r&&(c=s),null!==(m=f.nextSibling))break;h=(f=h).parentNode}f=m}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Ht=!1,Xs=t;null!==Xs;)if(e=(t=Xs).child,1028&t.subtreeFlags&&null!==e)e.return=t,Xs=e;else for(;null!==Xs;){t=Xs;try{var p=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==p){var v=p.memoizedProps,g=p.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:ns(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var E=t.stateNode.containerInfo;1===E.nodeType?E.textContent="":9===E.nodeType&&E.documentElement&&E.removeChild(E.documentElement);break;default:throw Error(o(163))}}catch(e){Sc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Xs=e;break}Xs=t.return}p=tl,tl=!1}(e,n),vl(n,e),mr(ta),Ht=!!ea,ta=ea=null,e.current=n,yl(n,e,a),Qe(),Cl=l,bt=s,Il.transition=i}else e.current=n;if(ql&&(ql=!1,Kl=e,Yl=a),0===(i=e.pendingLanes)&&(Gl=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rc(e,Je()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Hl)throw Hl=!1,e=$l,$l=null,e;!!(1&Yl)&&0!==e.tag&&kc(),1&(i=e.pendingLanes)?e===Jl?Ql++:(Ql=0,Jl=e):Ql=0,Ba()}(e,t,n,r)}finally{Il.transition=a,bt=r}return null}function kc(){if(null!==Kl){var e=Et(Yl),t=Il.transition,n=bt;try{if(Il.transition=null,bt=16>e?16:e,null===Kl)var r=!1;else{if(e=Kl,Kl=null,Yl=0,6&Cl)throw Error(o(331));var a=Cl;for(Cl|=4,Xs=e.current;null!==Xs;){var i=Xs,s=i.child;if(16&Xs.flags){var l=i.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Xs=u;null!==Xs;){var d=Xs;switch(d.tag){case 0:case 11:case 15:nl(8,d,i)}var f=d.child;if(null!==f)f.return=d,Xs=f;else for(;null!==Xs;){var h=(d=Xs).sibling,m=d.return;if(ol(d),d===u){Xs=null;break}if(null!==h){h.return=m,Xs=h;break}Xs=m}}}var p=i.alternate;if(null!==p){var v=p.child;if(null!==v){p.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Xs=i}}if(2064&i.subtreeFlags&&null!==s)s.return=i,Xs=s;else e:for(;null!==Xs;){if(2048&(i=Xs).flags)switch(i.tag){case 0:case 11:case 15:nl(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Xs=y;break e}Xs=i.return}}var b=e.current;for(Xs=b;null!==Xs;){var E=(s=Xs).child;if(2064&s.subtreeFlags&&null!==E)E.return=s,Xs=E;else e:for(s=b;null!==Xs;){if(2048&(l=Xs).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Sc(l,l.return,e)}if(l===s){Xs=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Xs=w;break e}Xs=l.return}}if(Cl=a,Ba(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Il.transition=t}}return!1}function Nc(e,t,n){e=zo(e,t=hs(0,t=cs(n,t),1),1),t=ec(),null!==e&&(gt(e,1,t),rc(e,t))}function Sc(e,t,n){if(3===e.tag)Nc(e,e,n);else for(;null!==t;){if(3===t.tag){Nc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gl||!Gl.has(r))){t=zo(t,e=ms(t,e=cs(n,e),1),1),e=ec(),null!==t&&(gt(t,1,e),rc(t,e));break}}t=t.return}}function _c(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Tl===e&&(Pl&n)===n&&(4===Al||3===Al&&(130023424&Pl)===Pl&&500>Je()-Vl?fc(e,0):Fl|=n),rc(e,t)}function xc(e,t){0===t&&(1&e.mode?(t=ut,!(130023424&(ut<<=1))&&(ut=4194304)):t=1);var n=ec();null!==(e=Do(e,t))&&(gt(e,t,n),rc(e,n))}function Ic(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),xc(e,n)}function Cc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),xc(e,n)}function Tc(e,t){return qe(e,t)}function Lc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Pc(e,t,n,r){return new Lc(e,t,n,r)}function Oc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rc(e,t){var n=e.alternate;return null===n?((n=Pc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ac(e,t,n,r,a,i){var s=2;if(r=e,"function"==typeof e)Oc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case N:return Dc(n.children,a,i,t);case S:s=8,a|=8;break;case _:return(e=Pc(12,n,t,2|a)).elementType=_,e.lanes=i,e;case T:return(e=Pc(13,n,t,a)).elementType=T,e.lanes=i,e;case L:return(e=Pc(19,n,t,a)).elementType=L,e.lanes=i,e;case R:return jc(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:s=10;break e;case I:s=9;break e;case C:s=11;break e;case P:s=14;break e;case O:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Pc(s,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Dc(e,t,n,r){return(e=Pc(7,e,r,t)).lanes=n,e}function jc(e,t,n,r){return(e=Pc(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Mc(e,t,n){return(e=Pc(6,e,null,t)).lanes=n,e}function Fc(e,t,n){return(t=Pc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Uc(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function zc(e,t,n,r,a,o,i,s,l){return e=new Uc(e,t,n,s,l),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Pc(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Mo(o),e}function Vc(e){if(!e)return Ia;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Oa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Oa(n))return Da(e,n,t)}return t}function Bc(e,t,n,r,a,o,i,s,l){return(e=zc(n,r,!0,e,0,o,0,s,l)).context=Vc(null),n=e.current,(o=Uo(r=ec(),a=tc(n))).callback=null!=t?t:null,zo(n,o,a),e.current.lanes=a,gt(e,a,r),rc(e,r),e}function Wc(e,t,n,r){var a=t.current,o=ec(),i=tc(a);return n=Vc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Uo(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=zo(a,t,i))&&(nc(e,a,i,o),Vo(e,a,i)),i}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function $c(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gc(e,t){$c(e,t),(e=e.alternate)&&$c(e,t)}Nl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ta.current)bs=!0;else{if(!(e.lanes&n||128&t.flags))return bs=!1,function(e,t,n){switch(t.tag){case 3:Ts(t),mo();break;case 5:Xo(t);break;case 1:Oa(t.type)&&ja(t);break;case 4:Qo(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(No,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?Ms(e,t,n):(xa(ei,1&ei.current),null!==(e=Hs(e,t,n))?e.sibling:null);xa(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Bs(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,Ss(e,t,n)}return Hs(e,t,n)}(e,t,n);bs=!!(131072&e.flags)}else bs=!1,ao&&1048576&t.flags&&Za(t,Ga,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ws(e,t),e=t.pendingProps;var a=Pa(t,Ca.current);Lo(t,n),a=vi(null,t,r,e,a,n);var i=gi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Oa(r)?(i=!0,ja(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Mo(t),a.updater=as,t.stateNode=a,a._reactInternals=t,ls(t,r,e,n),t=Cs(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),Es(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ws(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Oc(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===P)return 14}return 2}(r),e=ns(r,e),a){case 0:t=xs(null,t,r,e,n);break e;case 1:t=Is(null,t,r,e,n);break e;case 11:t=ws(null,t,r,e,n);break e;case 14:t=ks(null,t,r,ns(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,xs(e,t,r,a=t.elementType===r?a:ns(r,a),n);case 1:return r=t.type,a=t.pendingProps,Is(e,t,r,a=t.elementType===r?a:ns(r,a),n);case 3:e:{if(Ts(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,Fo(e,t),Wo(t,r,null,n);var s=t.memoizedState;if(r=s.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ls(e,t,r,n,a=cs(Error(o(423)),t));break e}if(r!==a){t=Ls(e,t,r,n,a=cs(Error(o(424)),t));break e}for(ro=ca(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=ko(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(mo(),r===a){t=Hs(e,t,n);break e}Es(e,t,r,n)}t=t.child}return t;case 5:return Xo(t),null===e&&co(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,na(r,a)?s=null:null!==i&&na(r,i)&&(t.flags|=32),_s(e,t),Es(e,t,s,n),t.child;case 6:return null===e&&co(t),null;case 13:return Ms(e,t,n);case 4:return Qo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wo(t,null,r,n):Es(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,ws(e,t,r,a=t.elementType===r?a:ns(r,a),n);case 7:return Es(e,t,t.pendingProps,n),t.child;case 8:case 12:return Es(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,s=a.value,xa(No,r._currentValue),r._currentValue=s,null!==i)if(sr(i.value,s)){if(i.children===a.children&&!Ta.current){t=Hs(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var l=i.dependencies;if(null!==l){s=i.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Uo(-1,n&-n)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),To(i.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===i.tag)s=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(s=i.return))throw Error(o(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),To(s,n,t),s=i.sibling}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===t){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}Es(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Lo(t,n),r=r(a=Po(a)),t.flags|=1,Es(e,t,r,n),t.child;case 14:return a=ns(r=t.type,t.pendingProps),ks(e,t,r,a=ns(r.type,a),n);case 15:return Ns(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:ns(r,a),Ws(e,t),t.tag=1,Oa(r)?(e=!0,ja(t)):e=!1,Lo(t,n),is(t,r,a),ls(t,r,a,n),Cs(null,t,r,!0,e,n);case 19:return Bs(e,t,n);case 22:return Ss(e,t,n)}throw Error(o(156,t.tag))};var qc="function"==typeof reportError?reportError:function(e){console.error(e)};function Kc(e){this._internalRoot=e}function Yc(e){this._internalRoot=e}function Qc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xc(){}function Zc(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var s=a;a=function(){var e=Hc(i);s.call(e)}}Wc(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Hc(i);o.call(e)}}var i=Bc(t,r,e,0,null,!1,0,"",Xc);return e._reactRootContainer=i,e[ma]=i.current,Br(8===e.nodeType?e.parentNode:e),uc(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var s=r;r=function(){var e=Hc(l);s.call(e)}}var l=zc(e,0,!1,null,0,!1,0,"",Xc);return e._reactRootContainer=l,e[ma]=l.current,Br(8===e.nodeType?e.parentNode:e),uc((function(){Wc(t,l,n,r)})),l}(n,t,e,a,r);return Hc(i)}Yc.prototype.render=Kc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Wc(e,t,null,null)},Yc.prototype.unmount=Kc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Wc(null,e,null,null)})),t[ma]=null}},Yc.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Mt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),rc(t,Je()),!(6&Cl)&&(Bl=Je()+500,Ba()))}break;case 13:uc((function(){var t=Do(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),Gc(e,1)}},kt=function(e){if(13===e.tag){var t=Do(e,134217728);null!==t&&nc(t,e,134217728,ec()),Gc(e,134217728)}},Nt=function(e){if(13===e.tag){var t=tc(e),n=Do(e,t);null!==n&&nc(n,e,t,ec()),Gc(e,t)}},St=function(){return bt},_t=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(o(90));q(r),X(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ce=cc,Te=uc;var eu={usingClientEntryPoint:!1,Events:[ba,Ea,wa,xe,Ie,cc]},tu={findFiberByHostInstance:ya,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nu={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{at=ru.inject(nu),ot=ru}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Qc(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Qc(e))throw Error(o(299));var n=!1,r="",a=qc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=zc(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Br(8===e.nodeType?e.parentNode:e),new Kc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,n){if(!Jc(t))throw Error(o(200));return Zc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Qc(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",s=qc;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Bc(t,null,e,1,null!=n?n:null,a,0,i,s),e[ma]=t.current,Br(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Yc(t)},t.render=function(e,t,n){if(!Jc(t))throw Error(o(200));return Zc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc((function(){Zc(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jc(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Zc(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},917:()=>{document.addEventListener("DOMContentLoaded",(function(){var e,t;e=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting?(e.target.classList.add("visible"),e.target.classList.contains("keep-observing")||t.unobserve(e.target)):e.target.classList.contains("keep-observing")&&e.target.classList.remove("visible")}))}),{root:null,rootMargin:"0px",threshold:.15}),document.querySelectorAll(".fade-in, .slide-in-left, .slide-in-right").forEach((function(t){return e.observe(t)})),function(){var e=document.querySelector(".navbar");if(e){var t=function(){window.scrollY>50?e.classList.add("scrolled"):e.classList.remove("scrolled")};window.addEventListener("scroll",t),t()}}(),document.querySelectorAll(".accordion-toggle").forEach((function(e){e.addEventListener("click",(function(){this.parentElement.classList.toggle("active")}))})),function(){var e=document.querySelector(".navbar-toggler");if(e){var t=document.querySelector(".navbar-menu");e.addEventListener("click",(function(){e.classList.toggle("open"),t.classList.toggle("open"),document.body.classList.toggle("menu-open")})),document.addEventListener("click",(function(n){t&&t.classList.contains("open")&&!t.contains(n.target)&&!e.contains(n.target)&&(e.classList.remove("open"),t.classList.remove("open"),document.body.classList.remove("menu-open"))})),document.addEventListener("keydown",(function(n){"Escape"===n.key&&t&&t.classList.contains("open")&&(e.classList.remove("open"),t.classList.remove("open"),document.body.classList.remove("menu-open"))}))}}(),0!==(t=document.querySelectorAll(".parallax-bg, .hero-bg")).length&&window.addEventListener("scroll",(function(){var e=window.scrollY;t.forEach((function(t){var n=t.parentElement.offsetTop,r=t.dataset.speed||.3,a=(e-n)*r;t.style.transform="translateY(".concat(a,"px)")}))}))})),window.addEventListener("load",(function(){document.querySelectorAll(".tab-button").forEach((function(e){e.addEventListener("click",(function(){var t=e.getAttribute("data-tab"),n=e.closest(".tabs-container");n.querySelectorAll(".tab-button").forEach((function(e){e.classList.remove("active")})),e.classList.add("active"),n.querySelectorAll(".tab-content").forEach((function(e){e.classList.remove("active")})),n.querySelector("#".concat(t)).classList.add("active")}))})),document.querySelectorAll('a[href^="#"]').forEach((function(e){e.addEventListener("click",(function(e){e.preventDefault();var t=this.getAttribute("href");if("#"!==t){var n=document.querySelector(t);if(n){var r,a=(null===(r=document.querySelector(".navbar"))||void 0===r?void 0:r.offsetHeight)||0;window.scrollTo({top:n.offsetTop-a-20,behavior:"smooth"}),history.pushState(null,null,t)}}}))}))}))},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},982:(e,t,n)=>{"use strict";e.exports=n(463)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e](o,o.exports,a),o.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e,t=a(540),n=a.t(t,2),r=a(338);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function s(e,t){if(!1===e||null==e)throw new Error(t)}function l(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function c(e,t){return{usr:e.state,key:e.key,idx:t}}function u(e,t,n,r){return void 0===n&&(n=null),o({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function d(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var h;function m(e,t,n){return void 0===n&&(n="/"),function(e,t,n,r){let a=C(("string"==typeof t?f(t):t).pathname||"/",n);if(null==a)return null;let o=p(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=I(a);i=_(o[e],t,r)}return i}(e,t,n,!1)}function p(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(s(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=O([r,i.relativePath]),c=n.concat(i);e.children&&e.children.length>0&&(s(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),p(e.children,t,c,l)),(null!=e.path||e.index)&&t.push({path:l,score:S(l,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of v(e.path))a(e,t,n);else a(e,t)})),t}function v(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=v(r.join("/")),s=[];return s.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&s.push(...i),s.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(h||(h={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const g=/^:[\w-]+$/,y=3,b=2,E=1,w=10,k=-2,N=e=>"*"===e;function S(e,t){let n=e.split("/"),r=n.length;return n.some(N)&&(r+=k),t&&(r+=b),n.filter((e=>!N(e))).reduce(((e,t)=>e+(g.test(t)?y:""===t?E:w)),r)}function _(e,t,n){void 0===n&&(n=!1);let{routesMeta:r}=e,a={},o="/",i=[];for(let e=0;e<r.length;++e){let s=r[e],l=e===r.length-1,c="/"===o?t:t.slice(o.length)||"/",u=x({path:s.relativePath,caseSensitive:s.caseSensitive,end:l},c),d=s.route;if(!u&&l&&n&&!r[r.length-1].route.index&&(u=x({path:s.relativePath,caseSensitive:s.caseSensitive,end:!1},c)),!u)return null;Object.assign(a,u.params),i.push({params:a,pathname:O([o,u.pathname]),pathnameBase:R(O([o,u.pathnameBase])),route:d}),"/"!==u.pathnameBase&&(o=O([o,u.pathnameBase]))}return i}function x(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),l("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),s=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=s[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const l=s[n];return e[r]=a&&!l?void 0:(l||"").replace(/%2F/g,"/"),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function I(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return l(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function C(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function T(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function L(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((e,t)=>t===n.length-1?e.pathname:e.pathnameBase)):n.map((e=>e.pathnameBase))}function P(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=f(e):(a=o({},e),s(!a.pathname||!a.pathname.includes("?"),T("?","pathname","search",a)),s(!a.pathname||!a.pathname.includes("#"),T("#","pathname","hash",a)),s(!a.search||!a.search.includes("#"),T("#","search","hash",a)));let i,l=""===e||""===a.pathname,c=l?"/":a.pathname;if(null==c)i=n;else{let e=t.length-1;if(!r&&c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}i=e>=0?t[e]:"/"}let u=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?f(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:A(r),hash:D(a)}}(a,i),d=c&&"/"!==c&&c.endsWith("/"),h=(l||"."===c)&&n.endsWith("/");return u.pathname.endsWith("/")||!d&&!h||(u.pathname+="/"),u}const O=e=>e.join("/").replace(/\/\/+/g,"/"),R=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),A=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",D=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const j=["post","put","patch","delete"],M=(new Set(j),["get",...j]);function F(){return F=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},F.apply(this,arguments)}new Set(M),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const U=t.createContext(null),z=t.createContext(null),V=t.createContext(null),B=t.createContext(null),W=t.createContext({outlet:null,matches:[],isDataRoute:!1}),H=t.createContext(null);function $(){return null!=t.useContext(B)}function G(){return $()||s(!1),t.useContext(B).location}function q(e){t.useContext(V).static||t.useLayoutEffect(e)}function K(){let{isDataRoute:e}=t.useContext(W);return e?function(){let{router:e}=function(){let e=t.useContext(U);return e||s(!1),e}(ne.UseNavigateStable),n=ae(re.UseNavigateStable),r=t.useRef(!1);return q((()=>{r.current=!0})),t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,F({fromRouteId:n},a)))}),[e,n])}():function(){$()||s(!1);let e=t.useContext(U),{basename:n,future:r,navigator:a}=t.useContext(V),{matches:o}=t.useContext(W),{pathname:i}=G(),l=JSON.stringify(L(o,r.v7_relativeSplatPath)),c=t.useRef(!1);return q((()=>{c.current=!0})),t.useCallback((function(t,r){if(void 0===r&&(r={}),!c.current)return;if("number"==typeof t)return void a.go(t);let o=P(t,JSON.parse(l),i,"path"===r.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:O([n,o.pathname])),(r.replace?a.replace:a.push)(o,r.state,r)}),[n,a,l,i,e])}()}function Y(){let{matches:e}=t.useContext(W),n=e[e.length-1];return n?n.params:{}}function Q(e,n){let{relative:r}=void 0===n?{}:n,{future:a}=t.useContext(V),{matches:o}=t.useContext(W),{pathname:i}=G(),s=JSON.stringify(L(o,a.v7_relativeSplatPath));return t.useMemo((()=>P(e,JSON.parse(s),i,"path"===r)),[e,s,i,r])}function J(n,r,a,o){$()||s(!1);let{navigator:i,static:l}=t.useContext(V),{matches:c}=t.useContext(W),u=c[c.length-1],d=u?u.params:{},h=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let p,v=G();if(r){var g;let e="string"==typeof r?f(r):r;"/"===h||(null==(g=e.pathname)?void 0:g.startsWith(h))||s(!1),p=e}else p=v;let y=p.pathname||"/",b=y;if("/"!==h){let e=h.replace(/^\//,"").split("/");b="/"+y.replace(/^\//,"").split("/").slice(e.length).join("/")}let E=!l&&a&&a.matches&&a.matches.length>0?a.matches:m(n,{pathname:b}),w=function(e,n,r,a){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===a&&(a=null),null==e){var i;if(!r)return null;if(r.errors)e=r.matches;else{if(!(null!=(i=a)&&i.v7_partialHydration&&0===n.length&&!r.initialized&&r.matches.length>0))return null;e=r.matches}}let l=e,c=null==(o=r)?void 0:o.errors;if(null!=c){let e=l.findIndex((e=>e.route.id&&void 0!==(null==c?void 0:c[e.route.id])));e>=0||s(!1),l=l.slice(0,Math.min(l.length,e+1))}let u=!1,d=-1;if(r&&a&&a.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(d=e),t.route.id){let{loaderData:e,errors:n}=r,a=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||a){u=!0,l=d>=0?l.slice(0,d+1):[l[0]];break}}}return l.reduceRight(((e,a,o)=>{let i,s=!1,f=null,h=null;var m;r&&(i=c&&a.route.id?c[a.route.id]:void 0,f=a.route.errorElement||Z,u&&(d<0&&0===o?(oe[m="route-fallback"]||(oe[m]=!0),s=!0,h=null):d===o&&(s=!0,h=a.route.hydrateFallbackElement||null)));let p=n.concat(l.slice(0,o+1)),v=()=>{let n;return n=i?f:s?h:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(te,{match:a,routeContext:{outlet:e,matches:p,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement(ee,{location:r.location,revalidation:r.revalidation,component:f,error:i,children:v(),routeContext:{outlet:null,matches:p,isDataRoute:!0}}):v()}),null)}(E&&E.map((e=>Object.assign({},e,{params:Object.assign({},d,e.params),pathname:O([h,i.encodeLocation?i.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?h:O([h,i.encodeLocation?i.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),c,a,o);return r&&w?t.createElement(B.Provider,{value:{location:F({pathname:"/",search:"",hash:"",state:null,key:"default"},p),navigationType:e.Pop}},w):w}function X(){let e=function(){var e;let n=t.useContext(H),r=function(){let e=t.useContext(z);return e||s(!1),e}(re.UseRouteError),a=ae(re.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[a]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const Z=t.createElement(X,null);class ee extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(W.Provider,{value:this.props.routeContext},t.createElement(H.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function te(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(U);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(W.Provider,{value:n},a)}var ne=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(ne||{}),re=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(re||{});function ae(e){let n=function(){let e=t.useContext(W);return e||s(!1),e}(),r=n.matches[n.matches.length-1];return r.route.id||s(!1),r.route.id}const oe={};function ie(e){let{to:n,replace:r,state:a,relative:o}=e;$()||s(!1);let{future:i,static:l}=t.useContext(V),{matches:c}=t.useContext(W),{pathname:u}=G(),d=K(),f=P(n,L(c,i.v7_relativeSplatPath),u,"path"===o),h=JSON.stringify(f);return t.useEffect((()=>d(JSON.parse(h),{replace:r,state:a,relative:o})),[d,h,o,r,a]),null}function se(e){s(!1)}function le(n){let{basename:r="/",children:a=null,location:o,navigationType:i=e.Pop,navigator:l,static:c=!1,future:u}=n;$()&&s(!1);let d=r.replace(/^\/*/,"/"),h=t.useMemo((()=>({basename:d,navigator:l,static:c,future:F({v7_relativeSplatPath:!1},u)})),[d,u,l,c]);"string"==typeof o&&(o=f(o));let{pathname:m="/",search:p="",hash:v="",state:g=null,key:y="default"}=o,b=t.useMemo((()=>{let e=C(m,d);return null==e?null:{location:{pathname:e,search:p,hash:v,state:g,key:y},navigationType:i}}),[d,m,p,v,g,y,i]);return null==b?null:t.createElement(V.Provider,{value:h},t.createElement(B.Provider,{children:a,value:b}))}function ce(e){let{children:t,location:n}=e;return J(ue(t),n)}function ue(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,ue(e.props.children,o));e.type!==se&&s(!1),e.props.index&&e.props.children&&s(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=ue(e.props.children,o)),r.push(i)})),r}n.startTransition,new Promise((()=>{})),t.Component;var de=a(961),fe=a.t(de,2);function he(){return he=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},he.apply(this,arguments)}new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const me=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"];try{window.__reactRouterVersion="6"}catch(e){}new Map;const pe=n.startTransition;function ve(n){let{basename:r,children:a,future:l,window:f}=n,h=t.useRef();var m;null==h.current&&(h.current=(void 0===(m={window:f,v5Compat:!0})&&(m={}),function(t,n,r,a){void 0===a&&(a={});let{window:l=document.defaultView,v5Compat:f=!1}=a,h=l.history,m=e.Pop,p=null,v=g();function g(){return(h.state||{idx:null}).idx}function y(){m=e.Pop;let t=g(),n=null==t?null:t-v;v=t,p&&p({action:m,location:E.location,delta:n})}function b(e){let t="null"!==l.location.origin?l.location.origin:l.location.href,n="string"==typeof e?e:d(e);return n=n.replace(/ $/,"%20"),s(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==v&&(v=0,h.replaceState(o({},h.state,{idx:v}),""));let E={get action(){return m},get location(){return t(l,h)},listen(e){if(p)throw new Error("A history only accepts one active listener");return l.addEventListener(i,y),p=e,()=>{l.removeEventListener(i,y),p=null}},createHref:e=>n(l,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){m=e.Push;let a=u(E.location,t,n);r&&r(a,t),v=g()+1;let o=c(a,v),i=E.createHref(a);try{h.pushState(o,"",i)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;l.location.assign(i)}f&&p&&p({action:m,location:E.location,delta:1})},replace:function(t,n){m=e.Replace;let a=u(E.location,t,n);r&&r(a,t),v=g();let o=c(a,v),i=E.createHref(a);h.replaceState(o,"",i),f&&p&&p({action:m,location:E.location,delta:0})},go:e=>h.go(e)};return E}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return u("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:d(t)}),null,m)));let p=h.current,[v,g]=t.useState({action:p.action,location:p.location}),{v7_startTransition:y}=l||{},b=t.useCallback((e=>{y&&pe?pe((()=>g(e))):g(e)}),[g,y]);return t.useLayoutEffect((()=>p.listen(b)),[p,b]),t.useEffect((()=>{return null==(e=l)||e.v7_startTransition,void 0!==(null==e?void 0:e.v7_relativeSplatPath)||t&&t.v7_relativeSplatPath,void(t&&(t.v7_fetcherPersist,t.v7_normalizeFormMethod,t.v7_partialHydration,t.v7_skipActionErrorRevalidation));var e,t}),[l]),t.createElement(le,{basename:r,children:a,location:v.location,navigationType:v.action,navigator:p,future:l})}fe.flushSync,n.useId;const ge="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,ye=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,be=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:i,replace:l,state:c,target:u,to:f,preventScrollReset:h,viewTransition:m}=e,p=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,me),{basename:v}=t.useContext(V),g=!1;if("string"==typeof f&&ye.test(f)&&(r=f,ge))try{let e=new URL(window.location.href),t=f.startsWith("//")?new URL(e.protocol+f):new URL(f),n=C(t.pathname,v);t.origin===e.origin&&null!=n?f=n+t.search+t.hash:g=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;$()||s(!1);let{basename:a,navigator:o}=t.useContext(V),{hash:i,pathname:l,search:c}=Q(e,{relative:r}),u=l;return"/"!==a&&(u="/"===l?a:O([a,l])),o.createHref({pathname:u,search:c,hash:i})}(f,{relative:o}),b=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:s,viewTransition:l}=void 0===n?{}:n,c=K(),u=G(),f=Q(e,{relative:s});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:d(u)===d(f);c(e,{replace:n,state:o,preventScrollReset:i,relative:s,viewTransition:l})}}),[u,c,f,a,o,r,e,i,s,l])}(f,{replace:l,state:c,target:u,preventScrollReset:h,relative:o,viewTransition:m});return t.createElement("a",he({},p,{href:r||y,onClick:g||i?a:function(e){a&&a(e),e.defaultPrevented||b(e)},ref:n,target:u}))}));var Ee,we;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Ee||(Ee={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(we||(we={}));const ke=function(e){const t=[];let n=0;for(let r=0;r<e.length;r++){let a=e.charCodeAt(r);a<128?t[n++]=a:a<2048?(t[n++]=a>>6|192,t[n++]=63&a|128):55296==(64512&a)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++r)),t[n++]=a>>18|240,t[n++]=a>>12&63|128,t[n++]=a>>6&63|128,t[n++]=63&a|128):(t[n++]=a>>12|224,t[n++]=a>>6&63|128,t[n++]=63&a|128)}return t},Ne={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[];for(let t=0;t<e.length;t+=3){const a=e[t],o=t+1<e.length,i=o?e[t+1]:0,s=t+2<e.length,l=s?e[t+2]:0,c=a>>2,u=(3&a)<<4|i>>4;let d=(15&i)<<2|l>>6,f=63&l;s||(f=64,o||(d=64)),r.push(n[c],n[u],n[d],n[f])}return r.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(ke(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,r=0;for(;n<e.length;){const a=e[n++];if(a<128)t[r++]=String.fromCharCode(a);else if(a>191&&a<224){const o=e[n++];t[r++]=String.fromCharCode((31&a)<<6|63&o)}else if(a>239&&a<365){const o=((7&a)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(o>>10)),t[r++]=String.fromCharCode(56320+(1023&o))}else{const o=e[n++],i=e[n++];t[r++]=String.fromCharCode((15&a)<<12|(63&o)<<6|63&i)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[];for(let t=0;t<e.length;){const a=n[e.charAt(t++)],o=t<e.length?n[e.charAt(t)]:0;++t;const i=t<e.length?n[e.charAt(t)]:64;++t;const s=t<e.length?n[e.charAt(t)]:64;if(++t,null==a||null==o||null==i||null==s)throw new Se;const l=a<<2|o>>4;if(r.push(l),64!==i){const e=o<<4&240|i>>2;if(r.push(e),64!==s){const e=i<<6&192|s;r.push(e)}}}return r},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class Se extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const _e=function(e){return function(e){const t=ke(e);return Ne.encodeByteArray(t,!0)}(e).replace(/\./g,"")},xe=function(e){try{return Ne.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null},Ie=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==a.g)return a.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&xe(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},Ce=()=>{var e;return null===(e=Ie())||void 0===e?void 0:e.config},Te=e=>{var t;return null===(t=Ie())||void 0===t?void 0:t[`_${e}`]};class Le{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function Pe(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}class Oe extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,Oe.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,Re.prototype.create)}}class Re{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},r=`${this.service}/${e}`,a=this.errors[e],o=a?function(e,t){return e.replace(Ae,((e,n)=>{const r=t[n];return null!=r?String(r):`<${n}?>`}))}(a,n):"Error",i=`${this.serviceName}: ${o} (${r}).`;return new Oe(r,i,n)}}const Ae=/\{\$([^}]+)}/g;function De(e,t){if(e===t)return!0;const n=Object.keys(e),r=Object.keys(t);for(const a of n){if(!r.includes(a))return!1;const n=e[a],o=t[a];if(je(n)&&je(o)){if(!De(n,o))return!1}else if(n!==o)return!1}for(const e of r)if(!n.includes(e))return!1;return!0}function je(e){return null!==e&&"object"==typeof e}function Me(e){const t=[];for(const[n,r]of Object.entries(e))Array.isArray(r)?r.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(r));return t.length?"&"+t.join("&"):""}function Fe(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[n,r]=e.split("=");t[decodeURIComponent(n)]=decodeURIComponent(r)}})),t}function Ue(e){const t=e.indexOf("?");if(!t)return"";const n=e.indexOf("#",t);return e.substring(t,n>0?n:void 0)}class ze{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,n){let r;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");r=function(e){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:n},void 0===r.next&&(r.next=Ve),void 0===r.error&&(r.error=Ve),void 0===r.complete&&(r.complete=Ve);const a=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?r.error(this.finalError):r.complete()}catch(e){}})),this.observers.push(r),a}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function Ve(){}function Be(e){return e&&e._delegate?e._delegate:e}class We{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const He="[DEFAULT]";class $e{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new Le;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),r=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(r)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:He})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e=He){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=He){return this.instances.has(e)}getOptions(e=He){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const r=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(r);return r}onInit(e,t){var n;const r=this.normalizeInstanceIdentifier(t),a=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;a.add(e),this.onInitCallbacks.set(r,a);const o=this.instances.get(r);return o&&e(o,r),()=>{a.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const r of n)try{r(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(r=e,r===He?void 0:r),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var r;return n||null}normalizeInstanceIdentifier(e=He){return this.component?this.component.multipleInstances?e:He:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class Ge{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new $e(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const qe=[];var Ke;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(Ke||(Ke={}));const Ye={debug:Ke.DEBUG,verbose:Ke.VERBOSE,info:Ke.INFO,warn:Ke.WARN,error:Ke.ERROR,silent:Ke.SILENT},Qe=Ke.INFO,Je={[Ke.DEBUG]:"log",[Ke.VERBOSE]:"log",[Ke.INFO]:"info",[Ke.WARN]:"warn",[Ke.ERROR]:"error"},Xe=(e,t,...n)=>{if(t<e.logLevel)return;const r=(new Date).toISOString(),a=Je[t];if(!a)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[a](`[${r}]  ${e.name}:`,...n)};class Ze{constructor(e){this.name=e,this._logLevel=Qe,this._logHandler=Xe,this._userLogHandler=null,qe.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in Ke))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?Ye[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,Ke.DEBUG,...e),this._logHandler(this,Ke.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,Ke.VERBOSE,...e),this._logHandler(this,Ke.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,Ke.INFO,...e),this._logHandler(this,Ke.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,Ke.WARN,...e),this._logHandler(this,Ke.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,Ke.ERROR,...e),this._logHandler(this,Ke.ERROR,...e)}}let et,tt;const nt=new WeakMap,rt=new WeakMap,at=new WeakMap,ot=new WeakMap,it=new WeakMap;let st={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return rt.get(e);if("objectStoreNames"===t)return e.objectStoreNames||at.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return ct(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function lt(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(tt||(tt=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(ut(this),e),ct(nt.get(this))}:function(...e){return ct(t.apply(ut(this),e))}:function(e,...n){const r=t.call(ut(this),e,...n);return at.set(r,e.sort?e.sort():[e]),ct(r)}:(e instanceof IDBTransaction&&function(e){if(rt.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",o),e.removeEventListener("abort",o)},a=()=>{t(),r()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",a),e.addEventListener("error",o),e.addEventListener("abort",o)}));rt.set(e,t)}(e),n=e,(et||(et=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,st):e);var t,n}function ct(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",a),e.removeEventListener("error",o)},a=()=>{t(ct(e.result)),r()},o=()=>{n(e.error),r()};e.addEventListener("success",a),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&nt.set(t,e)})).catch((()=>{})),it.set(t,e),t}(e);if(ot.has(e))return ot.get(e);const t=lt(e);return t!==e&&(ot.set(e,t),it.set(t,e)),t}const ut=e=>it.get(e),dt=["get","getKey","getAll","getAllKeys","count"],ft=["put","add","delete","clear"],ht=new Map;function mt(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(ht.get(t))return ht.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,a=ft.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!a&&!dt.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,a?"readwrite":"readonly");let i=o.store;return r&&(i=i.index(t.shift())),(await Promise.all([i[n](...t),a&&o.done]))[0]};return ht.set(t,o),o}var pt;pt=st,st={...pt,get:(e,t,n)=>mt(e,t)||pt.get(e,t,n),has:(e,t)=>!!mt(e,t)||pt.has(e,t)};class vt{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const gt="@firebase/app",yt="0.11.5",bt=new Ze("@firebase/app"),Et="@firebase/app-compat",wt="@firebase/analytics-compat",kt="@firebase/analytics",Nt="@firebase/app-check-compat",St="@firebase/app-check",_t="@firebase/auth",xt="@firebase/auth-compat",It="@firebase/database",Ct="@firebase/data-connect",Tt="@firebase/database-compat",Lt="@firebase/functions",Pt="@firebase/functions-compat",Ot="@firebase/installations",Rt="@firebase/installations-compat",At="@firebase/messaging",Dt="@firebase/messaging-compat",jt="@firebase/performance",Mt="@firebase/performance-compat",Ft="@firebase/remote-config",Ut="@firebase/remote-config-compat",zt="@firebase/storage",Vt="@firebase/storage-compat",Bt="@firebase/firestore",Wt="@firebase/vertexai",Ht="@firebase/firestore-compat",$t="firebase",Gt="[DEFAULT]",qt={[gt]:"fire-core",[Et]:"fire-core-compat",[kt]:"fire-analytics",[wt]:"fire-analytics-compat",[St]:"fire-app-check",[Nt]:"fire-app-check-compat",[_t]:"fire-auth",[xt]:"fire-auth-compat",[It]:"fire-rtdb",[Ct]:"fire-data-connect",[Tt]:"fire-rtdb-compat",[Lt]:"fire-fn",[Pt]:"fire-fn-compat",[Ot]:"fire-iid",[Rt]:"fire-iid-compat",[At]:"fire-fcm",[Dt]:"fire-fcm-compat",[jt]:"fire-perf",[Mt]:"fire-perf-compat",[Ft]:"fire-rc",[Ut]:"fire-rc-compat",[zt]:"fire-gcs",[Vt]:"fire-gcs-compat",[Bt]:"fire-fst",[Ht]:"fire-fst-compat",[Wt]:"fire-vertex","fire-js":"fire-js",[$t]:"fire-js-all"},Kt=new Map,Yt=new Map,Qt=new Map;function Jt(e,t){try{e.container.addComponent(t)}catch(n){bt.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function Xt(e){const t=e.name;if(Qt.has(t))return bt.debug(`There were multiple attempts to register component ${t}.`),!1;Qt.set(t,e);for(const t of Kt.values())Jt(t,e);for(const t of Yt.values())Jt(t,e);return!0}function Zt(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}function en(e){return null!=e&&void 0!==e.settings}const tn=new Re("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}'","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","server-app-deleted":"Firebase Server App has been deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.","finalization-registry-not-supported":"FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.","invalid-server-app-environment":"FirebaseServerApp is not for use in browser environments."});class nn{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new We("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw tn.create("app-deleted",{appName:this._name})}}const rn="11.6.1";function an(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const r=Object.assign({name:Gt,automaticDataCollectionEnabled:!1},t),a=r.name;if("string"!=typeof a||!a)throw tn.create("bad-app-name",{appName:String(a)});if(n||(n=Ce()),!n)throw tn.create("no-options");const o=Kt.get(a);if(o){if(De(n,o.options)&&De(r,o.config))return o;throw tn.create("duplicate-app",{appName:a})}const i=new Ge(a);for(const e of Qt.values())i.addComponent(e);const s=new nn(n,r,i);return Kt.set(a,s),s}function on(e,t,n){var r;let a=null!==(r=qt[e])&&void 0!==r?r:e;n&&(a+=`-${n}`);const o=a.match(/\s|\//),i=t.match(/\s|\//);if(o||i){const e=[`Unable to register library "${a}" with version "${t}":`];return o&&e.push(`library name "${a}" contains illegal characters (whitespace or "/")`),o&&i&&e.push("and"),i&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void bt.warn(e.join(" "))}Xt(new We(`${a}-version`,(()=>({library:a,version:t})),"VERSION"))}const sn="firebase-heartbeat-store";let ln=null;function cn(){return ln||(ln=function(e,t,{blocked:n,upgrade:r,blocking:a,terminated:o}={}){const i=indexedDB.open(e,t),s=ct(i);return r&&i.addEventListener("upgradeneeded",(e=>{r(ct(i.result),e.oldVersion,e.newVersion,ct(i.transaction),e)})),n&&i.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),s.then((e=>{o&&e.addEventListener("close",(()=>o())),a&&e.addEventListener("versionchange",(e=>a(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),s}("firebase-heartbeat-database",1,{upgrade:(e,t)=>{if(0===t)try{e.createObjectStore(sn)}catch(e){console.warn(e)}}}).catch((e=>{throw tn.create("idb-open",{originalErrorMessage:e.message})}))),ln}async function un(e,t){try{const n=(await cn()).transaction(sn,"readwrite"),r=n.objectStore(sn);await r.put(t,dn(e)),await n.done}catch(e){if(e instanceof Oe)bt.warn(e.message);else{const t=tn.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});bt.warn(t.message)}}}function dn(e){return`${e.name}!${e.options.appId}`}class fn{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new mn(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){var e,t;try{const n=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),r=hn();if(null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)&&(this._heartbeatsCache=await this._heartbeatsCachePromise,null==(null===(t=this._heartbeatsCache)||void 0===t?void 0:t.heartbeats)))return;if(this._heartbeatsCache.lastSentHeartbeatDate===r||this._heartbeatsCache.heartbeats.some((e=>e.date===r)))return;if(this._heartbeatsCache.heartbeats.push({date:r,agent:n}),this._heartbeatsCache.heartbeats.length>30){const e=function(e){if(0===e.length)return-1;let t=0,n=e[0].date;for(let r=1;r<e.length;r++)e[r].date<n&&(n=e[r].date,t=r);return t}(this._heartbeatsCache.heartbeats);this._heartbeatsCache.heartbeats.splice(e,1)}return this._storage.overwrite(this._heartbeatsCache)}catch(e){bt.warn(e)}}async getHeartbeatsHeader(){var e;try{if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null==(null===(e=this._heartbeatsCache)||void 0===e?void 0:e.heartbeats)||0===this._heartbeatsCache.heartbeats.length)return"";const t=hn(),{heartbeatsToSend:n,unsentEntries:r}=function(e,t=1024){const n=[];let r=e.slice();for(const a of e){const e=n.find((e=>e.agent===a.agent));if(e){if(e.dates.push(a.date),pn(n)>t){e.dates.pop();break}}else if(n.push({agent:a.agent,dates:[a.date]}),pn(n)>t){n.pop();break}r=r.slice(1)}return{heartbeatsToSend:n,unsentEntries:r}}(this._heartbeatsCache.heartbeats),a=_e(JSON.stringify({version:2,heartbeats:n}));return this._heartbeatsCache.lastSentHeartbeatDate=t,r.length>0?(this._heartbeatsCache.heartbeats=r,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),a}catch(e){return bt.warn(e),""}}}function hn(){return(new Date).toISOString().substring(0,10)}class mn{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!function(){try{return"object"==typeof indexedDB}catch(e){return!1}}()&&new Promise(((e,t)=>{try{let n=!0;const r="validate-browser-context-for-indexeddb-analytics-module",a=self.indexedDB.open(r);a.onsuccess=()=>{a.result.close(),n||self.indexedDB.deleteDatabase(r),e(!0)},a.onupgradeneeded=()=>{n=!1},a.onerror=()=>{var e;t((null===(e=a.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){try{const t=(await cn()).transaction(sn),n=await t.objectStore(sn).get(dn(e));return await t.done,n}catch(e){if(e instanceof Oe)bt.warn(e.message);else{const t=tn.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});bt.warn(t.message)}}}(this.app);return(null==e?void 0:e.heartbeats)?e:{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return un(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return un(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function pn(e){return _e(JSON.stringify({version:2,heartbeats:e})).length}function vn(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}Xt(new We("platform-logger",(e=>new vt(e)),"PRIVATE")),Xt(new We("heartbeat",(e=>new fn(e)),"PRIVATE")),on(gt,yt,""),on(gt,yt,"esm2017"),on("fire-js",""),Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;const gn=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},yn=new Re("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),bn=new Ze("@firebase/auth");function En(e,...t){bn.logLevel<=Ke.ERROR&&bn.error(`Auth (${rn}): ${e}`,...t)}function wn(e,...t){throw _n(e,...t)}function kn(e,...t){return _n(e,...t)}function Nn(e,t,n){const r=Object.assign(Object.assign({},gn()),{[t]:n});return new Re("auth","Firebase",r).create(t,{appName:e.name})}function Sn(e){return Nn(e,"operation-not-supported-in-this-environment","Operations that alter the current user are not supported in conjunction with FirebaseServerApp")}function _n(e,...t){if("string"!=typeof e){const n=t[0],r=[...t.slice(1)];return r[0]&&(r[0].appName=e.name),e._errorFactory.create(n,...r)}return yn.create(e,...t)}function xn(e,t,...n){if(!e)throw _n(t,...n)}function In(e){const t="INTERNAL ASSERTION FAILED: "+e;throw En(t),new Error(t)}function Cn(e,t){e||In(t)}function Tn(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.href)||""}function Ln(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.protocol)||null}function Pn(){return!("undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===Ln()||"https:"===Ln()||function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()||"connection"in navigator))||navigator.onLine}class On{constructor(e,t){this.shortDelay=e,this.longDelay=t,Cn(t>e,"Short delay should be less than long delay!"),this.isMobile="undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(Pe())||"object"==typeof navigator&&"ReactNative"===navigator.product}get(){return Pn()?this.isMobile?this.longDelay:this.shortDelay:Math.min(5e3,this.shortDelay)}}function Rn(e,t){Cn(e.emulator,"Emulator should always be set here");const{url:n}=e.emulator;return t?`${n}${t.startsWith("/")?t.slice(1):t}`:n}class An{static initialize(e,t,n){this.fetchImpl=e,t&&(this.headersImpl=t),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:"undefined"!=typeof globalThis&&globalThis.fetch?globalThis.fetch:"undefined"!=typeof fetch?fetch:void In("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:"undefined"!=typeof globalThis&&globalThis.Headers?globalThis.Headers:"undefined"!=typeof Headers?Headers:void In("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:"undefined"!=typeof globalThis&&globalThis.Response?globalThis.Response:"undefined"!=typeof Response?Response:void In("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const Dn={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"missing-password",INVALID_LOGIN_CREDENTIALS:"invalid-credential",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",PASSWORD_DOES_NOT_MEET_REQUIREMENTS:"password-does-not-meet-requirements",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error",RECAPTCHA_NOT_ENABLED:"recaptcha-not-enabled",MISSING_RECAPTCHA_TOKEN:"missing-recaptcha-token",INVALID_RECAPTCHA_TOKEN:"invalid-recaptcha-token",INVALID_RECAPTCHA_ACTION:"invalid-recaptcha-action",MISSING_CLIENT_TYPE:"missing-client-type",MISSING_RECAPTCHA_VERSION:"missing-recaptcha-version",INVALID_RECAPTCHA_VERSION:"invalid-recaptcha-version",INVALID_REQ_TYPE:"invalid-req-type"},jn=["/v1/accounts:signInWithCustomToken","/v1/accounts:signInWithEmailLink","/v1/accounts:signInWithIdp","/v1/accounts:signInWithPassword","/v1/accounts:signInWithPhoneNumber","/v1/token"],Mn=new On(3e4,6e4);function Fn(e,t){return e.tenantId&&!t.tenantId?Object.assign(Object.assign({},t),{tenantId:e.tenantId}):t}async function Un(e,t,n,r,a={}){return zn(e,a,(async()=>{let a={},o={};r&&("GET"===t?o=r:a={body:JSON.stringify(r)});const i=Me(Object.assign({key:e.config.apiKey},o)).slice(1),s=await e._getAdditionalHeaders();s["Content-Type"]="application/json",e.languageCode&&(s["X-Firebase-Locale"]=e.languageCode);const l=Object.assign({method:t,headers:s},a);return"undefined"!=typeof navigator&&"Cloudflare-Workers"===navigator.userAgent||(l.referrerPolicy="no-referrer"),An.fetch()(await Bn(e,e.config.apiHost,n,i),l)}))}async function zn(e,t,n){e._canInitEmulator=!1;const r=Object.assign(Object.assign({},Dn),t);try{const t=new Hn(e),a=await Promise.race([n(),t.promise]);t.clearNetworkTimeout();const o=await a.json();if("needConfirmation"in o)throw $n(e,"account-exists-with-different-credential",o);if(a.ok&&!("errorMessage"in o))return o;{const t=a.ok?o.errorMessage:o.error.message,[n,i]=t.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===n)throw $n(e,"credential-already-in-use",o);if("EMAIL_EXISTS"===n)throw $n(e,"email-already-in-use",o);if("USER_DISABLED"===n)throw $n(e,"user-disabled",o);const s=r[n]||n.toLowerCase().replace(/[_\s]+/g,"-");if(i)throw Nn(e,s,i);wn(e,s)}}catch(t){if(t instanceof Oe)throw t;wn(e,"network-request-failed",{message:String(t)})}}async function Vn(e,t,n,r,a={}){const o=await Un(e,t,n,r,a);return"mfaPendingCredential"in o&&wn(e,"multi-factor-auth-required",{_serverResponse:o}),o}async function Bn(e,t,n,r){const a=`${t}${n}?${r}`,o=e,i=o.config.emulator?Rn(e.config,a):`${e.config.apiScheme}://${a}`;return jn.includes(n)&&(await o._persistenceManagerAvailable,"COOKIE"===o._getPersistenceType())?o._getPersistence()._getFinalTarget(i).toString():i}function Wn(e){switch(e){case"ENFORCE":return"ENFORCE";case"AUDIT":return"AUDIT";case"OFF":return"OFF";default:return"ENFORCEMENT_STATE_UNSPECIFIED"}}class Hn{clearNetworkTimeout(){clearTimeout(this.timer)}constructor(e){this.auth=e,this.timer=null,this.promise=new Promise(((e,t)=>{this.timer=setTimeout((()=>t(kn(this.auth,"network-request-failed"))),Mn.get())}))}}function $n(e,t,n){const r={appName:e.name};n.email&&(r.email=n.email),n.phoneNumber&&(r.phoneNumber=n.phoneNumber);const a=kn(e,t,r);return a.customData._tokenResponse=n,a}function Gn(e){return void 0!==e&&void 0!==e.enterprise}class qn{constructor(e){if(this.siteKey="",this.recaptchaEnforcementState=[],void 0===e.recaptchaKey)throw new Error("recaptchaKey undefined");this.siteKey=e.recaptchaKey.split("/")[3],this.recaptchaEnforcementState=e.recaptchaEnforcementState}getProviderEnforcementState(e){if(!this.recaptchaEnforcementState||0===this.recaptchaEnforcementState.length)return null;for(const t of this.recaptchaEnforcementState)if(t.provider&&t.provider===e)return Wn(t.enforcementState);return null}isProviderEnabled(e){return"ENFORCE"===this.getProviderEnforcementState(e)||"AUDIT"===this.getProviderEnforcementState(e)}isAnyProviderEnabled(){return this.isProviderEnabled("EMAIL_PASSWORD_PROVIDER")||this.isProviderEnabled("PHONE_PROVIDER")}}async function Kn(e,t){return Un(e,"GET","/v2/recaptchaConfig",Fn(e,t))}async function Yn(e,t){return Un(e,"POST","/v1/accounts:lookup",t)}function Qn(e){if(e)try{const t=new Date(Number(e));if(!isNaN(t.getTime()))return t.toUTCString()}catch(e){}}function Jn(e){return 1e3*Number(e)}function Xn(e){const[t,n,r]=e.split(".");if(void 0===t||void 0===n||void 0===r)return En("JWT malformed, contained fewer than 3 sections"),null;try{const e=xe(n);return e?JSON.parse(e):(En("Failed to decode base64 JWT payload"),null)}catch(e){return En("Caught error parsing JWT payload as JSON",null==e?void 0:e.toString()),null}}function Zn(e){const t=Xn(e);return xn(t,"internal-error"),xn(void 0!==t.exp,"internal-error"),xn(void 0!==t.iat,"internal-error"),Number(t.exp)-Number(t.iat)}async function er(e,t,n=!1){if(n)return t;try{return await t}catch(t){throw t instanceof Oe&&function({code:e}){return"auth/user-disabled"===e||"auth/user-token-expired"===e}(t)&&e.auth.currentUser===e&&await e.auth.signOut(),t}}class tr{constructor(e){this.user=e,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(e){var t;if(e){const e=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),e}{this.errorBackoff=3e4;const e=(null!==(t=this.user.stsTokenManager.expirationTime)&&void 0!==t?t:0)-Date.now()-3e5;return Math.max(0,e)}}schedule(e=!1){if(!this.isRunning)return;const t=this.getInterval(e);this.timerId=setTimeout((async()=>{await this.iteration()}),t)}async iteration(){try{await this.user.getIdToken(!0)}catch(e){return void("auth/network-request-failed"===(null==e?void 0:e.code)&&this.schedule(!0))}this.schedule()}}class nr{constructor(e,t){this.createdAt=e,this.lastLoginAt=t,this._initializeTime()}_initializeTime(){this.lastSignInTime=Qn(this.lastLoginAt),this.creationTime=Qn(this.createdAt)}_copy(e){this.createdAt=e.createdAt,this.lastLoginAt=e.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function rr(e){var t;const n=e.auth,r=await e.getIdToken(),a=await er(e,Yn(n,{idToken:r}));xn(null==a?void 0:a.users.length,n,"internal-error");const o=a.users[0];e._notifyReloadListener(o);const i=(null===(t=o.providerUserInfo)||void 0===t?void 0:t.length)?ar(o.providerUserInfo):[],s=(l=e.providerData,c=i,[...l.filter((e=>!c.some((t=>t.providerId===e.providerId)))),...c]);var l,c;const u=e.isAnonymous,d=!(e.email&&o.passwordHash||(null==s?void 0:s.length)),f=!!u&&d,h={uid:o.localId,displayName:o.displayName||null,photoURL:o.photoUrl||null,email:o.email||null,emailVerified:o.emailVerified||!1,phoneNumber:o.phoneNumber||null,tenantId:o.tenantId||null,providerData:s,metadata:new nr(o.createdAt,o.lastLoginAt),isAnonymous:f};Object.assign(e,h)}function ar(e){return e.map((e=>{var{providerId:t}=e,n=vn(e,["providerId"]);return{providerId:t,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}}))}class or{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(e){xn(e.idToken,"internal-error"),xn(void 0!==e.idToken,"internal-error"),xn(void 0!==e.refreshToken,"internal-error");const t="expiresIn"in e&&void 0!==e.expiresIn?Number(e.expiresIn):Zn(e.idToken);this.updateTokensAndExpiration(e.idToken,e.refreshToken,t)}updateFromIdToken(e){xn(0!==e.length,"internal-error");const t=Zn(e);this.updateTokensAndExpiration(e,null,t)}async getToken(e,t=!1){return t||!this.accessToken||this.isExpired?(xn(this.refreshToken,e,"user-token-expired"),this.refreshToken?(await this.refresh(e,this.refreshToken),this.accessToken):null):this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(e,t){const{accessToken:n,refreshToken:r,expiresIn:a}=await async function(e,t){const n=await zn(e,{},(async()=>{const n=Me({grant_type:"refresh_token",refresh_token:t}).slice(1),{tokenApiHost:r,apiKey:a}=e.config,o=await Bn(e,r,"/v1/token",`key=${a}`),i=await e._getAdditionalHeaders();return i["Content-Type"]="application/x-www-form-urlencoded",An.fetch()(o,{method:"POST",headers:i,body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(e,t);this.updateTokensAndExpiration(n,r,Number(a))}updateTokensAndExpiration(e,t,n){this.refreshToken=t||null,this.accessToken=e||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(e,t){const{refreshToken:n,accessToken:r,expirationTime:a}=t,o=new or;return n&&(xn("string"==typeof n,"internal-error",{appName:e}),o.refreshToken=n),r&&(xn("string"==typeof r,"internal-error",{appName:e}),o.accessToken=r),a&&(xn("number"==typeof a,"internal-error",{appName:e}),o.expirationTime=a),o}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(e){this.accessToken=e.accessToken,this.refreshToken=e.refreshToken,this.expirationTime=e.expirationTime}_clone(){return Object.assign(new or,this.toJSON())}_performRefresh(){return In("not implemented")}}function ir(e,t){xn("string"==typeof e||void 0===e,"internal-error",{appName:t})}class sr{constructor(e){var{uid:t,auth:n,stsTokenManager:r}=e,a=vn(e,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.proactiveRefresh=new tr(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=t,this.auth=n,this.stsTokenManager=r,this.accessToken=r.accessToken,this.displayName=a.displayName||null,this.email=a.email||null,this.emailVerified=a.emailVerified||!1,this.phoneNumber=a.phoneNumber||null,this.photoURL=a.photoURL||null,this.isAnonymous=a.isAnonymous||!1,this.tenantId=a.tenantId||null,this.providerData=a.providerData?[...a.providerData]:[],this.metadata=new nr(a.createdAt||void 0,a.lastLoginAt||void 0)}async getIdToken(e){const t=await er(this,this.stsTokenManager.getToken(this.auth,e));return xn(t,this.auth,"internal-error"),this.accessToken!==t&&(this.accessToken=t,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),t}getIdTokenResult(e){return async function(e,t=!1){const n=Be(e),r=await n.getIdToken(t),a=Xn(r);xn(a&&a.exp&&a.auth_time&&a.iat,n.auth,"internal-error");const o="object"==typeof a.firebase?a.firebase:void 0,i=null==o?void 0:o.sign_in_provider;return{claims:a,token:r,authTime:Qn(Jn(a.auth_time)),issuedAtTime:Qn(Jn(a.iat)),expirationTime:Qn(Jn(a.exp)),signInProvider:i||null,signInSecondFactor:(null==o?void 0:o.sign_in_second_factor)||null}}(this,e)}reload(){return async function(e){const t=Be(e);await rr(t),await t.auth._persistUserIfCurrent(t),t.auth._notifyListenersIfCurrent(t)}(this)}_assign(e){this!==e&&(xn(this.uid===e.uid,this.auth,"internal-error"),this.displayName=e.displayName,this.photoURL=e.photoURL,this.email=e.email,this.emailVerified=e.emailVerified,this.phoneNumber=e.phoneNumber,this.isAnonymous=e.isAnonymous,this.tenantId=e.tenantId,this.providerData=e.providerData.map((e=>Object.assign({},e))),this.metadata._copy(e.metadata),this.stsTokenManager._assign(e.stsTokenManager))}_clone(e){const t=new sr(Object.assign(Object.assign({},this),{auth:e,stsTokenManager:this.stsTokenManager._clone()}));return t.metadata._copy(this.metadata),t}_onReload(e){xn(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=e,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(e){this.reloadListener?this.reloadListener(e):this.reloadUserInfo=e}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(e,t=!1){let n=!1;e.idToken&&e.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(e),n=!0),t&&await rr(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){if(en(this.auth.app))return Promise.reject(Sn(this.auth));const e=await this.getIdToken();return await er(this,async function(e,t){return Un(e,"POST","/v1/accounts:delete",t)}(this.auth,{idToken:e})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((e=>Object.assign({},e))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(e,t){var n,r,a,o,i,s,l,c;const u=null!==(n=t.displayName)&&void 0!==n?n:void 0,d=null!==(r=t.email)&&void 0!==r?r:void 0,f=null!==(a=t.phoneNumber)&&void 0!==a?a:void 0,h=null!==(o=t.photoURL)&&void 0!==o?o:void 0,m=null!==(i=t.tenantId)&&void 0!==i?i:void 0,p=null!==(s=t._redirectEventId)&&void 0!==s?s:void 0,v=null!==(l=t.createdAt)&&void 0!==l?l:void 0,g=null!==(c=t.lastLoginAt)&&void 0!==c?c:void 0,{uid:y,emailVerified:b,isAnonymous:E,providerData:w,stsTokenManager:k}=t;xn(y&&k,e,"internal-error");const N=or.fromJSON(this.name,k);xn("string"==typeof y,e,"internal-error"),ir(u,e.name),ir(d,e.name),xn("boolean"==typeof b,e,"internal-error"),xn("boolean"==typeof E,e,"internal-error"),ir(f,e.name),ir(h,e.name),ir(m,e.name),ir(p,e.name),ir(v,e.name),ir(g,e.name);const S=new sr({uid:y,auth:e,email:d,emailVerified:b,displayName:u,isAnonymous:E,photoURL:h,phoneNumber:f,tenantId:m,stsTokenManager:N,createdAt:v,lastLoginAt:g});return w&&Array.isArray(w)&&(S.providerData=w.map((e=>Object.assign({},e)))),p&&(S._redirectEventId=p),S}static async _fromIdTokenResponse(e,t,n=!1){const r=new or;r.updateFromServerResponse(t);const a=new sr({uid:t.localId,auth:e,stsTokenManager:r,isAnonymous:n});return await rr(a),a}static async _fromGetAccountInfoResponse(e,t,n){const r=t.users[0];xn(void 0!==r.localId,"internal-error");const a=void 0!==r.providerUserInfo?ar(r.providerUserInfo):[],o=!(r.email&&r.passwordHash||(null==a?void 0:a.length)),i=new or;i.updateFromIdToken(n);const s=new sr({uid:r.localId,auth:e,stsTokenManager:i,isAnonymous:o}),l={uid:r.localId,displayName:r.displayName||null,photoURL:r.photoUrl||null,email:r.email||null,emailVerified:r.emailVerified||!1,phoneNumber:r.phoneNumber||null,tenantId:r.tenantId||null,providerData:a,metadata:new nr(r.createdAt,r.lastLoginAt),isAnonymous:!(r.email&&r.passwordHash||(null==a?void 0:a.length))};return Object.assign(s,l),s}}const lr=new Map;function cr(e){Cn(e instanceof Function,"Expected a class definition");let t=lr.get(e);return t?(Cn(t instanceof e,"Instance stored in cache mismatched with class"),t):(t=new e,lr.set(e,t),t)}class ur{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(e,t){this.storage[e]=t}async _get(e){const t=this.storage[e];return void 0===t?null:t}async _remove(e){delete this.storage[e]}_addListener(e,t){}_removeListener(e,t){}}ur.type="NONE";const dr=ur;function fr(e,t,n){return`firebase:${e}:${t}:${n}`}class hr{constructor(e,t,n){this.persistence=e,this.auth=t,this.userKey=n;const{config:r,name:a}=this.auth;this.fullUserKey=fr(this.userKey,r.apiKey,a),this.fullPersistenceKey=fr("persistence",r.apiKey,a),this.boundEventHandler=t._onStorageEvent.bind(t),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(e){return this.persistence._set(this.fullUserKey,e.toJSON())}async getCurrentUser(){const e=await this.persistence._get(this.fullUserKey);if(!e)return null;if("string"==typeof e){const t=await Yn(this.auth,{idToken:e}).catch((()=>{}));return t?sr._fromGetAccountInfoResponse(this.auth,t,e):null}return sr._fromJSON(this.auth,e)}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(e){if(this.persistence===e)return;const t=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=e,t?this.setCurrentUser(t):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(e,t,n="authUser"){if(!t.length)return new hr(cr(dr),e,n);const r=(await Promise.all(t.map((async e=>{if(await e._isAvailable())return e})))).filter((e=>e));let a=r[0]||cr(dr);const o=fr(n,e.config.apiKey,e.name);let i=null;for(const n of t)try{const t=await n._get(o);if(t){let r;if("string"==typeof t){const n=await Yn(e,{idToken:t}).catch((()=>{}));if(!n)break;r=await sr._fromGetAccountInfoResponse(e,n,t)}else r=sr._fromJSON(e,t);n!==a&&(i=r),a=n;break}}catch(e){}const s=r.filter((e=>e._shouldAllowMigration));return a._shouldAllowMigration&&s.length?(a=s[0],i&&await a._set(o,i.toJSON()),await Promise.all(t.map((async e=>{if(e!==a)try{await e._remove(o)}catch(e){}}))),new hr(a,e,n)):new hr(a,e,n)}}function mr(e){const t=e.toLowerCase();if(t.includes("opera/")||t.includes("opr/")||t.includes("opios/"))return"Opera";if(yr(t))return"IEMobile";if(t.includes("msie")||t.includes("trident/"))return"IE";if(t.includes("edge/"))return"Edge";if(pr(t))return"Firefox";if(t.includes("silk/"))return"Silk";if(Er(t))return"Blackberry";if(wr(t))return"Webos";if(vr(t))return"Safari";if((t.includes("chrome/")||gr(t))&&!t.includes("edge/"))return"Chrome";if(br(t))return"Android";{const t=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=e.match(t);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function pr(e=Pe()){return/firefox\//i.test(e)}function vr(e=Pe()){const t=e.toLowerCase();return t.includes("safari/")&&!t.includes("chrome/")&&!t.includes("crios/")&&!t.includes("android")}function gr(e=Pe()){return/crios\//i.test(e)}function yr(e=Pe()){return/iemobile/i.test(e)}function br(e=Pe()){return/android/i.test(e)}function Er(e=Pe()){return/blackberry/i.test(e)}function wr(e=Pe()){return/webos/i.test(e)}function kr(e=Pe()){return/iphone|ipad|ipod/i.test(e)||/macintosh/i.test(e)&&/mobile/i.test(e)}function Nr(e=Pe()){return kr(e)||br(e)||wr(e)||Er(e)||/windows phone/i.test(e)||yr(e)}function Sr(e,t=[]){let n;switch(e){case"Browser":n=mr(Pe());break;case"Worker":n=`${mr(Pe())}-${e}`;break;default:n=e}const r=t.length?t.join(","):"FirebaseCore-web";return`${n}/JsCore/${rn}/${r}`}class _r{constructor(e){this.auth=e,this.queue=[]}pushCallback(e,t){const n=t=>new Promise(((n,r)=>{try{n(e(t))}catch(e){r(e)}}));n.onAbort=t,this.queue.push(n);const r=this.queue.length-1;return()=>{this.queue[r]=()=>Promise.resolve()}}async runMiddleware(e){if(this.auth.currentUser===e)return;const t=[];try{for(const n of this.queue)await n(e),n.onAbort&&t.push(n.onAbort)}catch(e){t.reverse();for(const e of t)try{e()}catch(e){}throw this.auth._errorFactory.create("login-blocked",{originalMessage:null==e?void 0:e.message})}}}class xr{constructor(e){var t,n,r,a;const o=e.customStrengthOptions;this.customStrengthOptions={},this.customStrengthOptions.minPasswordLength=null!==(t=o.minPasswordLength)&&void 0!==t?t:6,o.maxPasswordLength&&(this.customStrengthOptions.maxPasswordLength=o.maxPasswordLength),void 0!==o.containsLowercaseCharacter&&(this.customStrengthOptions.containsLowercaseLetter=o.containsLowercaseCharacter),void 0!==o.containsUppercaseCharacter&&(this.customStrengthOptions.containsUppercaseLetter=o.containsUppercaseCharacter),void 0!==o.containsNumericCharacter&&(this.customStrengthOptions.containsNumericCharacter=o.containsNumericCharacter),void 0!==o.containsNonAlphanumericCharacter&&(this.customStrengthOptions.containsNonAlphanumericCharacter=o.containsNonAlphanumericCharacter),this.enforcementState=e.enforcementState,"ENFORCEMENT_STATE_UNSPECIFIED"===this.enforcementState&&(this.enforcementState="OFF"),this.allowedNonAlphanumericCharacters=null!==(r=null===(n=e.allowedNonAlphanumericCharacters)||void 0===n?void 0:n.join(""))&&void 0!==r?r:"",this.forceUpgradeOnSignin=null!==(a=e.forceUpgradeOnSignin)&&void 0!==a&&a,this.schemaVersion=e.schemaVersion}validatePassword(e){var t,n,r,a,o,i;const s={isValid:!0,passwordPolicy:this};return this.validatePasswordLengthOptions(e,s),this.validatePasswordCharacterOptions(e,s),s.isValid&&(s.isValid=null===(t=s.meetsMinPasswordLength)||void 0===t||t),s.isValid&&(s.isValid=null===(n=s.meetsMaxPasswordLength)||void 0===n||n),s.isValid&&(s.isValid=null===(r=s.containsLowercaseLetter)||void 0===r||r),s.isValid&&(s.isValid=null===(a=s.containsUppercaseLetter)||void 0===a||a),s.isValid&&(s.isValid=null===(o=s.containsNumericCharacter)||void 0===o||o),s.isValid&&(s.isValid=null===(i=s.containsNonAlphanumericCharacter)||void 0===i||i),s}validatePasswordLengthOptions(e,t){const n=this.customStrengthOptions.minPasswordLength,r=this.customStrengthOptions.maxPasswordLength;n&&(t.meetsMinPasswordLength=e.length>=n),r&&(t.meetsMaxPasswordLength=e.length<=r)}validatePasswordCharacterOptions(e,t){let n;this.updatePasswordCharacterOptionsStatuses(t,!1,!1,!1,!1);for(let r=0;r<e.length;r++)n=e.charAt(r),this.updatePasswordCharacterOptionsStatuses(t,n>="a"&&n<="z",n>="A"&&n<="Z",n>="0"&&n<="9",this.allowedNonAlphanumericCharacters.includes(n))}updatePasswordCharacterOptionsStatuses(e,t,n,r,a){this.customStrengthOptions.containsLowercaseLetter&&(e.containsLowercaseLetter||(e.containsLowercaseLetter=t)),this.customStrengthOptions.containsUppercaseLetter&&(e.containsUppercaseLetter||(e.containsUppercaseLetter=n)),this.customStrengthOptions.containsNumericCharacter&&(e.containsNumericCharacter||(e.containsNumericCharacter=r)),this.customStrengthOptions.containsNonAlphanumericCharacter&&(e.containsNonAlphanumericCharacter||(e.containsNonAlphanumericCharacter=a))}}class Ir{constructor(e,t,n,r){this.app=e,this.heartbeatServiceProvider=t,this.appCheckServiceProvider=n,this.config=r,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new Tr(this),this.idTokenSubscription=new Tr(this),this.beforeStateQueue=new _r(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION=1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=yn,this._agentRecaptchaConfig=null,this._tenantRecaptchaConfigs={},this._projectPasswordPolicy=null,this._tenantPasswordPolicies={},this._resolvePersistenceManagerAvailable=void 0,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=e.name,this.clientVersion=r.sdkClientVersion,this._persistenceManagerAvailable=new Promise((e=>this._resolvePersistenceManagerAvailable=e))}_initializeWithPersistence(e,t){return t&&(this._popupRedirectResolver=cr(t)),this._initializationPromise=this.queue((async()=>{var n,r,a;if(!this._deleted&&(this.persistenceManager=await hr.create(this,e),null===(n=this._resolvePersistenceManagerAvailable)||void 0===n||n.call(this),!this._deleted)){if(null===(r=this._popupRedirectResolver)||void 0===r?void 0:r._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(e){}await this.initializeCurrentUser(t),this.lastNotifiedUid=(null===(a=this.currentUser)||void 0===a?void 0:a.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const e=await this.assertedPersistence.getCurrentUser();return this.currentUser||e?this.currentUser&&e&&this.currentUser.uid===e.uid?(this._currentUser._assign(e),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(e,!0):void 0}async initializeCurrentUserFromIdToken(e){try{const t=await Yn(this,{idToken:e}),n=await sr._fromGetAccountInfoResponse(this,t,e);await this.directlySetCurrentUser(n)}catch(e){console.warn("FirebaseServerApp could not login user with provided authIdToken: ",e),await this.directlySetCurrentUser(null)}}async initializeCurrentUser(e){var t;if(en(this.app)){const e=this.app.settings.authIdToken;return e?new Promise((t=>{setTimeout((()=>this.initializeCurrentUserFromIdToken(e).then(t,t)))})):this.directlySetCurrentUser(null)}const n=await this.assertedPersistence.getCurrentUser();let r=n,a=!1;if(e&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const n=null===(t=this.redirectUser)||void 0===t?void 0:t._redirectEventId,o=null==r?void 0:r._redirectEventId,i=await this.tryRedirectSignIn(e);n&&n!==o||!(null==i?void 0:i.user)||(r=i.user,a=!0)}if(!r)return this.directlySetCurrentUser(null);if(!r._redirectEventId){if(a)try{await this.beforeStateQueue.runMiddleware(r)}catch(e){r=n,this._popupRedirectResolver._overrideRedirectResult(this,(()=>Promise.reject(e)))}return r?this.reloadAndSetCurrentUserOrClear(r):this.directlySetCurrentUser(null)}return xn(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===r._redirectEventId?this.directlySetCurrentUser(r):this.reloadAndSetCurrentUserOrClear(r)}async tryRedirectSignIn(e){let t=null;try{t=await this._popupRedirectResolver._completeRedirectFn(this,e,!0)}catch(e){await this._setRedirectUser(null)}return t}async reloadAndSetCurrentUserOrClear(e){try{await rr(e)}catch(e){if("auth/network-request-failed"!==(null==e?void 0:e.code))return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(e)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const e=navigator;return e.languages&&e.languages[0]||e.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(e){if(en(this.app))return Promise.reject(Sn(this));const t=e?Be(e):null;return t&&xn(t.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(t&&t._clone(this))}async _updateCurrentUser(e,t=!1){if(!this._deleted)return e&&xn(this.tenantId===e.tenantId,this,"tenant-id-mismatch"),t||await this.beforeStateQueue.runMiddleware(e),this.queue((async()=>{await this.directlySetCurrentUser(e),this.notifyAuthListeners()}))}async signOut(){return en(this.app)?Promise.reject(Sn(this)):(await this.beforeStateQueue.runMiddleware(null),(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null,!0))}setPersistence(e){return en(this.app)?Promise.reject(Sn(this)):this.queue((async()=>{await this.assertedPersistence.setPersistence(cr(e))}))}_getRecaptchaConfig(){return null==this.tenantId?this._agentRecaptchaConfig:this._tenantRecaptchaConfigs[this.tenantId]}async validatePassword(e){this._getPasswordPolicyInternal()||await this._updatePasswordPolicy();const t=this._getPasswordPolicyInternal();return t.schemaVersion!==this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION?Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version",{})):t.validatePassword(e)}_getPasswordPolicyInternal(){return null===this.tenantId?this._projectPasswordPolicy:this._tenantPasswordPolicies[this.tenantId]}async _updatePasswordPolicy(){const e=await async function(e,t={}){return Un(e,"GET","/v2/passwordPolicy",Fn(e,t))}(this),t=new xr(e);null===this.tenantId?this._projectPasswordPolicy=t:this._tenantPasswordPolicies[this.tenantId]=t}_getPersistenceType(){return this.assertedPersistence.persistence.type}_getPersistence(){return this.assertedPersistence.persistence}_updateErrorMap(e){this._errorFactory=new Re("auth","Firebase",e())}onAuthStateChanged(e,t,n){return this.registerStateListener(this.authStateSubscription,e,t,n)}beforeAuthStateChanged(e,t){return this.beforeStateQueue.pushCallback(e,t)}onIdTokenChanged(e,t,n){return this.registerStateListener(this.idTokenSubscription,e,t,n)}authStateReady(){return new Promise(((e,t)=>{if(this.currentUser)e();else{const n=this.onAuthStateChanged((()=>{n(),e()}),t)}}))}async revokeAccessToken(e){if(this.currentUser){const t={providerId:"apple.com",tokenType:"ACCESS_TOKEN",token:e,idToken:await this.currentUser.getIdToken()};null!=this.tenantId&&(t.tenantId=this.tenantId),await async function(e,t){return Un(e,"POST","/v2/accounts:revokeToken",Fn(e,t))}(this,t)}}toJSON(){var e;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(e=this._currentUser)||void 0===e?void 0:e.toJSON()}}async _setRedirectUser(e,t){const n=await this.getOrInitRedirectPersistenceManager(t);return null===e?n.removeCurrentUser():n.setCurrentUser(e)}async getOrInitRedirectPersistenceManager(e){if(!this.redirectPersistenceManager){const t=e&&cr(e)||this._popupRedirectResolver;xn(t,this,"argument-error"),this.redirectPersistenceManager=await hr.create(this,[cr(t._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(e){var t,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(t=this._currentUser)||void 0===t?void 0:t._redirectEventId)===e?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===e?this.redirectUser:null}async _persistUserIfCurrent(e){if(e===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(e)))}_notifyListenersIfCurrent(e){e===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var e,t;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(t=null===(e=this.currentUser)||void 0===e?void 0:e.uid)&&void 0!==t?t:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(e,t,n,r){if(this._deleted)return()=>{};const a="function"==typeof t?t:t.next.bind(t);let o=!1;const i=this._isInitialized?Promise.resolve():this._initializationPromise;if(xn(i,this,"internal-error"),i.then((()=>{o||a(this.currentUser)})),"function"==typeof t){const a=e.addObserver(t,n,r);return()=>{o=!0,a()}}{const n=e.addObserver(t);return()=>{o=!0,n()}}}async directlySetCurrentUser(e){this.currentUser&&this.currentUser!==e&&this._currentUser._stopProactiveRefresh(),e&&this.isProactiveRefreshEnabled&&e._startProactiveRefresh(),this.currentUser=e,e?await this.assertedPersistence.setCurrentUser(e):await this.assertedPersistence.removeCurrentUser()}queue(e){return this.operations=this.operations.then(e,e),this.operations}get assertedPersistence(){return xn(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(e){e&&!this.frameworks.includes(e)&&(this.frameworks.push(e),this.frameworks.sort(),this.clientVersion=Sr(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){var e;const t={"X-Client-Version":this.clientVersion};this.app.options.appId&&(t["X-Firebase-gmpid"]=this.app.options.appId);const n=await(null===(e=this.heartbeatServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getHeartbeatsHeader());n&&(t["X-Firebase-Client"]=n);const r=await this._getAppCheckToken();return r&&(t["X-Firebase-AppCheck"]=r),t}async _getAppCheckToken(){var e;if(en(this.app)&&this.app.settings.appCheckToken)return this.app.settings.appCheckToken;const t=await(null===(e=this.appCheckServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getToken());return(null==t?void 0:t.error)&&function(e,...t){bn.logLevel<=Ke.WARN&&bn.warn(`Auth (${rn}): ${e}`,...t)}(`Error while retrieving App Check token: ${t.error}`),null==t?void 0:t.token}}function Cr(e){return Be(e)}class Tr{constructor(e){this.auth=e,this.observer=null,this.addObserver=function(e){const t=new ze(e,void 0);return t.subscribe.bind(t)}((e=>this.observer=e))}get next(){return xn(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}let Lr={async loadJS(){throw new Error("Unable to load external scripts")},recaptchaV2Script:"",recaptchaEnterpriseScript:"",gapiScript:""};function Pr(e){return Lr.loadJS(e)}function Or(e){return`__${e}${Math.floor(1e6*Math.random())}`}class Rr{constructor(){this.enterprise=new Ar}ready(e){e()}execute(e,t){return Promise.resolve("token")}render(e,t){return""}}class Ar{ready(e){e()}execute(e,t){return Promise.resolve("token")}render(e,t){return""}}const Dr="NO_RECAPTCHA";class jr{constructor(e){this.type="recaptcha-enterprise",this.auth=Cr(e)}async verify(e="verify",t=!1){function n(t,n,r){const a=window.grecaptcha;Gn(a)?a.enterprise.ready((()=>{a.enterprise.execute(t,{action:e}).then((e=>{n(e)})).catch((()=>{n(Dr)}))})):r(Error("No reCAPTCHA enterprise script loaded."))}return this.auth.settings.appVerificationDisabledForTesting?(new Rr).execute("siteKey",{action:"verify"}):new Promise(((e,r)=>{(async function(e){if(!t){if(null==e.tenantId&&null!=e._agentRecaptchaConfig)return e._agentRecaptchaConfig.siteKey;if(null!=e.tenantId&&void 0!==e._tenantRecaptchaConfigs[e.tenantId])return e._tenantRecaptchaConfigs[e.tenantId].siteKey}return new Promise((async(t,n)=>{Kn(e,{clientType:"CLIENT_TYPE_WEB",version:"RECAPTCHA_ENTERPRISE"}).then((r=>{if(void 0!==r.recaptchaKey){const n=new qn(r);return null==e.tenantId?e._agentRecaptchaConfig=n:e._tenantRecaptchaConfigs[e.tenantId]=n,t(n.siteKey)}n(new Error("recaptcha Enterprise site key undefined"))})).catch((e=>{n(e)}))}))})(this.auth).then((a=>{if(!t&&Gn(window.grecaptcha))n(a,e,r);else{if("undefined"==typeof window)return void r(new Error("RecaptchaVerifier is only supported in browser"));let t=Lr.recaptchaEnterpriseScript;0!==t.length&&(t+=a),Pr(t).then((()=>{n(a,e,r)})).catch((e=>{r(e)}))}})).catch((e=>{r(e)}))}))}}async function Mr(e,t,n,r=!1,a=!1){const o=new jr(e);let i;if(a)i=Dr;else try{i=await o.verify(n)}catch(e){i=await o.verify(n,!0)}const s=Object.assign({},t);if("mfaSmsEnrollment"===n||"mfaSmsSignIn"===n){if("phoneEnrollmentInfo"in s){const e=s.phoneEnrollmentInfo.phoneNumber,t=s.phoneEnrollmentInfo.recaptchaToken;Object.assign(s,{phoneEnrollmentInfo:{phoneNumber:e,recaptchaToken:t,captchaResponse:i,clientType:"CLIENT_TYPE_WEB",recaptchaVersion:"RECAPTCHA_ENTERPRISE"}})}else if("phoneSignInInfo"in s){const e=s.phoneSignInInfo.recaptchaToken;Object.assign(s,{phoneSignInInfo:{recaptchaToken:e,captchaResponse:i,clientType:"CLIENT_TYPE_WEB",recaptchaVersion:"RECAPTCHA_ENTERPRISE"}})}return s}return r?Object.assign(s,{captchaResp:i}):Object.assign(s,{captchaResponse:i}),Object.assign(s,{clientType:"CLIENT_TYPE_WEB"}),Object.assign(s,{recaptchaVersion:"RECAPTCHA_ENTERPRISE"}),s}async function Fr(e,t,n,r,a){var o,i;if("EMAIL_PASSWORD_PROVIDER"===a){if(null===(o=e._getRecaptchaConfig())||void 0===o?void 0:o.isProviderEnabled("EMAIL_PASSWORD_PROVIDER")){const a=await Mr(e,t,n,"getOobCode"===n);return r(e,a)}return r(e,t).catch((async a=>{if("auth/missing-recaptcha-token"===a.code){console.log(`${n} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);const a=await Mr(e,t,n,"getOobCode"===n);return r(e,a)}return Promise.reject(a)}))}if("PHONE_PROVIDER"===a){if(null===(i=e._getRecaptchaConfig())||void 0===i?void 0:i.isProviderEnabled("PHONE_PROVIDER")){const a=await Mr(e,t,n);return r(e,a).catch((async a=>{var o;if("AUDIT"===(null===(o=e._getRecaptchaConfig())||void 0===o?void 0:o.getProviderEnforcementState("PHONE_PROVIDER"))&&("auth/missing-recaptcha-token"===a.code||"auth/invalid-app-credential"===a.code)){console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${n} flow.`);const a=await Mr(e,t,n,!1,!0);return r(e,a)}return Promise.reject(a)}))}{const a=await Mr(e,t,n,!1,!0);return r(e,a)}}return Promise.reject(a+" provider is not supported.")}function Ur(e){const t=e.indexOf(":");return t<0?"":e.substr(0,t+1)}function zr(e){if(!e)return null;const t=Number(e);return isNaN(t)?null:t}class Vr{constructor(e,t){this.providerId=e,this.signInMethod=t}toJSON(){return In("not implemented")}_getIdTokenResponse(e){return In("not implemented")}_linkToIdToken(e,t){return In("not implemented")}_getReauthenticationResolver(e){return In("not implemented")}}async function Br(e,t){return Un(e,"POST","/v1/accounts:signUp",t)}async function Wr(e,t){return Vn(e,"POST","/v1/accounts:signInWithPassword",Fn(e,t))}class Hr extends Vr{constructor(e,t,n,r=null){super("password",n),this._email=e,this._password=t,this._tenantId=r}static _fromEmailAndPassword(e,t){return new Hr(e,t,"password")}static _fromEmailAndCode(e,t,n=null){return new Hr(e,t,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e;if((null==t?void 0:t.email)&&(null==t?void 0:t.password)){if("password"===t.signInMethod)return this._fromEmailAndPassword(t.email,t.password);if("emailLink"===t.signInMethod)return this._fromEmailAndCode(t.email,t.password,t.tenantId)}return null}async _getIdTokenResponse(e){switch(this.signInMethod){case"password":return Fr(e,{returnSecureToken:!0,email:this._email,password:this._password,clientType:"CLIENT_TYPE_WEB"},"signInWithPassword",Wr,"EMAIL_PASSWORD_PROVIDER");case"emailLink":return async function(e,t){return Vn(e,"POST","/v1/accounts:signInWithEmailLink",Fn(e,t))}(e,{email:this._email,oobCode:this._password});default:wn(e,"internal-error")}}async _linkToIdToken(e,t){switch(this.signInMethod){case"password":return Fr(e,{idToken:t,returnSecureToken:!0,email:this._email,password:this._password,clientType:"CLIENT_TYPE_WEB"},"signUpPassword",Br,"EMAIL_PASSWORD_PROVIDER");case"emailLink":return async function(e,t){return Vn(e,"POST","/v1/accounts:signInWithEmailLink",Fn(e,t))}(e,{idToken:t,email:this._email,oobCode:this._password});default:wn(e,"internal-error")}}_getReauthenticationResolver(e){return this._getIdTokenResponse(e)}}async function $r(e,t){return Vn(e,"POST","/v1/accounts:signInWithIdp",Fn(e,t))}class Gr extends Vr{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(e){const t=new Gr(e.providerId,e.signInMethod);return e.idToken||e.accessToken?(e.idToken&&(t.idToken=e.idToken),e.accessToken&&(t.accessToken=e.accessToken),e.nonce&&!e.pendingToken&&(t.nonce=e.nonce),e.pendingToken&&(t.pendingToken=e.pendingToken)):e.oauthToken&&e.oauthTokenSecret?(t.accessToken=e.oauthToken,t.secret=e.oauthTokenSecret):wn("argument-error"),t}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e,{providerId:n,signInMethod:r}=t,a=vn(t,["providerId","signInMethod"]);if(!n||!r)return null;const o=new Gr(n,r);return o.idToken=a.idToken||void 0,o.accessToken=a.accessToken||void 0,o.secret=a.secret,o.nonce=a.nonce,o.pendingToken=a.pendingToken||null,o}_getIdTokenResponse(e){return $r(e,this.buildRequest())}_linkToIdToken(e,t){const n=this.buildRequest();return n.idToken=t,$r(e,n)}_getReauthenticationResolver(e){const t=this.buildRequest();return t.autoCreate=!1,$r(e,t)}buildRequest(){const e={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)e.pendingToken=this.pendingToken;else{const t={};this.idToken&&(t.id_token=this.idToken),this.accessToken&&(t.access_token=this.accessToken),this.secret&&(t.oauth_token_secret=this.secret),t.providerId=this.providerId,this.nonce&&!this.pendingToken&&(t.nonce=this.nonce),e.postBody=Me(t)}return e}}async function qr(e,t){return Un(e,"POST","/v1/accounts:sendVerificationCode",Fn(e,t))}const Kr={USER_NOT_FOUND:"user-not-found"};class Yr extends Vr{constructor(e){super("phone","phone"),this.params=e}static _fromVerification(e,t){return new Yr({verificationId:e,verificationCode:t})}static _fromTokenResponse(e,t){return new Yr({phoneNumber:e,temporaryProof:t})}_getIdTokenResponse(e){return async function(e,t){return Vn(e,"POST","/v1/accounts:signInWithPhoneNumber",Fn(e,t))}(e,this._makeVerificationRequest())}_linkToIdToken(e,t){return async function(e,t){const n=await Vn(e,"POST","/v1/accounts:signInWithPhoneNumber",Fn(e,t));if(n.temporaryProof)throw $n(e,"account-exists-with-different-credential",n);return n}(e,Object.assign({idToken:t},this._makeVerificationRequest()))}_getReauthenticationResolver(e){return async function(e,t){return Vn(e,"POST","/v1/accounts:signInWithPhoneNumber",Fn(e,Object.assign(Object.assign({},t),{operation:"REAUTH"})),Kr)}(e,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:e,phoneNumber:t,verificationId:n,verificationCode:r}=this.params;return e&&t?{temporaryProof:e,phoneNumber:t}:{sessionInfo:n,code:r}}toJSON(){const e={providerId:this.providerId};return this.params.phoneNumber&&(e.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(e.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(e.verificationCode=this.params.verificationCode),this.params.verificationId&&(e.verificationId=this.params.verificationId),e}static fromJSON(e){"string"==typeof e&&(e=JSON.parse(e));const{verificationId:t,verificationCode:n,phoneNumber:r,temporaryProof:a}=e;return n||t||r||a?new Yr({verificationId:t,verificationCode:n,phoneNumber:r,temporaryProof:a}):null}}class Qr{constructor(e){var t,n,r,a,o,i;const s=Fe(Ue(e)),l=null!==(t=s.apiKey)&&void 0!==t?t:null,c=null!==(n=s.oobCode)&&void 0!==n?n:null,u=function(e){switch(e){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(r=s.mode)&&void 0!==r?r:null);xn(l&&c&&u,"argument-error"),this.apiKey=l,this.operation=u,this.code=c,this.continueUrl=null!==(a=s.continueUrl)&&void 0!==a?a:null,this.languageCode=null!==(o=s.lang)&&void 0!==o?o:null,this.tenantId=null!==(i=s.tenantId)&&void 0!==i?i:null}static parseLink(e){const t=function(e){const t=Fe(Ue(e)).link,n=t?Fe(Ue(t)).deep_link_id:null,r=Fe(Ue(e)).deep_link_id;return(r?Fe(Ue(r)).link:null)||r||n||t||e}(e);try{return new Qr(t)}catch(e){return null}}}class Jr{constructor(){this.providerId=Jr.PROVIDER_ID}static credential(e,t){return Hr._fromEmailAndPassword(e,t)}static credentialWithLink(e,t){const n=Qr.parseLink(t);return xn(n,"argument-error"),Hr._fromEmailAndCode(e,n.code,n.tenantId)}}Jr.PROVIDER_ID="password",Jr.EMAIL_PASSWORD_SIGN_IN_METHOD="password",Jr.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class Xr{constructor(e){this.providerId=e,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(e){this.defaultLanguageCode=e}setCustomParameters(e){return this.customParameters=e,this}getCustomParameters(){return this.customParameters}}class Zr extends Xr{constructor(){super(...arguments),this.scopes=[]}addScope(e){return this.scopes.includes(e)||this.scopes.push(e),this}getScopes(){return[...this.scopes]}}class ea extends Zr{constructor(){super("facebook.com")}static credential(e){return Gr._fromParams({providerId:ea.PROVIDER_ID,signInMethod:ea.FACEBOOK_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return ea.credentialFromTaggedObject(e)}static credentialFromError(e){return ea.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return ea.credential(e.oauthAccessToken)}catch(e){return null}}}ea.FACEBOOK_SIGN_IN_METHOD="facebook.com",ea.PROVIDER_ID="facebook.com";class ta extends Zr{constructor(){super("google.com"),this.addScope("profile")}static credential(e,t){return Gr._fromParams({providerId:ta.PROVIDER_ID,signInMethod:ta.GOOGLE_SIGN_IN_METHOD,idToken:e,accessToken:t})}static credentialFromResult(e){return ta.credentialFromTaggedObject(e)}static credentialFromError(e){return ta.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthIdToken:t,oauthAccessToken:n}=e;if(!t&&!n)return null;try{return ta.credential(t,n)}catch(e){return null}}}ta.GOOGLE_SIGN_IN_METHOD="google.com",ta.PROVIDER_ID="google.com";class na extends Zr{constructor(){super("github.com")}static credential(e){return Gr._fromParams({providerId:na.PROVIDER_ID,signInMethod:na.GITHUB_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return na.credentialFromTaggedObject(e)}static credentialFromError(e){return na.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return na.credential(e.oauthAccessToken)}catch(e){return null}}}na.GITHUB_SIGN_IN_METHOD="github.com",na.PROVIDER_ID="github.com";class ra extends Zr{constructor(){super("twitter.com")}static credential(e,t){return Gr._fromParams({providerId:ra.PROVIDER_ID,signInMethod:ra.TWITTER_SIGN_IN_METHOD,oauthToken:e,oauthTokenSecret:t})}static credentialFromResult(e){return ra.credentialFromTaggedObject(e)}static credentialFromError(e){return ra.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthAccessToken:t,oauthTokenSecret:n}=e;if(!t||!n)return null;try{return ra.credential(t,n)}catch(e){return null}}}async function aa(e,t){return Vn(e,"POST","/v1/accounts:signUp",Fn(e,t))}ra.TWITTER_SIGN_IN_METHOD="twitter.com",ra.PROVIDER_ID="twitter.com";class oa{constructor(e){this.user=e.user,this.providerId=e.providerId,this._tokenResponse=e._tokenResponse,this.operationType=e.operationType}static async _fromIdTokenResponse(e,t,n,r=!1){const a=await sr._fromIdTokenResponse(e,n,r),o=ia(n);return new oa({user:a,providerId:o,_tokenResponse:n,operationType:t})}static async _forOperation(e,t,n){await e._updateTokensIfNecessary(n,!0);const r=ia(n);return new oa({user:e,providerId:r,_tokenResponse:n,operationType:t})}}function ia(e){return e.providerId?e.providerId:"phoneNumber"in e?"phone":null}class sa extends Oe{constructor(e,t,n,r){var a;super(t.code,t.message),this.operationType=n,this.user=r,Object.setPrototypeOf(this,sa.prototype),this.customData={appName:e.name,tenantId:null!==(a=e.tenantId)&&void 0!==a?a:void 0,_serverResponse:t.customData._serverResponse,operationType:n}}static _fromErrorAndOperation(e,t,n,r){return new sa(e,t,n,r)}}function la(e,t,n,r){return("reauthenticate"===t?n._getReauthenticationResolver(e):n._getIdTokenResponse(e)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw sa._fromErrorAndOperation(e,n,t,r);throw n}))}async function ca(e,t,n=!1){if(en(e.app))return Promise.reject(Sn(e));const r="signIn",a=await la(e,r,t),o=await oa._fromIdTokenResponse(e,r,a);return n||await e._updateCurrentUser(o.user),o}async function ua(e){const t=Cr(e);t._getPasswordPolicyInternal()&&await t._updatePasswordPolicy()}async function da(e,t,n){if(en(e.app))return Promise.reject(Sn(e));const r=Cr(e),a=Fr(r,{returnSecureToken:!0,email:t,password:n,clientType:"CLIENT_TYPE_WEB"},"signUpPassword",aa,"EMAIL_PASSWORD_PROVIDER"),o=await a.catch((t=>{throw"auth/password-does-not-meet-requirements"===t.code&&ua(e),t})),i=await oa._fromIdTokenResponse(r,"signIn",o);return await r._updateCurrentUser(i.user),i}function fa(e,t,n){return en(e.app)?Promise.reject(Sn(e)):async function(e,t){return ca(Cr(e),t)}(Be(e),Jr.credential(t,n)).catch((async t=>{throw"auth/password-does-not-meet-requirements"===t.code&&ua(e),t}))}async function ha(e,{displayName:t,photoURL:n}){if(void 0===t&&void 0===n)return;const r=Be(e),a={idToken:await r.getIdToken(),displayName:t,photoUrl:n,returnSecureToken:!0},o=await er(r,async function(e,t){return Un(e,"POST","/v1/accounts:update",t)}(r.auth,a));r.displayName=o.displayName||null,r.photoURL=o.photoUrl||null;const i=r.providerData.find((({providerId:e})=>"password"===e));i&&(i.displayName=r.displayName,i.photoURL=r.photoURL),await r._updateTokensIfNecessary(o)}function ma(e,t,n,r){return Be(e).onAuthStateChanged(t,n,r)}function pa(e){return Be(e).signOut()}function va(e,t){return Un(e,"POST","/v2/accounts/mfaEnrollment:start",Fn(e,t))}new WeakMap;const ga="__sak";class ya{constructor(e,t){this.storageRetriever=e,this.type=t}_isAvailable(){try{return this.storage?(this.storage.setItem(ga,"1"),this.storage.removeItem(ga),Promise.resolve(!0)):Promise.resolve(!1)}catch(e){return Promise.resolve(!1)}}_set(e,t){return this.storage.setItem(e,JSON.stringify(t)),Promise.resolve()}_get(e){const t=this.storage.getItem(e);return Promise.resolve(t?JSON.parse(t):null)}_remove(e){return this.storage.removeItem(e),Promise.resolve()}get storage(){return this.storageRetriever()}}class ba extends ya{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(e,t)=>this.onStorageEvent(e,t),this.listeners={},this.localCache={},this.pollTimer=null,this.fallbackToPolling=Nr(),this._shouldAllowMigration=!0}forAllChangedKeys(e){for(const t of Object.keys(this.listeners)){const n=this.storage.getItem(t),r=this.localCache[t];n!==r&&e(t,r,n)}}onStorageEvent(e,t=!1){if(!e.key)return void this.forAllChangedKeys(((e,t,n)=>{this.notifyListeners(e,n)}));const n=e.key;t?this.detachListener():this.stopPolling();const r=()=>{const e=this.storage.getItem(n);(t||this.localCache[n]!==e)&&this.notifyListeners(n,e)},a=this.storage.getItem(n);!function(){const e=Pe();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}()||10!==document.documentMode||a===e.newValue||e.newValue===e.oldValue?r():setTimeout(r,10)}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t?JSON.parse(t):t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((e,t,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:e,oldValue:t,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(e,t){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[e]||(this.listeners[e]=new Set,this.localCache[e]=this.storage.getItem(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(e,t){await super._set(e,t),this.localCache[e]=JSON.stringify(t)}async _get(e){const t=await super._get(e);return this.localCache[e]=JSON.stringify(t),t}async _remove(e){await super._remove(e),delete this.localCache[e]}}ba.type="LOCAL";const Ea=ba;class wa extends ya{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(e,t){}_removeListener(e,t){}}wa.type="SESSION";const ka=wa;class Na{constructor(e){this.eventTarget=e,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(e){const t=this.receivers.find((t=>t.isListeningto(e)));if(t)return t;const n=new Na(e);return this.receivers.push(n),n}isListeningto(e){return this.eventTarget===e}async handleEvent(e){const t=e,{eventId:n,eventType:r,data:a}=t.data,o=this.handlersMap[r];if(!(null==o?void 0:o.size))return;t.ports[0].postMessage({status:"ack",eventId:n,eventType:r});const i=Array.from(o).map((async e=>e(t.origin,a))),s=await function(e){return Promise.all(e.map((async e=>{try{return{fulfilled:!0,value:await e}}catch(e){return{fulfilled:!1,reason:e}}})))}(i);t.ports[0].postMessage({status:"done",eventId:n,eventType:r,response:s})}_subscribe(e,t){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[e]||(this.handlersMap[e]=new Set),this.handlersMap[e].add(t)}_unsubscribe(e,t){this.handlersMap[e]&&t&&this.handlersMap[e].delete(t),t&&0!==this.handlersMap[e].size||delete this.handlersMap[e],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Sa(e="",t=10){let n="";for(let e=0;e<t;e++)n+=Math.floor(10*Math.random());return e+n}Na.receivers=[];class _a{constructor(e){this.target=e,this.handlers=new Set}removeMessageHandler(e){e.messageChannel&&(e.messageChannel.port1.removeEventListener("message",e.onMessage),e.messageChannel.port1.close()),this.handlers.delete(e)}async _send(e,t,n=50){const r="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!r)throw new Error("connection_unavailable");let a,o;return new Promise(((i,s)=>{const l=Sa("",20);r.port1.start();const c=setTimeout((()=>{s(new Error("unsupported_event"))}),n);o={messageChannel:r,onMessage(e){const t=e;if(t.data.eventId===l)switch(t.data.status){case"ack":clearTimeout(c),a=setTimeout((()=>{s(new Error("timeout"))}),3e3);break;case"done":clearTimeout(a),i(t.data.response);break;default:clearTimeout(c),clearTimeout(a),s(new Error("invalid_response"))}}},this.handlers.add(o),r.port1.addEventListener("message",o.onMessage),this.target.postMessage({eventType:e,eventId:l,data:t},[r.port2])})).finally((()=>{o&&this.removeMessageHandler(o)}))}}function xa(){return window}function Ia(){return void 0!==xa().WorkerGlobalScope&&"function"==typeof xa().importScripts}const Ca="firebaseLocalStorageDb",Ta="firebaseLocalStorage",La="fbase_key";class Pa{constructor(e){this.request=e}toPromise(){return new Promise(((e,t)=>{this.request.addEventListener("success",(()=>{e(this.request.result)})),this.request.addEventListener("error",(()=>{t(this.request.error)}))}))}}function Oa(e,t){return e.transaction([Ta],t?"readwrite":"readonly").objectStore(Ta)}function Ra(){const e=indexedDB.open(Ca,1);return new Promise(((t,n)=>{e.addEventListener("error",(()=>{n(e.error)})),e.addEventListener("upgradeneeded",(()=>{const t=e.result;try{t.createObjectStore(Ta,{keyPath:La})}catch(e){n(e)}})),e.addEventListener("success",(async()=>{const n=e.result;n.objectStoreNames.contains(Ta)?t(n):(n.close(),await function(){const e=indexedDB.deleteDatabase(Ca);return new Pa(e).toPromise()}(),t(await Ra()))}))}))}async function Aa(e,t,n){const r=Oa(e,!0).put({[La]:t,value:n});return new Pa(r).toPromise()}function Da(e,t){const n=Oa(e,!0).delete(t);return new Pa(n).toPromise()}class ja{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await Ra()),this.db}async _withRetries(e){let t=0;for(;;)try{const t=await this._openDb();return await e(t)}catch(e){if(t++>3)throw e;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return Ia()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Na._getInstance(Ia()?self:null),this.receiver._subscribe("keyChanged",(async(e,t)=>({keyProcessed:(await this._poll()).includes(t.key)}))),this.receiver._subscribe("ping",(async(e,t)=>["keyChanged"]))}async initializeSender(){var e,t;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(e){return null}}(),!this.activeServiceWorker)return;this.sender=new _a(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(e=n[0])||void 0===e?void 0:e.fulfilled)&&(null===(t=n[0])||void 0===t?void 0:t.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(e){var t;if(this.sender&&this.activeServiceWorker&&((null===(t=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===t?void 0:t.controller)||null)===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:e},this.serviceWorkerReceiverAvailable?800:50)}catch(t){}}async _isAvailable(){try{if(!indexedDB)return!1;const e=await Ra();return await Aa(e,ga,"1"),await Da(e,ga),!0}catch(e){}return!1}async _withPendingWrite(e){this.pendingWrites++;try{await e()}finally{this.pendingWrites--}}async _set(e,t){return this._withPendingWrite((async()=>(await this._withRetries((n=>Aa(n,e,t))),this.localCache[e]=t,this.notifyServiceWorker(e))))}async _get(e){const t=await this._withRetries((t=>async function(e,t){const n=Oa(e,!1).get(t),r=await new Pa(n).toPromise();return void 0===r?null:r.value}(t,e)));return this.localCache[e]=t,t}async _remove(e){return this._withPendingWrite((async()=>(await this._withRetries((t=>Da(t,e))),delete this.localCache[e],this.notifyServiceWorker(e))))}async _poll(){const e=await this._withRetries((e=>{const t=Oa(e,!1).getAll();return new Pa(t).toPromise()}));if(!e)return[];if(0!==this.pendingWrites)return[];const t=[],n=new Set;if(0!==e.length)for(const{fbase_key:r,value:a}of e)n.add(r),JSON.stringify(this.localCache[r])!==JSON.stringify(a)&&(this.notifyListeners(r,a),t.push(r));for(const e of Object.keys(this.localCache))this.localCache[e]&&!n.has(e)&&(this.notifyListeners(e,null),t.push(e));return t}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(e,t){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[e]||(this.listeners[e]=new Set,this._get(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&this.stopPolling()}}ja.type="LOCAL";const Ma=ja;function Fa(e,t){return Un(e,"POST","/v2/accounts/mfaSignIn:start",Fn(e,t))}Or("rcb"),new On(3e4,6e4);const Ua="recaptcha";async function za(e,t,n){var r;if(!e._getRecaptchaConfig())try{await async function(e){const t=Cr(e),n=await Kn(t,{clientType:"CLIENT_TYPE_WEB",version:"RECAPTCHA_ENTERPRISE"}),r=new qn(n);null==t.tenantId?t._agentRecaptchaConfig=r:t._tenantRecaptchaConfigs[t.tenantId]=r,r.isAnyProviderEnabled()&&new jr(t).verify()}(e)}catch(e){console.log("Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.")}try{let a;if(a="string"==typeof t?{phoneNumber:t}:t,"session"in a){const t=a.session;if("phoneNumber"in a){xn("enroll"===t.type,e,"internal-error");const r=Fr(e,{idToken:t.credential,phoneEnrollmentInfo:{phoneNumber:a.phoneNumber,clientType:"CLIENT_TYPE_WEB"}},"mfaSmsEnrollment",(async(e,t)=>t.phoneEnrollmentInfo.captchaResponse===Dr?(xn((null==n?void 0:n.type)===Ua,e,"argument-error"),va(e,await Va(e,t,n))):va(e,t)),"PHONE_PROVIDER");return(await r.catch((e=>Promise.reject(e)))).phoneSessionInfo.sessionInfo}{xn("signin"===t.type,e,"internal-error");const o=(null===(r=a.multiFactorHint)||void 0===r?void 0:r.uid)||a.multiFactorUid;xn(o,e,"missing-multi-factor-info");const i=Fr(e,{mfaPendingCredential:t.credential,mfaEnrollmentId:o,phoneSignInInfo:{clientType:"CLIENT_TYPE_WEB"}},"mfaSmsSignIn",(async(e,t)=>t.phoneSignInInfo.captchaResponse===Dr?(xn((null==n?void 0:n.type)===Ua,e,"argument-error"),Fa(e,await Va(e,t,n))):Fa(e,t)),"PHONE_PROVIDER");return(await i.catch((e=>Promise.reject(e)))).phoneResponseInfo.sessionInfo}}{const t=Fr(e,{phoneNumber:a.phoneNumber,clientType:"CLIENT_TYPE_WEB"},"sendVerificationCode",(async(e,t)=>t.captchaResponse===Dr?(xn((null==n?void 0:n.type)===Ua,e,"argument-error"),qr(e,await Va(e,t,n))):qr(e,t)),"PHONE_PROVIDER");return(await t.catch((e=>Promise.reject(e)))).sessionInfo}}finally{null==n||n._reset()}}async function Va(e,t,n){xn(n.type===Ua,e,"argument-error");const r=await n.verify();xn("string"==typeof r,e,"argument-error");const a=Object.assign({},t);if("phoneEnrollmentInfo"in a){const e=a.phoneEnrollmentInfo.phoneNumber,t=a.phoneEnrollmentInfo.captchaResponse,n=a.phoneEnrollmentInfo.clientType,o=a.phoneEnrollmentInfo.recaptchaVersion;return Object.assign(a,{phoneEnrollmentInfo:{phoneNumber:e,recaptchaToken:r,captchaResponse:t,clientType:n,recaptchaVersion:o}}),a}if("phoneSignInInfo"in a){const e=a.phoneSignInInfo.captchaResponse,t=a.phoneSignInInfo.clientType,n=a.phoneSignInInfo.recaptchaVersion;return Object.assign(a,{phoneSignInInfo:{recaptchaToken:r,captchaResponse:e,clientType:t,recaptchaVersion:n}}),a}return Object.assign(a,{recaptchaToken:r}),a}class Ba{constructor(e){this.providerId=Ba.PROVIDER_ID,this.auth=Cr(e)}verifyPhoneNumber(e,t){return za(this.auth,e,Be(t))}static credential(e,t){return Yr._fromVerification(e,t)}static credentialFromResult(e){const t=e;return Ba.credentialFromTaggedObject(t)}static credentialFromError(e){return Ba.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{phoneNumber:t,temporaryProof:n}=e;return t&&n?Yr._fromTokenResponse(t,n):null}}function Wa(e,t){return t?cr(t):(xn(e._popupRedirectResolver,e,"argument-error"),e._popupRedirectResolver)}Ba.PROVIDER_ID="phone",Ba.PHONE_SIGN_IN_METHOD="phone";class Ha extends Vr{constructor(e){super("custom","custom"),this.params=e}_getIdTokenResponse(e){return $r(e,this._buildIdpRequest())}_linkToIdToken(e,t){return $r(e,this._buildIdpRequest(t))}_getReauthenticationResolver(e){return $r(e,this._buildIdpRequest())}_buildIdpRequest(e){const t={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return e&&(t.idToken=e),t}}function $a(e){return ca(e.auth,new Ha(e),e.bypassAuthState)}function Ga(e){const{auth:t,user:n}=e;return xn(n,t,"internal-error"),async function(e,t,n=!1){const{auth:r}=e;if(en(r.app))return Promise.reject(Sn(r));const a="reauthenticate";try{const o=await er(e,la(r,a,t,e),n);xn(o.idToken,r,"internal-error");const i=Xn(o.idToken);xn(i,r,"internal-error");const{sub:s}=i;return xn(e.uid===s,r,"user-mismatch"),oa._forOperation(e,a,o)}catch(e){throw"auth/user-not-found"===(null==e?void 0:e.code)&&wn(r,"user-mismatch"),e}}(n,new Ha(e),e.bypassAuthState)}async function qa(e){const{auth:t,user:n}=e;return xn(n,t,"internal-error"),async function(e,t,n=!1){const r=await er(e,t._linkToIdToken(e.auth,await e.getIdToken()),n);return oa._forOperation(e,"link",r)}(n,new Ha(e),e.bypassAuthState)}class Ka{constructor(e,t,n,r,a=!1){this.auth=e,this.resolver=n,this.user=r,this.bypassAuthState=a,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(t)?t:[t]}execute(){return new Promise((async(e,t)=>{this.pendingPromise={resolve:e,reject:t};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(e){this.reject(e)}}))}async onAuthEvent(e){const{urlResponse:t,sessionId:n,postBody:r,tenantId:a,error:o,type:i}=e;if(o)return void this.reject(o);const s={auth:this.auth,requestUri:t,sessionId:n,tenantId:a||void 0,postBody:r||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(i)(s))}catch(e){this.reject(e)}}onError(e){this.reject(e)}getIdpTask(e){switch(e){case"signInViaPopup":case"signInViaRedirect":return $a;case"linkViaPopup":case"linkViaRedirect":return qa;case"reauthViaPopup":case"reauthViaRedirect":return Ga;default:wn(this.auth,"internal-error")}}resolve(e){Cn(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(e),this.unregisterAndCleanUp()}reject(e){Cn(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(e),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const Ya=new On(2e3,1e4);async function Qa(e,t,n){if(en(e.app))return Promise.reject(kn(e,"operation-not-supported-in-this-environment"));const r=Cr(e);!function(e,t,n){if(!(t instanceof n))throw n.name!==t.constructor.name&&wn(e,"argument-error"),Nn(e,"argument-error",`Type of ${t.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`)}(e,t,Xr);const a=Wa(r,n);return new Ja(r,"signInViaPopup",t,a).executeNotNull()}class Ja extends Ka{constructor(e,t,n,r,a){super(e,t,r,a),this.provider=n,this.authWindow=null,this.pollId=null,Ja.currentPopupAction&&Ja.currentPopupAction.cancel(),Ja.currentPopupAction=this}async executeNotNull(){const e=await this.execute();return xn(e,this.auth,"internal-error"),e}async onExecution(){Cn(1===this.filter.length,"Popup operations only handle one event");const e=Sa();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],e),this.authWindow.associatedEvent=e,this.resolver._originValidation(this.auth).catch((e=>{this.reject(e)})),this.resolver._isIframeWebStorageSupported(this.auth,(e=>{e||this.reject(kn(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var e;return(null===(e=this.authWindow)||void 0===e?void 0:e.associatedEvent)||null}cancel(){this.reject(kn(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,Ja.currentPopupAction=null}pollUserCancellation(){const e=()=>{var t,n;(null===(n=null===(t=this.authWindow)||void 0===t?void 0:t.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(kn(this.auth,"popup-closed-by-user"))}),8e3):this.pollId=window.setTimeout(e,Ya.get())};e()}}Ja.currentPopupAction=null;const Xa=new Map;class Za extends Ka{constructor(e,t,n=!1){super(e,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],t,void 0,n),this.eventId=null}async execute(){let e=Xa.get(this.auth._key());if(!e){try{const t=await async function(e,t){const n=function(e){return fr("pendingRedirect",e.config.apiKey,e.name)}(t),r=function(e){return cr(e._redirectPersistence)}(e);if(!await r._isAvailable())return!1;const a="true"===await r._get(n);return await r._remove(n),a}(this.resolver,this.auth),n=t?await super.execute():null;e=()=>Promise.resolve(n)}catch(t){e=()=>Promise.reject(t)}Xa.set(this.auth._key(),e)}return this.bypassAuthState||Xa.set(this.auth._key(),(()=>Promise.resolve(null))),e()}async onAuthEvent(e){if("signInViaRedirect"===e.type)return super.onAuthEvent(e);if("unknown"!==e.type){if(e.eventId){const t=await this.auth._redirectUserForId(e.eventId);if(t)return this.user=t,super.onAuthEvent(e);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function eo(e,t){Xa.set(e._key(),t)}async function to(e,t,n=!1){if(en(e.app))return Promise.reject(Sn(e));const r=Cr(e),a=Wa(r,t),o=new Za(r,a,n),i=await o.execute();return i&&!n&&(delete i.user._redirectEventId,await r._persistUserIfCurrent(i.user),await r._setRedirectUser(null,t)),i}class no{constructor(e){this.auth=e,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(e){this.consumers.add(e),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,e)&&(this.sendToConsumer(this.queuedRedirectEvent,e),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(e){this.consumers.delete(e)}onEvent(e){if(this.hasEventBeenHandled(e))return!1;let t=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(e,n)&&(t=!0,this.sendToConsumer(e,n),this.saveEventToCache(e))})),this.hasHandledPotentialRedirect||!function(e){switch(e.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return ao(e);default:return!1}}(e)||(this.hasHandledPotentialRedirect=!0,t||(this.queuedRedirectEvent=e,t=!0)),t}sendToConsumer(e,t){var n;if(e.error&&!ao(e)){const r=(null===(n=e.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";t.onError(kn(this.auth,r))}else t.onAuthEvent(e)}isEventForConsumer(e,t){const n=null===t.eventId||!!e.eventId&&e.eventId===t.eventId;return t.filter.includes(e.type)&&n}hasEventBeenHandled(e){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(ro(e))}saveEventToCache(e){this.cachedEventUids.add(ro(e)),this.lastProcessedEventTime=Date.now()}}function ro(e){return[e.type,e.eventId,e.sessionId,e.tenantId].filter((e=>e)).join("-")}function ao({type:e,error:t}){return"unknown"===e&&"auth/no-auth-event"===(null==t?void 0:t.code)}const oo=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,io=/^https?/;function so(e){const t=Tn(),{protocol:n,hostname:r}=new URL(t);if(e.startsWith("chrome-extension://")){const a=new URL(e);return""===a.hostname&&""===r?"chrome-extension:"===n&&e.replace("chrome-extension://","")===t.replace("chrome-extension://",""):"chrome-extension:"===n&&a.hostname===r}if(!io.test(n))return!1;if(oo.test(e))return r===e;const a=e.replace(/\./g,"\\.");return new RegExp("^(.+\\."+a+"|"+a+")$","i").test(r)}const lo=new On(3e4,6e4);function co(){const e=xa().___jsl;if(null==e?void 0:e.H)for(const t of Object.keys(e.H))if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=[...e.H[t].L],e.CP)for(let t=0;t<e.CP.length;t++)e.CP[t]=null}function uo(e){return new Promise(((t,n)=>{var r,a,o;function i(){co(),gapi.load("gapi.iframes",{callback:()=>{t(gapi.iframes.getContext())},ontimeout:()=>{co(),n(kn(e,"network-request-failed"))},timeout:lo.get()})}if(null===(a=null===(r=xa().gapi)||void 0===r?void 0:r.iframes)||void 0===a?void 0:a.Iframe)t(gapi.iframes.getContext());else{if(!(null===(o=xa().gapi)||void 0===o?void 0:o.load)){const t=Or("iframefcb");return xa()[t]=()=>{gapi.load?i():n(kn(e,"network-request-failed"))},Pr(`${Lr.gapiScript}?onload=${t}`).catch((e=>n(e)))}i()}})).catch((e=>{throw fo=null,e}))}let fo=null;const ho=new On(5e3,15e3),mo={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},po=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function vo(e){const t=e.config;xn(t.authDomain,e,"auth-domain-config-required");const n=t.emulator?Rn(t,"emulator/auth/iframe"):`https://${e.config.authDomain}/__/auth/iframe`,r={apiKey:t.apiKey,appName:e.name,v:rn},a=po.get(e.config.apiHost);a&&(r.eid=a);const o=e._getFrameworks();return o.length&&(r.fw=o.join(",")),`${n}?${Me(r).slice(1)}`}const go={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class yo{constructor(e){this.window=e,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(e){}}}const bo=encodeURIComponent("fac");async function Eo(e,t,n,r,a,o){xn(e.config.authDomain,e,"auth-domain-config-required"),xn(e.config.apiKey,e,"invalid-api-key");const i={apiKey:e.config.apiKey,appName:e.name,authType:n,redirectUrl:r,v:rn,eventId:a};if(t instanceof Xr){t.setDefaultLanguage(e.languageCode),i.providerId=t.providerId||"",function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}(t.getCustomParameters())||(i.customParameters=JSON.stringify(t.getCustomParameters()));for(const[e,t]of Object.entries(o||{}))i[e]=t}if(t instanceof Zr){const e=t.getScopes().filter((e=>""!==e));e.length>0&&(i.scopes=e.join(","))}e.tenantId&&(i.tid=e.tenantId);const s=i;for(const e of Object.keys(s))void 0===s[e]&&delete s[e];const l=await e._getAppCheckToken(),c=l?`#${bo}=${encodeURIComponent(l)}`:"";return`${function({config:e}){return e.emulator?Rn(e,"emulator/auth/handler"):`https://${e.authDomain}/__/auth/handler`}(e)}?${Me(s).slice(1)}${c}`}const wo="webStorageSupport",ko=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=ka,this._completeRedirectFn=to,this._overrideRedirectResult=eo}async _openPopup(e,t,n,r){var a;return Cn(null===(a=this.eventManagers[e._key()])||void 0===a?void 0:a.manager,"_initialize() not called before _openPopup()"),function(e,t,n,r=500,a=600){const o=Math.max((window.screen.availHeight-a)/2,0).toString(),i=Math.max((window.screen.availWidth-r)/2,0).toString();let s="";const l=Object.assign(Object.assign({},go),{width:r.toString(),height:a.toString(),top:o,left:i}),c=Pe().toLowerCase();n&&(s=gr(c)?"_blank":n),pr(c)&&(t=t||"http://localhost",l.scrollbars="yes");const u=Object.entries(l).reduce(((e,[t,n])=>`${e}${t}=${n},`),"");if(function(e=Pe()){var t;return kr(e)&&!!(null===(t=window.navigator)||void 0===t?void 0:t.standalone)}(c)&&"_self"!==s)return function(e,t){const n=document.createElement("a");n.href=e,n.target=t;const r=document.createEvent("MouseEvent");r.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(r)}(t||"",s),new yo(null);const d=window.open(t||"",s,u);xn(d,e,"popup-blocked");try{d.focus()}catch(e){}return new yo(d)}(e,await Eo(e,t,n,Tn(),r),Sa())}async _openRedirect(e,t,n,r){return await this._originValidation(e),a=await Eo(e,t,n,Tn(),r),xa().location.href=a,new Promise((()=>{}));var a}_initialize(e){const t=e._key();if(this.eventManagers[t]){const{manager:e,promise:n}=this.eventManagers[t];return e?Promise.resolve(e):(Cn(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(e);return this.eventManagers[t]={promise:n},n.catch((()=>{delete this.eventManagers[t]})),n}async initAndGetManager(e){const t=await async function(e){const t=await function(e){return fo=fo||uo(e),fo}(e),n=xa().gapi;return xn(n,e,"internal-error"),t.open({where:document.body,url:vo(e),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:mo,dontclear:!0},(t=>new Promise((async(n,r)=>{await t.restyle({setHideOnLeave:!1});const a=kn(e,"network-request-failed"),o=xa().setTimeout((()=>{r(a)}),ho.get());function i(){xa().clearTimeout(o),n(t)}t.ping(i).then(i,(()=>{r(a)}))}))))}(e),n=new no(e);return t.register("authEvent",(t=>(xn(null==t?void 0:t.authEvent,e,"invalid-auth-event"),{status:n.onEvent(t.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[e._key()]={manager:n},this.iframes[e._key()]=t,n}_isIframeWebStorageSupported(e,t){this.iframes[e._key()].send(wo,{type:wo},(n=>{var r;const a=null===(r=null==n?void 0:n[0])||void 0===r?void 0:r[wo];void 0!==a&&t(!!a),wn(e,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(e){const t=e._key();return this.originValidationPromises[t]||(this.originValidationPromises[t]=async function(e){if(e.config.emulator)return;const{authorizedDomains:t}=await async function(e,t={}){return Un(e,"GET","/v1/projects",t)}(e);for(const e of t)try{if(so(e))return}catch(e){}wn(e,"unauthorized-domain")}(e)),this.originValidationPromises[t]}get _shouldInitProactively(){return Nr()||vr()||kr()}};var No="@firebase/auth",So="1.10.1";class _o{constructor(e){this.auth=e,this.internalListeners=new Map}getUid(){var e;return this.assertAuthConfigured(),(null===(e=this.auth.currentUser)||void 0===e?void 0:e.uid)||null}async getToken(e){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(e)}:null}addAuthTokenListener(e){if(this.assertAuthConfigured(),this.internalListeners.has(e))return;const t=this.auth.onIdTokenChanged((t=>{e((null==t?void 0:t.stsTokenManager.accessToken)||null)}));this.internalListeners.set(e,t),this.updateProactiveRefresh()}removeAuthTokenListener(e){this.assertAuthConfigured();const t=this.internalListeners.get(e);t&&(this.internalListeners.delete(e),t(),this.updateProactiveRefresh())}assertAuthConfigured(){xn(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}const xo=Te("authIdTokenMaxAge")||300;let Io=null;var Co;Lr={loadJS:e=>new Promise(((t,n)=>{const r=document.createElement("script");var a,o;r.setAttribute("src",e),r.onload=t,r.onerror=e=>{const t=kn("internal-error");t.customData=e,n(t)},r.type="text/javascript",r.charset="UTF-8",(null!==(o=null===(a=document.getElementsByTagName("head"))||void 0===a?void 0:a[0])&&void 0!==o?o:document).appendChild(r)})),gapiScript:"https://apis.google.com/js/api.js",recaptchaV2Script:"https://www.google.com/recaptcha/api.js",recaptchaEnterpriseScript:"https://www.google.com/recaptcha/enterprise.js?render="},Co="Browser",Xt(new We("auth",((e,{options:t})=>{const n=e.getProvider("app").getImmediate(),r=e.getProvider("heartbeat"),a=e.getProvider("app-check-internal"),{apiKey:o,authDomain:i}=n.options;xn(o&&!o.includes(":"),"invalid-api-key",{appName:n.name});const s={apiKey:o,authDomain:i,clientPlatform:Co,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:Sr(Co)},l=new Ir(n,r,a,s);return function(e,t){const n=(null==t?void 0:t.persistence)||[],r=(Array.isArray(n)?n:[n]).map(cr);(null==t?void 0:t.errorMap)&&e._updateErrorMap(t.errorMap),e._initializeWithPersistence(r,null==t?void 0:t.popupRedirectResolver)}(l,t),l}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((e,t,n)=>{e.getProvider("auth-internal").initialize()}))),Xt(new We("auth-internal",(e=>(e=>new _o(e))(Cr(e.getProvider("auth").getImmediate()))),"PRIVATE").setInstantiationMode("EXPLICIT")),on(No,So,function(e){switch(e){case"Node":return"node";case"ReactNative":return"rn";case"Worker":return"webworker";case"Cordova":return"cordova";case"WebExtension":return"web-extension";default:return}}(Co)),on(No,So,"esm2017"),on("firebase","11.6.1","app");var To=function(e=function(e=Gt){const t=Kt.get(e);if(!t&&e===Gt&&Ce())return an();if(!t)throw tn.create("no-app",{appName:e});return t}()){const t=Zt(e,"auth");if(t.isInitialized())return t.getImmediate();const n=function(e,t){const n=Zt(e,"auth");if(n.isInitialized()){const e=n.getImmediate();if(De(n.getOptions(),null!=t?t:{}))return e;wn(e,"already-initialized")}return n.initialize({options:t})}(e,{popupRedirectResolver:ko,persistence:[Ma,Ea,ka]}),r=Te("authTokenSyncURL");if(r&&"boolean"==typeof isSecureContext&&isSecureContext){const e=new URL(r,location.origin);if(location.origin===e.origin){const t=(a=e.toString(),async e=>{const t=e&&await e.getIdTokenResult(),n=t&&((new Date).getTime()-Date.parse(t.issuedAtTime))/1e3;if(n&&n>xo)return;const r=null==t?void 0:t.token;Io!==r&&(Io=r,await fetch(a,{method:r?"POST":"DELETE",headers:r?{Authorization:`Bearer ${r}`}:{}}))});!function(e,t,n){Be(e).beforeAuthStateChanged(t,n)}(n,t,(()=>t(n.currentUser))),function(e){Be(e).onIdTokenChanged((e=>t(e)),void 0,void 0)}(n)}}var a;const o=(i="auth",null===(l=null===(s=Ie())||void 0===s?void 0:s.emulatorHosts)||void 0===l?void 0:l[i]);var i,s,l;return o&&function(e,t,n){const r=Cr(e);xn(/^https?:\/\//.test(t),r,"invalid-emulator-scheme");const a=!!(null==n?void 0:n.disableWarnings),o=Ur(t),{host:i,port:s}=function(e){const t=Ur(e),n=/(\/\/)?([^?#/]+)/.exec(e.substr(t.length));if(!n)return{host:"",port:null};const r=n[2].split("@").pop()||"",a=/^(\[[^\]]+\])(:|$)/.exec(r);if(a){const e=a[1];return{host:e,port:zr(r.substr(e.length+1))}}{const[e,t]=r.split(":");return{host:e,port:zr(t)}}}(t),l={url:`${o}//${i}${null===s?"":`:${s}`}/`},c=Object.freeze({host:i,port:s,protocol:o.replace(":",""),options:Object.freeze({disableWarnings:a})});if(!r._canInitEmulator)return xn(r.config.emulator&&r.emulatorConfig,r,"emulator-config-failed"),void xn(De(l,r.config.emulator)&&De(c,r.emulatorConfig),r,"emulator-config-failed");r.config.emulator=l,r.emulatorConfig=c,r.settings.appVerificationDisabledForTesting=!0,a||function(){function e(){const e=document.createElement("p"),t=e.style;e.innerText="Running in emulator mode. Do not use with production credentials.",t.position="fixed",t.width="100%",t.backgroundColor="#ffffff",t.border=".1em solid #000000",t.color="#b50000",t.bottom="0px",t.left="0px",t.margin="0px",t.zIndex="10000",t.textAlign="center",e.classList.add("firebase-emulator-warning"),document.body.appendChild(e)}"undefined"!=typeof console&&"function"==typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),"undefined"!=typeof window&&"undefined"!=typeof document&&("loading"===document.readyState?window.addEventListener("DOMContentLoaded",e):e())}()}(n,`http://${o}`),n}(an({apiKey:"YOUR_API_KEY",authDomain:"YOUR_AUTH_DOMAIN",projectId:"YOUR_PROJECT_ID",storageBucket:"YOUR_STORAGE_BUCKET",messagingSenderId:"YOUR_MESSAGING_SENDER_ID",appId:"YOUR_APP_ID"}));function Lo(e){return Lo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lo(e)}function Po(){Po=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Lo(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Lo(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Oo(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function Ro(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Oo(o,r,a,i,s,"next",e)}function s(e){Oo(o,r,a,i,s,"throw",e)}i(void 0)}))}}function Ao(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Do(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Do(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Do(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var jo=(0,t.createContext)(),Mo=function(){return(0,t.useContext)(jo)},Fo=function(e){var n=e.children,r=Ao((0,t.useState)(null),2),a=r[0],o=r[1],i=Ao((0,t.useState)(!0),2),s=i[0],l=i[1];(0,t.useEffect)((function(){return ma(To,(function(e){console.log("Auth State Changed:",e?"User UID: ".concat(e.uid):"No user"),o(e),l(!1)}))}),[]);var c=function(){var e=Ro(Po().mark((function e(){return Po().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return l(!0),e.prev=1,e.next=4,pa(To);case 4:console.log("User signed out successfully."),e.next=11;break;case 7:e.prev=7,e.t0=e.catch(1),console.error("Logout failed:",e.t0),l(!1);case 11:case"end":return e.stop()}}),e,null,[[1,7]])})));return function(){return e.apply(this,arguments)}}(),u=function(){var e=Ro(Po().mark((function e(){var t;return Po().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!a){e.next=15;break}return e.prev=1,e.next=4,a.getIdToken(!0);case 4:return t=e.sent,e.abrupt("return",t);case 8:if(e.prev=8,e.t0=e.catch(1),console.error("Error getting ID token:",e.t0),"auth/user-token-expired"!==e.t0.code&&"auth/internal-error"!==e.t0.code){e.next=14;break}return e.next=14,c();case 14:case 15:return e.abrupt("return",null);case 16:case"end":return e.stop()}}),e,null,[[1,8]])})));return function(){return e.apply(this,arguments)}}(),d={currentUser:a,loading:s,logout:c,getIdToken:u};return t.createElement(jo.Provider,{value:d},!s&&n)};function Uo(e){return Uo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Uo(e)}function zo(){zo=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Uo(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Uo(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Vo(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function Bo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wo(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Ho=function(e){var n=e.children,r=Mo(),a=r.currentUser,o=r.logout,i=r.loading,s=K(),l=G(),c=Bo((0,t.useState)(!1),2),u=c[0],d=c[1],f=Bo((0,t.useState)(!1),2),h=f[0],m=f[1];(0,t.useEffect)((function(){var e=function(){window.scrollY>50?d(!0):d(!1)};return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}}),[]),(0,t.useEffect)((function(){var e=new IntersectionObserver((function(e,t){e.forEach((function(e){e.isIntersecting&&(e.target.classList.add("visible"),t.unobserve(e.target))}))}),{root:null,rootMargin:"0px",threshold:.1}),t=document.querySelectorAll(".fade-in, .slide-in-left, .slide-in-right");return t.forEach((function(t){return e.observe(t)})),function(){t&&t.forEach((function(t){return e.unobserve(t)}))}}),[l.pathname]);var p=function(){var e,t=(e=zo().mark((function e(){return zo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,o();case 3:s("/"),console.log("Logout successful, navigating to home."),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),console.error("Failed to log out:",e.t0);case 10:case"end":return e.stop()}}),e,null,[[0,7]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Vo(o,r,a,i,s,"next",e)}function s(e){Vo(o,r,a,i,s,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement("div",null,t.createElement("nav",{className:"navbar ".concat(u?"scrolled":"")},t.createElement("div",{className:"container navbar-container"},t.createElement(be,{to:"/",className:"navbar-logo"},t.createElement("svg",{width:"40",height:"40",viewBox:"0 0 512 512",xmlns:"http://www.w3.org/2000/svg"},t.createElement("path",{fill:"#2f506a",d:"M256 48c-79.5 0-144 64.5-144 144s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144zm0 96c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48z"}),t.createElement("path",{fill:"#e64f50",d:"M256 0c-70.7 0-128 57.3-128 128 0 70.7 57.3 128 128 128 70.7 0 128-57.3 128-128C384 57.3 326.7 0 256 0zm0 224c-52.9 0-96-43.1-96-96s43.1-96 96-96 96 43.1 96 96-43.1 96-96 96z"}),t.createElement("path",{fill:"#2f506a",d:"M240 256v160c0 26.5 21.5 48 48 48s48-21.5 48-48V256h-96z"}),t.createElement("path",{fill:"#e64f50",d:"M176 256v160c0 26.5 21.5 48 48 48s48-21.5 48-48V256h-96z"})),"Kids in Motion"),t.createElement("button",{className:"navbar-toggler ".concat(h?"open":""),onClick:function(){m(!h)},"aria-label":"Toggle navigation"},t.createElement("span",null),t.createElement("span",null),t.createElement("span",null),t.createElement("span",null)),t.createElement("ul",{className:"navbar-menu ".concat(h?"open":"")},t.createElement("li",{className:"navbar-item"},t.createElement(be,{to:"/",className:"navbar-link ".concat("/"===l.pathname?"active":"")},"Home")),t.createElement("li",{className:"navbar-item"},t.createElement(be,{to:"/events",className:"navbar-link ".concat(l.pathname.includes("/events")?"active":"")},"Events")),t.createElement("li",{className:"navbar-item"},t.createElement(be,{to:"/about",className:"navbar-link ".concat("/about"===l.pathname?"active":"")},"About Us")),a&&t.createElement("li",{className:"navbar-item"},t.createElement(be,{to:"/dashboard",className:"navbar-link ".concat("/dashboard"===l.pathname?"active":"")},"Dashboard")),!i&&(a?t.createElement("li",{className:"navbar-item"},t.createElement("div",{className:"dropdown"},t.createElement("button",{className:"navbar-link dropdown-toggle"},a.displayName||a.email),t.createElement("div",{className:"dropdown-menu"},t.createElement(be,{className:"dropdown-item",to:"/profile"},"My Profile"),t.createElement("div",{className:"dropdown-divider"}),t.createElement("button",{onClick:p,className:"dropdown-item"},"Logout")))):t.createElement(t.Fragment,null,t.createElement("li",{className:"navbar-item"},t.createElement(be,{to:"/login",className:"navbar-link ".concat("/login"===l.pathname?"active":"")},"Login")),t.createElement("li",{className:"navbar-item"},t.createElement(be,{to:"/register",className:"btn btn-secondary"},"Register"))))))),t.createElement("main",null,n),t.createElement("footer",{className:"footer"},t.createElement("div",{className:"footer-wave"},t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1440 100",preserveAspectRatio:"none"},t.createElement("path",{fill:"#ede9e7",fillOpacity:"1",d:"M0,32L48,37.3C96,43,192,53,288,58.7C384,64,480,64,576,58.7C672,53,768,43,864,48C960,53,1056,75,1152,74.7C1248,75,1344,53,1392,42.7L1440,32L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z"}))),t.createElement("div",{className:"container footer-content"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-third"},t.createElement("div",{className:"footer-logo"},t.createElement(be,{to:"/",className:"navbar-logo",style:{color:"white"}},t.createElement("svg",{width:"40",height:"40",viewBox:"0 0 512 512",xmlns:"http://www.w3.org/2000/svg"},t.createElement("path",{fill:"white",d:"M256 48c-79.5 0-144 64.5-144 144s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144zm0 96c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48z"}),t.createElement("path",{fill:"#eb7172",d:"M256 0c-70.7 0-128 57.3-128 128 0 70.7 57.3 128 128 128 70.7 0 128-57.3 128-128C384 57.3 326.7 0 256 0zm0 224c-52.9 0-96-43.1-96-96s43.1-96 96-96 96 43.1 96 96-43.1 96-96 96z"}),t.createElement("path",{fill:"white",d:"M240 256v160c0 26.5 21.5 48 48 48s48-21.5 48-48V256h-96z"}),t.createElement("path",{fill:"#eb7172",d:"M176 256v160c0 26.5 21.5 48 48 48s48-21.5 48-48V256h-96z"})),"Kids in Motion")),t.createElement("p",{className:"mb-2"},"Empowering every kid to play and learn through sports."),t.createElement("div",{className:"footer-social"},t.createElement("a",{href:"#",className:"social-icon"},t.createElement("i",{className:"fab fa-facebook-f"})),t.createElement("a",{href:"#",className:"social-icon"},t.createElement("i",{className:"fab fa-twitter"})),t.createElement("a",{href:"#",className:"social-icon"},t.createElement("i",{className:"fab fa-instagram"})),t.createElement("a",{href:"#",className:"social-icon"},t.createElement("i",{className:"fab fa-youtube"})))),t.createElement("div",{className:"col-third"},t.createElement("h4",{style:{color:"white"}},"Quick Links"),t.createElement("ul",{className:"footer-links"},t.createElement("li",null,t.createElement(be,{to:"/events"},"Upcoming Events")),t.createElement("li",null,t.createElement(be,{to:"/donate"},"Support Our Mission")),t.createElement("li",null,t.createElement(be,{to:"/about"},"About Us")),t.createElement("li",null,t.createElement(be,{to:"/contact"},"Contact Us")))),t.createElement("div",{className:"col-third"},t.createElement("h4",{style:{color:"white"}},"Contact Us"),t.createElement("ul",{className:"footer-links"},t.createElement("li",null,t.createElement("i",{className:"fas fa-envelope mr-2"})," info@kidsinmotion.org"),t.createElement("li",null,t.createElement("i",{className:"fas fa-phone mr-2"})," (555) 123-4567"),t.createElement("li",null,t.createElement("i",{className:"fas fa-map-marker-alt mr-2"})," 123 Sports Ave, Anytown USA")))),t.createElement("div",{className:"footer-bottom"},t.createElement("p",null,"© ",(new Date).getFullYear()," Kids in Motion. All rights reserved.")))),t.createElement("script",null,"\n          // Animation scroll functions will run from useEffect\n        "))};function $o(e){return $o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$o(e)}function Go(){Go=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==$o(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError($o(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function qo(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function Ko(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Yo(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Yo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Qo=function(){var e=Ko((0,t.useState)([]),2),n=e[0],r=e[1],a=Ko((0,t.useState)(!0),2),o=a[0],i=a[1];return(0,t.useEffect)((function(){var e=function(){var e,t=(e=Go().mark((function e(){var t,n;return Go().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("/api/events/upcoming");case 3:if(!(t=e.sent).ok){e.next=9;break}return e.next=7,t.json();case 7:n=e.sent,r(n.slice(0,3));case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(0),console.error("Error fetching events:",e.t0);case 14:return e.prev=14,i(!1),e.finish(14);case 17:case"end":return e.stop()}}),e,null,[[0,11,14,17]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){qo(o,r,a,i,s,"next",e)}function s(e){qo(o,r,a,i,s,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();e()}),[]),t.createElement(Ho,null,t.createElement("section",{className:"hero",style:{height:"100vh",display:"flex",alignItems:"center"}},t.createElement("div",{className:"hero-bg",style:{backgroundImage:'url("/img/hero-bg.jpg")'}}),t.createElement("div",{className:"hero-shapes"},t.createElement("div",{className:"hero-shape shape-1"}),t.createElement("div",{className:"hero-shape shape-2"}),t.createElement("div",{className:"hero-shape shape-3"})),t.createElement("div",{className:"container hero-content"},t.createElement("h1",null,"Empowering Every Kid to Play"),t.createElement("p",null,"Kids in Motion provides free sports clinics and equipment to kids who may not have access, helping them learn new games, build skills, and develop confidence."),t.createElement(be,{to:"/events",className:"btn btn-secondary"},"Get Involved")),t.createElement("div",{className:"hero-wave"},t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1440 100",preserveAspectRatio:"none"},t.createElement("path",{fill:"#ede9e7",fillOpacity:"1",d:"M0,64L60,58.7C120,53,240,43,360,48C480,53,600,75,720,75C840,75,960,53,1080,48C1200,43,1320,53,1380,58.7L1440,64L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"})))),t.createElement("section",{className:"section"},t.createElement("div",{className:"container"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-half fade-in"},t.createElement("h2",null,"Our Mission"),t.createElement("p",null,"Kids in Motion is on a mission to make sports accessible to every child. Through free sports clinics and donated equipment, we give kids—especially those facing financial or opportunity barriers—the chance to explore new sports, develop skills, and build lasting friendships."),t.createElement("p",null,"Founded by high school athletes who believe in the power of sports, we aim to break down the financial and social barriers that prevent kids from playing. Whether it's baseball, soccer, basketball, or other sports, our clinics provide a fun, supportive environment where kids can learn from experienced athletes and discover their potential."),t.createElement(be,{to:"/about",className:"btn btn-outline mt-2"},"Learn More")),t.createElement("div",{className:"col-half slide-in-right"},t.createElement("img",{src:"/img/team-photo.jpg",alt:"Kids in Motion Team",style:{width:"100%",borderRadius:"8px",boxShadow:"0 15px 30px rgba(0,0,0,0.1)"}}))))),t.createElement("section",{className:"section",style:{backgroundColor:"#f8f8f8"}},t.createElement("div",{className:"container"},t.createElement("div",{className:"section-head fade-in"},t.createElement("h2",null,"Upcoming Events")),o?t.createElement("div",{className:"text-center"},t.createElement("div",{className:"loading-spinner"}),t.createElement("p",null,"Loading events...")):n.length>0?t.createElement("div",{className:"row"},n.map((function(e,n){return t.createElement("div",{className:"col-third fade-in",key:e.id,style:{animationDelay:"".concat(.2*n,"s")}},t.createElement("div",{className:"card event-card"},t.createElement("div",{className:"card-header"},t.createElement("h3",null,e.title)),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"event-meta"},t.createElement("p",null,t.createElement("i",{className:"far fa-calendar"})," ",(r=e.startDate,new Date(r).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}))),t.createElement("p",null,t.createElement("i",{className:"fas fa-map-marker-alt"})," ",e.location),t.createElement("p",null,t.createElement("i",{className:"fas fa-running"})," ",e.sportType)),t.createElement("p",null,e.description)),t.createElement("div",{className:"card-footer"},t.createElement(be,{to:"/events/".concat(e.id),className:"btn btn-primary"},"Learn More"))));var r}))):t.createElement("div",{className:"text-center fade-in"},t.createElement("p",null,"No upcoming events at the moment. Check back soon!")),t.createElement("div",{className:"text-center mt-3 fade-in"},t.createElement(be,{to:"/events",className:"btn btn-outline"},"View All Events")))),t.createElement("section",{className:"section"},t.createElement("div",{className:"container"},t.createElement("div",{className:"section-head fade-in"},t.createElement("h2",null,"Our Impact")),t.createElement("div",{className:"row"},t.createElement("div",{className:"col-fourth fade-in"},t.createElement("div",{className:"impact-stat text-center"},t.createElement("div",{className:"impact-number"},"500+"),t.createElement("p",null,"Children Served"))),t.createElement("div",{className:"col-fourth fade-in",style:{animationDelay:"0.2s"}},t.createElement("div",{className:"impact-stat text-center"},t.createElement("div",{className:"impact-number"},"25"),t.createElement("p",null,"Free Clinics"))),t.createElement("div",{className:"col-fourth fade-in",style:{animationDelay:"0.4s"}},t.createElement("div",{className:"impact-stat text-center"},t.createElement("div",{className:"impact-number"},"10"),t.createElement("p",null,"Communities"))),t.createElement("div",{className:"col-fourth fade-in",style:{animationDelay:"0.6s"}},t.createElement("div",{className:"impact-stat text-center"},t.createElement("div",{className:"impact-number"},"300+"),t.createElement("p",null,"Equipment Donations")))))),t.createElement("section",{className:"section parallax",style:{backgroundImage:'url("/img/testimonial-bg.jpg")',padding:"6rem 0",position:"relative"}},t.createElement("div",{className:"overlay",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",backgroundColor:"rgba(47, 80, 106, 0.85)"}}),t.createElement("div",{className:"container",style:{position:"relative",zIndex:1}},t.createElement("div",{className:"testimonial-slider fade-in"},t.createElement("div",{className:"testimonial text-center"},t.createElement("div",{className:"testimonial-quote"},t.createElement("i",{className:"fas fa-quote-left",style:{fontSize:"2rem",color:"var(--secondary)"}})),t.createElement("p",{style:{fontSize:"1.25rem",color:"white",maxWidth:"800px",margin:"1.5rem auto"}},'"Kids in Motion has been a game-changer for my son. Before joining, he had never played organized sports because of the cost. Now he\'s developing skills, making friends, and has discovered a passion for soccer. The coaches are amazing and truly care about every child."'),t.createElement("div",{className:"testimonial-author",style:{color:"white"}},t.createElement("strong",null,"Sarah Johnson"),", Parent"))))),t.createElement("section",{className:"section"},t.createElement("div",{className:"container"},t.createElement("div",{className:"card fade-in"},t.createElement("div",{className:"card-header text-center"},t.createElement("h2",null,"Help Every Kid Get in the Game")),t.createElement("div",{className:"card-body text-center"},t.createElement("p",null,"Your donations provide free sports clinics and equipment to kids who might not otherwise have the chance to play. Every contribution helps us reach more communities and inspire the next generation of athletes."),t.createElement(be,{to:"/donate",className:"btn btn-secondary mt-2"},"Support Our Mission"))))),t.createElement("style",{jsx:!0},"\n        .impact-number {\n          font-size: 3rem;\n          font-weight: 700;\n          color: var(--secondary);\n          margin-bottom: 0.5rem;\n        }\n        \n        .impact-stat {\n          padding: 2rem 1rem;\n          border-radius: 8px;\n          background-color: white;\n          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);\n          transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n        \n        .impact-stat:hover {\n          transform: translateY(-10px);\n          box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n        }\n        \n        .loading-spinner {\n          display: inline-block;\n          width: 50px;\n          height: 50px;\n          border: 3px solid rgba(47, 80, 106, 0.3);\n          border-radius: 50%;\n          border-top-color: var(--primary);\n          animation: spin 1s ease-in-out infinite;\n        }\n        \n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n      "))};function Jo(e){return Jo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jo(e)}function Xo(){Xo=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Jo(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Jo(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Zo(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function ei(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||ti(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ti(e,t){if(e){if("string"==typeof e)return ni(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ni(e,t):void 0}}function ni(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ri=function(){var e=ei((0,t.useState)([]),2),n=e[0],r=e[1],a=ei((0,t.useState)(!0),2),o=a[0],i=a[1],s=ei((0,t.useState)("upcoming"),2),l=s[0],c=s[1],u=ei((0,t.useState)("all"),2),d=u[0],f=u[1],h=ei((0,t.useState)([]),2),m=h[0],p=h[1];(0,t.useEffect)((function(){v()}),[l,d]);var v=function(){var e,t=(e=Xo().mark((function e(){var t,n,a,o;return Xo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i(!0),e.prev=1,t="/api/events","upcoming"===l?t="/api/events/upcoming":"past"===l&&(t="/api/events/past"),e.next=6,fetch(t);case 6:if(!(n=e.sent).ok){e.next=14;break}return e.next=10,n.json();case 10:a=e.sent,"all"!==d&&(a=a.filter((function(e){return e.sportType===d}))),r(a),"past"!==l&&(s=new Set(a.map((function(e){return e.sportType}))),o=function(e){if(Array.isArray(e))return ni(e)}(s)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(s)||ti(s)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),p(o));case 14:e.next=19;break;case 16:e.prev=16,e.t0=e.catch(1),console.error("Error fetching events:",e.t0);case 19:return e.prev=19,i(!1),e.finish(19);case 22:case"end":return e.stop()}var s}),e,null,[[1,16,19,22]])})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Zo(o,r,a,i,s,"next",e)}function s(e){Zo(o,r,a,i,s,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return t.createElement(Ho,null,t.createElement("section",{className:"hero",style:{minHeight:"50vh",display:"flex",alignItems:"center"}},t.createElement("div",{className:"hero-bg",style:{backgroundImage:'url("/img/events-bg.jpg")'}}),t.createElement("div",{className:"container hero-content"},t.createElement("h1",null,"Events & Clinics"),t.createElement("p",null,"Explore our upcoming sports clinics and events. Registration is free for all participants.")),t.createElement("div",{className:"hero-wave"},t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1440 100",preserveAspectRatio:"none"},t.createElement("path",{fill:"#ede9e7",fillOpacity:"1",d:"M0,64L60,58.7C120,53,240,43,360,48C480,53,600,75,720,75C840,75,960,53,1080,48C1200,43,1320,53,1380,58.7L1440,64L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"})))),t.createElement("section",{className:"section"},t.createElement("div",{className:"container"},t.createElement("div",{className:"row mb-4 fade-in"},t.createElement("div",{className:"col"},t.createElement("div",{className:"card"},t.createElement("div",{className:"card-body"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-half"},t.createElement("h3",null,"Filter Events"),t.createElement("div",{className:"form-group"},t.createElement("label",{htmlFor:"timeFilter"},"Time Period"),t.createElement("select",{id:"timeFilter",className:"form-control",value:l,onChange:function(e){return c(e.target.value)}},t.createElement("option",{value:"upcoming"},"Upcoming Events"),t.createElement("option",{value:"past"},"Past Events"),t.createElement("option",{value:"all"},"All Events")))),t.createElement("div",{className:"col-half"},t.createElement("h3",null,"Sport Type"),t.createElement("div",{className:"form-group"},t.createElement("label",{htmlFor:"sportFilter"},"Sport"),t.createElement("select",{id:"sportFilter",className:"form-control",value:d,onChange:function(e){return f(e.target.value)}},t.createElement("option",{value:"all"},"All Sports"),m.map((function(e){return t.createElement("option",{key:e,value:e},e)})))))))))),o?t.createElement("div",{className:"text-center fade-in"},t.createElement("div",{className:"loading-spinner"}),t.createElement("p",null,"Loading events...")):n.length>0?t.createElement("div",{className:"row"},n.map((function(e,n){return t.createElement("div",{className:"col-half mb-3 fade-in",key:e.id,style:{animationDelay:"".concat(.1*n,"s")}},t.createElement("div",{className:"card event-card"},t.createElement("div",{className:"card-header"},t.createElement("h3",null,e.title)),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"event-meta"},t.createElement("p",null,t.createElement("i",{className:"far fa-calendar"})," ",(r=e.startDate,new Date(r).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}))),t.createElement("p",null,t.createElement("i",{className:"fas fa-map-marker-alt"})," ",e.location),t.createElement("p",null,t.createElement("i",{className:"fas fa-running"})," ",e.sportType),t.createElement("p",null,t.createElement("i",{className:"fas fa-users"})," Available Spots: ",e.maxParticipants-(e.participantCount||0)),e.needsVolunteers&&t.createElement("p",null,t.createElement("i",{className:"fas fa-hand-helping"})," Volunteers Needed: ",e.volunteerCountNeeded)),t.createElement("p",null,e.description)),t.createElement("div",{className:"card-footer"},t.createElement(be,{to:"/events/".concat(e.id),className:"btn btn-primary"},"View Details"),"past"!==l&&t.createElement(be,{to:"/events/".concat(e.id,"/register"),className:"btn btn-secondary ml-2"},"Register"))));var r}))):t.createElement("div",{className:"text-center fade-in"},t.createElement("img",{src:"/img/no-results.svg",alt:"No events found",style:{maxWidth:"200px",margin:"2rem auto"}}),t.createElement("p",null,"No events found matching your criteria."),t.createElement("button",{onClick:function(){c("upcoming"),f("all")},className:"btn btn-outline mt-2"},"Reset Filters")))),t.createElement("section",{className:"section",style:{backgroundColor:"var(--primary)",color:"white",textAlign:"center"}},t.createElement("div",{className:"container fade-in"},t.createElement("h2",{style:{color:"white"}},"Want to Host an Event?"),t.createElement("p",null,"If you're interested in bringing a Kids in Motion event to your school or community, we'd love to hear from you!"),t.createElement(be,{to:"/contact",className:"btn btn-secondary mt-3"},"Contact Us"))),t.createElement("style",{jsx:!0},"\n        .loading-spinner {\n          display: inline-block;\n          width: 50px;\n          height: 50px;\n          border: 3px solid rgba(47, 80, 106, 0.3);\n          border-radius: 50%;\n          border-top-color: var(--primary);\n          animation: spin 1s ease-in-out infinite;\n        }\n        \n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n        \n        .ml-2 {\n          margin-left: 0.5rem;\n        }\n      "))};function ai(e){return ai="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ai(e)}function oi(){oi=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ai(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(ai(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function ii(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function si(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return li(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?li(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function li(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const ci=function(){var e=Y().id,n=si((0,t.useState)(null),2),r=n[0],a=n[1],o=si((0,t.useState)(!0),2),i=o[0],s=o[1],l=si((0,t.useState)(null),2),c=l[0],u=l[1],d=si((0,t.useState)(!1),2),f=d[0],h=d[1];(0,t.useEffect)((function(){var e=localStorage.getItem("token");h(!!e),m()}),[e]);var m=function(){var t,n=(t=oi().mark((function t(){var n,r;return oi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("/api/events/".concat(e));case 3:if((n=t.sent).ok){t.next=6;break}throw new Error("Event not found");case 6:return t.next=8,n.json();case 8:r=t.sent,a(r.event),t.next=16;break;case 12:t.prev=12,t.t0=t.catch(0),console.error("Error fetching event details:",t.t0),u(t.t0.message);case 16:return t.prev=16,s(!1),t.finish(16);case 19:case"end":return t.stop()}}),t,null,[[0,12,16,19]])})),function(){var e=this,n=arguments;return new Promise((function(r,a){var o=t.apply(e,n);function i(e){ii(o,r,a,i,s,"next",e)}function s(e){ii(o,r,a,i,s,"throw",e)}i(void 0)}))});return function(){return n.apply(this,arguments)}}(),p=function(e){return e?new Date(e).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}):"TBD"};if(i)return t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"loading-spinner-container"},t.createElement("div",{className:"loading-spinner"}),t.createElement("p",null,"Loading event details..."))));if(c||!r)return t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card error-card"},t.createElement("div",{className:"card-body text-center"},t.createElement("div",{className:"error-icon"},t.createElement("i",{className:"fas fa-exclamation-triangle"})),t.createElement("h2",null,"Error"),t.createElement("p",null,c||"Event not found"),t.createElement(be,{to:"/events",className:"btn btn-primary"},"Back to Events")))));var v,g=new Date(r.endDate)<new Date,y=(v=r.sportType)&&{BASEBALL:"/img/events/baseball-bg.jpg",SOCCER:"/img/events/soccer-bg.jpg",BASKETBALL:"/img/events/basketball-bg.jpg",VOLLEYBALL:"/img/events/volleyball-bg.jpg"}[v]||"/img/events/default-bg.jpg";return t.createElement(Ho,null,t.createElement("section",{className:"hero",style:{minHeight:"40vh",display:"flex",alignItems:"center"}},t.createElement("div",{className:"hero-bg",style:{backgroundImage:'url("'.concat(y,'")')}}),t.createElement("div",{className:"container hero-content"},t.createElement("span",{className:"event-badge"},r.eventType),t.createElement("h1",null,r.title),t.createElement("div",{className:"event-meta-highlights"},t.createElement("div",{className:"event-meta-item"},t.createElement("i",{className:"far fa-calendar"}),t.createElement("span",null,p(r.startDate))),t.createElement("div",{className:"event-meta-item"},t.createElement("i",{className:"fas fa-map-marker-alt"}),t.createElement("span",null,r.location)),t.createElement("div",{className:"event-meta-item"},t.createElement("i",{className:"fas fa-running"}),t.createElement("span",null,r.sportType)))),t.createElement("div",{className:"hero-wave"},t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1440 100",preserveAspectRatio:"none"},t.createElement("path",{fill:"#ede9e7",fillOpacity:"1",d:"M0,64L60,58.7C120,53,240,43,360,48C480,53,600,75,720,75C840,75,960,53,1080,48C1200,43,1320,53,1380,58.7L1440,64L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"})))),t.createElement("section",{className:"section"},t.createElement("div",{className:"container"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-two-thirds"},t.createElement("div",{className:"card mb-4 fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h2",null,"About This Event")),t.createElement("div",{className:"card-body"},t.createElement("p",{className:"mb-3"},r.description),t.createElement("h3",null,"Event Details"),t.createElement("div",{className:"event-meta mb-3"},t.createElement("p",null,t.createElement("i",{className:"far fa-calendar"})," ",t.createElement("strong",null,"Date:")," ",p(r.startDate)),t.createElement("p",null,t.createElement("i",{className:"far fa-clock"})," ",t.createElement("strong",null,"Duration:")," ",function(e,t){if(!e||!t)return"TBD";var n=new Date(e),r=new Date(t),a=Math.round((r-n)/36e5);return"".concat(a," hour").concat(1!==a?"s":"")}(r.startDate,r.endDate)),t.createElement("p",null,t.createElement("i",{className:"fas fa-map-marker-alt"})," ",t.createElement("strong",null,"Location:")," ",r.location),t.createElement("p",null,t.createElement("i",{className:"fas fa-running"})," ",t.createElement("strong",null,"Sport:")," ",r.sportType),t.createElement("p",null,t.createElement("i",{className:"fas fa-tag"})," ",t.createElement("strong",null,"Event Type:")," ",r.eventType)),t.createElement("h3",null,"What to Bring"),t.createElement("ul",{className:"what-to-bring-list"},t.createElement("li",null,t.createElement("i",{className:"fas fa-tint"})," Water bottle"),t.createElement("li",null,t.createElement("i",{className:"fas fa-tshirt"})," Comfortable athletic clothes"),t.createElement("li",null,t.createElement("i",{className:"fas fa-shoe-prints"})," Appropriate footwear for ",r.sportType.toLowerCase()),"BASEBALL"===r.sportType&&t.createElement("li",null,t.createElement("i",{className:"fas fa-baseball-ball"})," Baseball glove (if you have one, we'll provide if needed)"),"SOCCER"===r.sportType&&t.createElement("li",null,t.createElement("i",{className:"fas fa-shield-alt"})," Shin guards (if you have them, we'll provide if needed)")))),!g&&t.createElement("div",{className:"card mb-4 fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h2",null,"Frequently Asked Questions")),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"accordion"},t.createElement("div",{className:"accordion-item"},t.createElement("button",{className:"accordion-toggle"},t.createElement("h4",null,"What age groups is this event for?"),t.createElement("i",{className:"fas fa-chevron-down"})),t.createElement("div",{className:"accordion-content"},t.createElement("p",null,"Our events are generally designed for children ages 6-14, but specific age requirements may vary by event. Please contact us if you have questions about your child's eligibility."))),t.createElement("div",{className:"accordion-item"},t.createElement("button",{className:"accordion-toggle"},t.createElement("h4",null,"Do I need to bring equipment?"),t.createElement("i",{className:"fas fa-chevron-down"})),t.createElement("div",{className:"accordion-content"},t.createElement("p",null,"While we encourage participants to bring their own equipment if they have it, we will provide all necessary equipment for those who need it."))),t.createElement("div",{className:"accordion-item"},t.createElement("button",{className:"accordion-toggle"},t.createElement("h4",null,"What if my child has special needs?"),t.createElement("i",{className:"fas fa-chevron-down"})),t.createElement("div",{className:"accordion-content"},t.createElement("p",null,"We strive to make our events inclusive for all children. Please note any special needs during registration, and we'll do our best to accommodate them."))),t.createElement("div",{className:"accordion-item"},t.createElement("button",{className:"accordion-toggle"},t.createElement("h4",null,"What if it rains?"),t.createElement("i",{className:"fas fa-chevron-down"})),t.createElement("div",{className:"accordion-content"},t.createElement("p",null,"In case of inclement weather, we will notify all registered participants of any changes via email. We may reschedule the event or move it to an indoor location if available."))))))),t.createElement("div",{className:"col-third"},t.createElement("div",{className:"card sticky-card slide-in-right"},t.createElement("div",{className:"card-header"},t.createElement("h3",null,"Registration")),t.createElement("div",{className:"card-body"},g?t.createElement("div",{className:"text-center"},t.createElement("div",{className:"status-icon past"},t.createElement("i",{className:"fas fa-history"})),t.createElement("p",null,"This event has already taken place."),t.createElement(be,{to:"/events",className:"btn btn-outline btn-block mt-3"},"View Upcoming Events")):t.createElement(t.Fragment,null,t.createElement("div",{className:"spots-indicator"},t.createElement("div",{className:"spots-label"},"Available Spots"),t.createElement("div",{className:"spots-count"},r.availableSpots||0),t.createElement("div",{className:"spots-progress"},t.createElement("div",{className:"spots-progress-bar",style:{width:"".concat(Math.max(0,Math.min(100,r.availableSpots/r.maxParticipants*100)),"%")}}))),r.availableSpots>0?f?t.createElement(be,{to:"/events/".concat(r.id,"/register"),className:"btn btn-primary btn-block mt-3 register-btn"},"Register Your Child"):t.createElement("div",{className:"login-prompt"},t.createElement("p",null,"Please login to register your child for this event."),t.createElement(be,{to:"/login?redirect=/events/".concat(r.id),className:"btn btn-primary btn-block mt-2"},"Login to Register"),t.createElement(be,{to:"/register",className:"btn btn-outline btn-block mt-2"},"Create an Account")):t.createElement("div",{className:"full-event"},t.createElement("div",{className:"status-icon full"},t.createElement("i",{className:"fas fa-users-slash"})),t.createElement("p",{className:"text-danger text-center"},"This event is currently full."),t.createElement("button",{className:"btn btn-outline btn-block mt-2"},"Join Waitlist"))))),r.needsVolunteers&&!g&&t.createElement("div",{className:"card mt-4 slide-in-right",style:{animationDelay:"0.2s"}},t.createElement("div",{className:"card-header volunteers-header"},t.createElement("h3",null,"Volunteer")),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"spots-indicator"},t.createElement("div",{className:"spots-label"},"Volunteers Needed"),t.createElement("div",{className:"spots-count"},r.volunteersNeeded||0)),r.volunteersNeeded>0?f?t.createElement(be,{to:"/events/".concat(r.id,"/volunteer"),className:"btn btn-secondary btn-block mt-3"},"Sign Up to Volunteer"):t.createElement("div",{className:"login-prompt"},t.createElement("p",null,"Please login to sign up as a volunteer."),t.createElement(be,{to:"/login?redirect=/events/".concat(r.id),className:"btn btn-secondary btn-block mt-2"},"Login to Volunteer")):t.createElement("div",{className:"text-center"},t.createElement("div",{className:"status-icon full"},t.createElement("i",{className:"fas fa-check-circle"})),t.createElement("p",null,"We have all the volunteers we need for this event!")))),t.createElement("div",{className:"card mt-4 slide-in-right",style:{animationDelay:"0.4s"}},t.createElement("div",{className:"card-header"},t.createElement("h3",null,"Share")),t.createElement("div",{className:"card-body"},t.createElement("button",{className:"btn btn-outline btn-block mb-2 social-share-btn"},t.createElement("i",{className:"fab fa-facebook-f mr-2"})," Share on Facebook"),t.createElement("button",{className:"btn btn-outline btn-block mb-2 social-share-btn"},t.createElement("i",{className:"fab fa-twitter mr-2"})," Share on Twitter"),t.createElement("button",{className:"btn btn-outline btn-block social-share-btn"},t.createElement("i",{className:"fas fa-envelope mr-2"})," Share via Email"))))))),t.createElement("style",{jsx:!0},"\n        .event-badge {\n          display: inline-block;\n          background-color: var(--secondary);\n          color: white;\n          padding: 0.4rem 1rem;\n          border-radius: 50px;\n          font-size: 0.9rem;\n          font-weight: 600;\n          margin-bottom: 1rem;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n        }\n        \n        .event-meta-highlights {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 1.5rem;\n          margin-top: 1.5rem;\n        }\n        \n        .event-meta-item {\n          display: flex;\n          align-items: center;\n          color: white;\n          background-color: rgba(255, 255, 255, 0.2);\n          padding: 0.5rem 1rem;\n          border-radius: 4px;\n        }\n        \n        .event-meta-item i {\n          margin-right: 0.5rem;\n          font-size: 1.2rem;\n        }\n        \n        .what-to-bring-list {\n          list-style: none;\n          padding: 0;\n        }\n        \n        .what-to-bring-list li {\n          padding: 0.5rem 0;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .what-to-bring-list li:last-child {\n          border-bottom: none;\n        }\n        \n        .what-to-bring-list li i {\n          margin-right: 0.8rem;\n          color: var(--primary);\n        }\n        \n        .accordion-item {\n          border: 1px solid #eee;\n          border-radius: 4px;\n          margin-bottom: 1rem;\n          overflow: hidden;\n        }\n        \n        .accordion-toggle {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          width: 100%;\n          text-align: left;\n          padding: 1rem;\n          background-color: #f8f8f8;\n          border: none;\n          cursor: pointer;\n          transition: background-color 0.3s ease;\n        }\n        \n        .accordion-toggle:hover {\n          background-color: #f1f1f1;\n        }\n        \n        .accordion-toggle h4 {\n          margin: 0;\n          font-size: 1.1rem;\n        }\n        \n        .accordion-content {\n          padding: 0 1rem;\n          max-height: 0;\n          overflow: hidden;\n          transition: max-height 0.3s ease, padding 0.3s ease;\n        }\n        \n        .accordion-item.active .accordion-content {\n          max-height: 200px;\n          padding: 1rem;\n        }\n        \n        .accordion-item.active .accordion-toggle i {\n          transform: rotate(180deg);\n        }\n        \n        .sticky-card {\n          position: sticky;\n          top: 100px;\n        }\n        \n        .spots-indicator {\n          text-align: center;\n          margin-bottom: 1rem;\n        }\n        \n        .spots-label {\n          font-size: 0.9rem;\n          margin-bottom: 0.3rem;\n          color: var(--text-light);\n        }\n        \n        .spots-count {\n          font-size: 2.5rem;\n          font-weight: 700;\n          color: var(--primary);\n        }\n        \n        .spots-progress {\n          height: 6px;\n          background-color: #eee;\n          border-radius: 3px;\n          margin-top: 0.5rem;\n          overflow: hidden;\n        }\n        \n        .spots-progress-bar {\n          height: 100%;\n          background-color: var(--primary);\n          transition: width 0.3s ease;\n        }\n        \n        .status-icon {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 60px;\n          height: 60px;\n          border-radius: 50%;\n          margin: 0 auto 1rem;\n          font-size: 1.5rem;\n        }\n        \n        .status-icon.past {\n          background-color: #f8f8f8;\n          color: var(--text-light);\n        }\n        \n        .status-icon.full {\n          background-color: #fff2f2;\n          color: var(--secondary);\n        }\n        \n        .login-prompt {\n          text-align: center;\n          padding: 1rem 0;\n        }\n        \n        .volunteers-header {\n          background-color: var(--secondary);\n        }\n        \n        .social-share-btn {\n          transition: all 0.3s ease;\n        }\n        \n        .social-share-btn:hover {\n          transform: translateY(-3px);\n        }\n        \n        .loading-spinner-container {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          height: 300px;\n        }\n        \n        .loading-spinner {\n          display: inline-block;\n          width: 50px;\n          height: 50px;\n          border: 3px solid rgba(47, 80, 106, 0.3);\n          border-radius: 50%;\n          border-top-color: var(--primary);\n          animation: spin 1s ease-in-out infinite;\n          margin-bottom: 1rem;\n        }\n        \n        .error-card {\n          text-align: center;\n        }\n        \n        .error-icon {\n          font-size: 3rem;\n          color: var(--secondary);\n          margin-bottom: 1rem;\n        }\n        \n        .register-btn {\n          animation: pulse 2s infinite;\n        }\n        \n        @keyframes pulse {\n          0% {\n            box-shadow: 0 0 0 0 rgba(47, 80, 106, 0.4);\n          }\n          70% {\n            box-shadow: 0 0 0 10px rgba(47, 80, 106, 0);\n          }\n          100% {\n            box-shadow: 0 0 0 0 rgba(47, 80, 106, 0);\n          }\n        }\n        \n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n        \n        @media (max-width: 768px) {\n          .event-meta-highlights {\n            flex-direction: column;\n            gap: 0.5rem;\n          }\n          \n          .sticky-card {\n            position: static;\n          }\n        }\n      "),t.createElement("script",null,"\n          document.addEventListener('DOMContentLoaded', function() {\n            const accordionToggles = document.querySelectorAll('.accordion-toggle');\n            \n            accordionToggles.forEach(toggle => {\n              toggle.addEventListener('click', function() {\n                const accordionItem = this.parentElement;\n                accordionItem.classList.toggle('active');\n              });\n            });\n          });\n        "))};function ui(e){return ui="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ui(e)}function di(){di=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==ui(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(ui(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function fi(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function hi(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){fi(o,r,a,i,s,"next",e)}function s(e){fi(o,r,a,i,s,"throw",e)}i(void 0)}))}}function mi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return pi(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const vi=function(){var e=Y().id,n=K(),r=mi((0,t.useState)(null),2),a=r[0],o=r[1],i=mi((0,t.useState)(!0),2),s=i[0],l=i[1],c=mi((0,t.useState)(null),2),u=c[0],d=c[1],f=mi((0,t.useState)(!1),2),h=f[0],m=f[1],p=mi((0,t.useState)(!1),2),v=p[0],g=p[1],y=mi((0,t.useState)(1),2),b=y[0],E=y[1],w=mi((0,t.useState)(""),2),k=w[0],N=w[1],S=mi((0,t.useState)(""),2),_=S[0],x=S[1],I=mi((0,t.useState)(""),2),C=I[0],T=I[1],L=mi((0,t.useState)(""),2),P=L[0],O=L[1],R=mi((0,t.useState)(""),2),A=R[0],D=R[1],j=mi((0,t.useState)(!1),2),M=j[0],F=j[1],U=mi((0,t.useState)(!1),2),z=U[0],V=U[1],B=mi((0,t.useState)({}),2),W=B[0],H=B[1];(0,t.useEffect)((function(){var t=localStorage.getItem("token");t?(q(),Q(t)):n("/login?redirect=/events/".concat(e,"/register"))}),[e,n]);var $,G,q=function(){var t=hi(di().mark((function t(){var n,r;return di().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("/api/events/".concat(e));case 3:if((n=t.sent).ok){t.next=6;break}throw new Error("Event not found");case 6:return t.next=8,n.json();case 8:if(!((r=t.sent).availableSpots<=0)){t.next=12;break}return d("This event is currently full. Please check other events."),t.abrupt("return");case 12:if(!(new Date(r.event.endDate)<new Date)){t.next=15;break}return d("Registration is closed for this event."),t.abrupt("return");case 15:o(r.event),t.next=22;break;case 18:t.prev=18,t.t0=t.catch(0),console.error("Error fetching event details:",t.t0),d(t.t0.message);case 22:return t.prev=22,l(!1),t.finish(22);case 25:case"end":return t.stop()}}),t,null,[[0,18,22,25]])})));return function(){return t.apply(this,arguments)}}(),Q=function(){var e=hi(di().mark((function e(t){var n,r;return di().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("/api/auth/profile",{headers:{Authorization:"Bearer ".concat(t)}});case 3:if(!(n=e.sent).ok){e.next=9;break}return e.next=7,n.json();case 7:(r=e.sent).phoneNumber&&D(r.phoneNumber);case 9:e.next=14;break;case 11:e.prev=11,e.t0=e.catch(0),console.error("Error fetching user profile:",e.t0);case 14:case"end":return e.stop()}}),e,null,[[0,11]])})));return function(t){return e.apply(this,arguments)}}(),J=function(){var e;1===b&&(e={},k.trim()||(e.childFirstName="First name is required"),_.trim()||(e.childLastName="Last name is required"),C?(isNaN(C)||C<1||C>18)&&(e.childAge="Please enter a valid age between 1 and 18"):e.childAge="Age is required",H(e),0===Object.keys(e).length)&&(E(2),window.scrollTo(0,0))},X=function(){E(1),window.scrollTo(0,0)},Z=function(){var t=hi(di().mark((function t(r){var a,o,i;return di().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r.preventDefault(),1!==b){t.next=4;break}return J(),t.abrupt("return");case 4:if(s=void 0,s={},A.trim()||(s.emergencyContact="Emergency contact is required"),M||(s.agreeTerms="You must acknowledge that you are the parent/guardian"),z||(s.agreePhotos="You must acknowledge the photo policy"),H(s),0===Object.keys(s).length){t.next=6;break}return t.abrupt("return");case 6:return m(!0),t.prev=7,a=localStorage.getItem("token"),t.next=11,fetch("/api/events/".concat(e,"/participants"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(a)},body:JSON.stringify({childFirstName:k,childLastName:_,childAge:parseInt(C),specialNeeds:P||"None",emergencyContact:A})});case 11:if((o=t.sent).ok){t.next=17;break}return t.next=15,o.json();case 15:throw i=t.sent,new Error(i.message||"Registration failed");case 17:g(!0),N(""),x(""),T(""),O(""),setTimeout((function(){n("/events/".concat(e,"/confirmation"))}),2e3),t.next=29;break;case 25:t.prev=25,t.t0=t.catch(7),console.error("Error registering for event:",t.t0),d(t.t0.message);case 29:return t.prev=29,m(!1),t.finish(29);case 32:case"end":return t.stop()}var s}),t,null,[[7,25,29,32]])})));return function(e){return t.apply(this,arguments)}}();return s?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"loading-container"},t.createElement("div",{className:"loading-spinner"}),t.createElement("p",null,"Loading event details...")))):u?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card"},t.createElement("div",{className:"card-body text-center"},t.createElement("div",{className:"error-icon"},t.createElement("i",{className:"fas fa-exclamation-circle"})),t.createElement("h2",null,"Registration Error"),t.createElement("p",null,u),t.createElement(be,{to:"/events",className:"btn btn-primary"},"Browse Other Events"))))):v?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card"},t.createElement("div",{className:"card-body text-center"},t.createElement("div",{className:"success-icon"},t.createElement("i",{className:"fas fa-check-circle"})),t.createElement("h2",null,"Registration Successful!"),t.createElement("p",{className:"lead"},"Thank you for registering your child for ",a.title,"."),t.createElement("p",null,"Redirecting to confirmation page..."),t.createElement("div",{className:"loading-dots"},t.createElement("span",null),t.createElement("span",null),t.createElement("span",null)))))):t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"registration-progress-container"},t.createElement("div",{className:"registration-progress"},t.createElement("div",{className:"progress-step ".concat(b>=1?"active":""," ").concat(b>1?"completed":""),onClick:function(){return b>1&&X()}},t.createElement("div",{className:"step-number"},"1"),t.createElement("div",{className:"step-label"},"Child Information")),t.createElement("div",{className:"progress-line"},t.createElement("div",{className:"progress-line-inner ".concat(b>1?"completed":"")})),t.createElement("div",{className:"progress-step ".concat(b>=2?"active":"")},t.createElement("div",{className:"step-number"},"2"),t.createElement("div",{className:"step-label"},"Emergency Contact")))),t.createElement("div",{className:"card mb-4 fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h1",null,"Register for ",a.title)),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"row mb-4"},t.createElement("div",{className:"col"},t.createElement("div",{className:"event-summary"},t.createElement("div",{className:"event-icon"},t.createElement("i",{className:"fas fa-".concat((G=a.sportType,G&&{BASEBALL:"baseball-ball",SOCCER:"futbol",BASKETBALL:"basketball-ball",VOLLEYBALL:"volleyball-ball",FOOTBALL:"football-ball",TENNIS:"tennis-ball"}[G]||"running"))})),t.createElement("div",{className:"event-details"},t.createElement("h3",null,"Event Details"),t.createElement("p",null,t.createElement("strong",null,"Date:")," ",($=a.startDate,new Date($).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}))),t.createElement("p",null,t.createElement("strong",null,"Location:")," ",a.location),t.createElement("p",null,t.createElement("strong",null,"Sport:")," ",a.sportType))))),t.createElement("form",{onSubmit:Z},1===b&&t.createElement("div",{className:"step-content fade-in"},t.createElement("h3",null,"Child Information"),t.createElement("div",{className:"row"},t.createElement("div",{className:"col-half"},t.createElement("div",{className:"form-floating"},t.createElement("input",{type:"text",id:"childFirstName",className:"form-control ".concat(W.childFirstName?"is-invalid":""),value:k,onChange:function(e){return N(e.target.value)},placeholder:" "}),t.createElement("label",{htmlFor:"childFirstName"},"First Name*"),W.childFirstName&&t.createElement("div",{className:"invalid-feedback"},W.childFirstName))),t.createElement("div",{className:"col-half"},t.createElement("div",{className:"form-floating"},t.createElement("input",{type:"text",id:"childLastName",className:"form-control ".concat(W.childLastName?"is-invalid":""),value:_,onChange:function(e){return x(e.target.value)},placeholder:" "}),t.createElement("label",{htmlFor:"childLastName"},"Last Name*"),W.childLastName&&t.createElement("div",{className:"invalid-feedback"},W.childLastName)))),t.createElement("div",{className:"row mt-3"},t.createElement("div",{className:"col-half"},t.createElement("div",{className:"form-floating"},t.createElement("input",{type:"number",id:"childAge",className:"form-control ".concat(W.childAge?"is-invalid":""),min:"1",max:"18",value:C,onChange:function(e){return T(e.target.value)},placeholder:" "}),t.createElement("label",{htmlFor:"childAge"},"Age*"),W.childAge&&t.createElement("div",{className:"invalid-feedback"},W.childAge)))),t.createElement("div",{className:"form-group mt-3"},t.createElement("label",{htmlFor:"specialNeeds"},"Special Needs or Accommodations"),t.createElement("textarea",{id:"specialNeeds",className:"form-control",rows:"3",value:P,onChange:function(e){return O(e.target.value)},placeholder:"Please share any allergies, medical conditions, or other information that would help us better support your child"}),t.createElement("small",{className:"form-text text-muted"},"This information helps us prepare appropriately for your child's participation."))),2===b&&t.createElement("div",{className:"step-content fade-in"},t.createElement("h3",null,"Emergency Contact"),t.createElement("div",{className:"form-floating mt-3"},t.createElement("input",{type:"text",id:"emergencyContact",className:"form-control ".concat(W.emergencyContact?"is-invalid":""),value:A,onChange:function(e){return D(e.target.value)},placeholder:" "}),t.createElement("label",{htmlFor:"emergencyContact"},"Emergency Contact Number*"),W.emergencyContact&&t.createElement("div",{className:"invalid-feedback"},W.emergencyContact)),t.createElement("div",{className:"form-check mt-4 ".concat(W.agreeTerms?"is-invalid":"")},t.createElement("input",{type:"checkbox",className:"form-check-input",id:"agreeTerms",checked:M,onChange:function(e){return F(e.target.checked)}}),t.createElement("label",{className:"form-check-label",htmlFor:"agreeTerms"},"I acknowledge that I am the parent/guardian of the child being registered and authorize their participation in this event."),W.agreeTerms&&t.createElement("div",{className:"invalid-feedback"},W.agreeTerms)),t.createElement("div",{className:"form-check mt-3 ".concat(W.agreePhotos?"is-invalid":"")},t.createElement("input",{type:"checkbox",className:"form-check-input",id:"agreePhotos",checked:z,onChange:function(e){return V(e.target.checked)}}),t.createElement("label",{className:"form-check-label",htmlFor:"agreePhotos"},"I understand that photos may be taken during the event for promotional purposes."),W.agreePhotos&&t.createElement("div",{className:"invalid-feedback"},W.agreePhotos))),t.createElement("div",{className:"form-nav mt-4"},b>1&&t.createElement("button",{type:"button",className:"btn btn-outline",onClick:X},t.createElement("i",{className:"fas fa-arrow-left mr-2"})," Previous"),t.createElement("button",{type:"submit",className:"btn ".concat(1===b?"btn-outline":"btn-primary"),disabled:h},h?t.createElement(t.Fragment,null,t.createElement("span",{className:"spinner-border spinner-border-sm mr-2",role:"status","aria-hidden":"true"}),"Submitting..."):1===b?t.createElement(t.Fragment,null,"Next ",t.createElement("i",{className:"fas fa-arrow-right ml-2"})):"Complete Registration"),t.createElement(be,{to:"/events/".concat(e),className:"btn btn-link"},"Cancel")))))),t.createElement("style",{jsx:!0},"\n        .registration-progress-container {\n          padding: 2rem 0;\n        }\n        \n        .registration-progress {\n          display: flex;\n          align-items: center;\n          max-width: 500px;\n          margin: 0 auto;\n        }\n        \n        .progress-step {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          position: relative;\n          z-index: 1;\n        }\n        \n        .progress-step.completed {\n          cursor: pointer;\n        }\n        \n        .step-number {\n          width: 40px;\n          height: 40px;\n          border-radius: 50%;\n          background-color: #eee;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-bottom: 8px;\n          font-weight: 600;\n          transition: all 0.3s ease;\n        }\n        \n        .progress-step.active .step-number {\n          background-color: var(--primary);\n          color: white;\n        }\n        \n        .progress-step.completed .step-number {\n          background-color: var(--primary);\n          color: white;\n        }\n        \n        .step-label {\n          font-size: 0.9rem;\n          font-weight: 500;\n          text-align: center;\n        }\n        \n        .progress-line {\n          flex: 1;\n          height: 3px;\n          background-color: #eee;\n          position: relative;\n          z-index: 0;\n        }\n        \n        .progress-line-inner {\n          height: 100%;\n          width: 0;\n          background-color: var(--primary);\n          transition: width 0.5s ease;\n        }\n        \n        .progress-line-inner.completed {\n          width: 100%;\n        }\n        \n        .event-summary {\n          display: flex;\n          align-items: center;\n          padding: 1.5rem;\n          background-color: #f8f8f8;\n          border-radius: 8px;\n        }\n        \n        .event-icon {\n          width: 60px;\n          height: 60px;\n          border-radius: 50%;\n          background-color: var(--primary);\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin-right: 1.5rem;\n          font-size: 1.5rem;\n        }\n        \n        .event-details {\n          flex: 1;\n        }\n        \n        .event-details h3 {\n          margin-bottom: 0.5rem;\n        }\n        \n        .step-content {\n          animation: fadeIn 0.5s ease;\n        }\n        \n        .form-nav {\n          display: flex;\n          justify-content: space-between;\n          margin-top: 2rem;\n        }\n        \n        .loading-container {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          height: 300px;\n        }\n        \n        .loading-spinner {\n          width: 50px;\n          height: 50px;\n          border: 3px solid rgba(47, 80, 106, 0.3);\n          border-radius: 50%;\n          border-top-color: var(--primary);\n          animation: spin 1s ease-in-out infinite;\n          margin-bottom: 1rem;\n        }\n        \n        .error-icon, .success-icon {\n          font-size: 4rem;\n          margin-bottom: 1.5rem;\n        }\n        \n        .error-icon {\n          color: var(--secondary);\n        }\n        \n        .success-icon {\n          color: #28a745;\n        }\n        \n        .loading-dots {\n          display: flex;\n          justify-content: center;\n          margin-top: 1rem;\n        }\n        \n        .loading-dots span {\n          width: 10px;\n          height: 10px;\n          margin: 0 5px;\n          background-color: var(--primary);\n          border-radius: 50%;\n          display: inline-block;\n          animation: dots 1.5s infinite ease-in-out;\n        }\n        \n        .loading-dots span:nth-child(2) {\n          animation-delay: 0.5s;\n        }\n        \n        .loading-dots span:nth-child(3) {\n          animation-delay: 1s;\n        }\n        \n        .mr-2 {\n          margin-right: 0.5rem;\n        }\n        \n        .ml-2 {\n          margin-left: 0.5rem;\n        }\n        \n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(20px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n        \n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n        \n        @keyframes dots {\n          0%, 80%, 100% { transform: scale(0); }\n          40% { transform: scale(1); }\n        }\n        \n        @media (max-width: 768px) {\n          .event-summary {\n            flex-direction: column;\n            text-align: center;\n          }\n          \n          .event-icon {\n            margin-right: 0;\n            margin-bottom: 1rem;\n          }\n          \n          .form-nav {\n            flex-direction: column;\n            gap: 1rem;\n          }\n          \n          .form-nav button, .form-nav a {\n            width: 100%;\n          }\n        }\n      "))};function gi(e){return gi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gi(e)}function yi(){yi=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==gi(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(gi(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function bi(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function Ei(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){bi(o,r,a,i,s,"next",e)}function s(e){bi(o,r,a,i,s,"throw",e)}i(void 0)}))}}function wi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||ki(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ki(e,t){if(e){if("string"==typeof e)return Ni(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ni(e,t):void 0}}function Ni(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Si=function(){var e=Y().id,n=K(),r=wi((0,t.useState)(null),2),a=r[0],o=r[1],i=wi((0,t.useState)(!0),2),s=i[0],l=i[1],c=wi((0,t.useState)(null),2),u=c[0],d=c[1],f=wi((0,t.useState)(!1),2),h=f[0],m=f[1],p=wi((0,t.useState)(!1),2),v=p[0],g=p[1],y=wi((0,t.useState)(""),2),b=y[0],E=y[1],w=wi((0,t.useState)("FULL_EVENT"),2),k=w[0],N=w[1],S=wi((0,t.useState)([]),2),_=S[0],x=S[1],I=wi((0,t.useState)({}),2),C=I[0],T=I[1];(0,t.useEffect)((function(){localStorage.getItem("token")?P():n("/login?redirect=/events/".concat(e,"/volunteer"))}),[e]);var L,P=function(){var t=Ei(yi().mark((function t(){var n,r;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("/api/events/".concat(e));case 3:if((n=t.sent).ok){t.next=6;break}throw new Error("Event not found");case 6:return t.next=8,n.json();case 8:if((r=t.sent).event.needsVolunteers&&!(r.volunteersNeeded<=0)){t.next=12;break}return d("This event is no longer looking for volunteers."),t.abrupt("return");case 12:if(!(new Date(r.event.endDate)<new Date)){t.next=15;break}return d("Volunteer sign-up is closed for this event."),t.abrupt("return");case 15:o(r.event),t.next=22;break;case 18:t.prev=18,t.t0=t.catch(0),console.error("Error fetching event details:",t.t0),d(t.t0.message);case 22:return t.prev=22,l(!1),t.finish(22);case 25:case"end":return t.stop()}}),t,null,[[0,18,22,25]])})));return function(){return t.apply(this,arguments)}}(),O=function(){var t=Ei(yi().mark((function t(r){var a,o,i,s;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(r.preventDefault(),l=void 0,l={},0===_.length&&(l.skills="Please select at least one skill or area of interest"),T(l),0===Object.keys(l).length){t.next=3;break}return t.abrupt("return");case 3:return m(!0),t.prev=4,a=localStorage.getItem("token"),o="Skills: ".concat(_.join(", "),"\nAvailability: ").concat(k,"\n").concat(b),t.next=9,fetch("/api/events/".concat(e,"/volunteers"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(a)},body:JSON.stringify({notes:o})});case 9:if((i=t.sent).ok){t.next=15;break}return t.next=13,i.json();case 13:throw s=t.sent,new Error(s.message||"Volunteer sign-up failed");case 15:g(!0),setTimeout((function(){n("/dashboard")}),2e3),t.next=23;break;case 19:t.prev=19,t.t0=t.catch(4),console.error("Error signing up as volunteer:",t.t0),d(t.t0.message);case 23:return t.prev=23,m(!1),t.finish(23);case 26:case"end":return t.stop()}var l}),t,null,[[4,19,23,26]])})));return function(e){return t.apply(this,arguments)}}();return s?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("p",null,"Loading event details..."))):u?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card"},t.createElement("div",{className:"card-body"},t.createElement("h2",null,"Volunteer Sign-Up Error"),t.createElement("p",null,u),t.createElement("a",{href:"/events",className:"btn btn-primary"},"Browse Events"))))):v?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card"},t.createElement("div",{className:"card-body text-center"},t.createElement("h2",null,"Thank You for Volunteering!"),t.createElement("p",null,"Your volunteer application for ",a.title," has been submitted."),t.createElement("p",null,"We'll contact you soon with more details."),t.createElement("p",null,"Redirecting to your dashboard..."))))):t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card mb-4"},t.createElement("div",{className:"card-header"},t.createElement("h1",null,"Volunteer for ",a.title)),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"row mb-4"},t.createElement("div",{className:"col"},t.createElement("h3",null,"Event Details"),t.createElement("p",null,t.createElement("strong",null,"Date:")," ",(L=a.startDate,new Date(L).toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"}))),t.createElement("p",null,t.createElement("strong",null,"Location:")," ",a.location),t.createElement("p",null,t.createElement("strong",null,"Sport:")," ",a.sportType),t.createElement("p",null,t.createElement("strong",null,"Volunteers Needed:")," ",a.volunteerCountNeeded))),t.createElement("form",{onSubmit:O},t.createElement("h3",null,"Volunteer Information"),t.createElement("div",{className:"form-group"},t.createElement("label",null,"Skills and Interests*"),t.createElement("div",{className:"checkbox-group ".concat(C.skills?"is-invalid":"")},[{value:"COACHING",label:"Coaching/Teaching"},{value:"FIRST_AID",label:"First Aid/CPR Certified"},{value:"PHOTOGRAPHY",label:"Photography"},{value:"EQUIPMENT",label:"Equipment Management"},{value:"SETUP",label:"Setup/Teardown"},{value:"SUPERVISION",label:"Child Supervision"}].map((function(e){return t.createElement("div",{key:e.value},t.createElement("label",null,t.createElement("input",{type:"checkbox",value:e.value,checked:_.includes(e.value),onChange:function(){return n=e.value,void(_.includes(n)?x(_.filter((function(e){return e!==n}))):x([].concat((t=_,function(e){if(Array.isArray(e))return Ni(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||ki(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),[n])));var t,n}})," ",e.label))}))),C.skills&&t.createElement("div",{className:"invalid-feedback"},C.skills)),t.createElement("div",{className:"form-group"},t.createElement("label",{htmlFor:"availability"},"Availability"),t.createElement("select",{id:"availability",className:"form-control",value:k,onChange:function(e){return N(e.target.value)}},[{value:"FULL_EVENT",label:"Available for the full event"},{value:"SETUP_ONLY",label:"Available for setup only"},{value:"TEARDOWN_ONLY",label:"Available for teardown only"},{value:"PARTIAL",label:"Available for part of the event"}].map((function(e){return t.createElement("option",{key:e.value,value:e.value},e.label)})))),t.createElement("div",{className:"form-group"},t.createElement("label",{htmlFor:"notes"},"Additional Notes"),t.createElement("textarea",{id:"notes",className:"form-control",rows:"3",value:b,onChange:function(e){return E(e.target.value)},placeholder:"Please share any relevant experience, special skills, or other information that would help us assign you an appropriate role."})),t.createElement("div",{className:"form-group"},t.createElement("label",null,t.createElement("input",{type:"checkbox",required:!0})," I understand that as a volunteer, I will be expected to follow the Kids in Motion volunteer guidelines.")),t.createElement("div",{className:"form-group"},t.createElement("label",null,t.createElement("input",{type:"checkbox",required:!0})," I understand that a background check may be required for certain volunteer positions involving direct supervision of children.")),t.createElement("div",{className:"mt-3"},t.createElement("button",{type:"submit",className:"btn btn-secondary",disabled:h},h?"Submitting...":"Sign Up to Volunteer"),t.createElement("a",{href:"/events/".concat(e),className:"btn btn-outline ml-2"},"Cancel")))))))};function _i(e){return _i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_i(e)}function xi(){xi=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==_i(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(_i(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Ii(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function Ci(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Ii(o,r,a,i,s,"next",e)}function s(e){Ii(o,r,a,i,s,"throw",e)}i(void 0)}))}}function Ti(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Li(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Li(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Li(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Pi=function(){var e=K(),n=G(),r=Ti((0,t.useState)(""),2),a=r[0],o=r[1],i=Ti((0,t.useState)(""),2),s=i[0],l=i[1],c=Ti((0,t.useState)(!1),2),u=c[0],d=c[1],f=Ti((0,t.useState)(null),2),h=f[0],m=f[1],p=Ti((0,t.useState)({}),2),v=p[0],g=p[1],y=new URLSearchParams(n.search).get("redirect")||"/dashboard";(0,t.useEffect)((function(){d(!0);var t=ma(To,(function(t){t?(console.log("User already signed in:",t),e(y,{replace:!0})):(console.log("User not signed in."),d(!1))}));return function(){return t()}}),[e,y]);var b=function(){var e=Ci(xi().mark((function e(t){var n;return xi().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),r=void 0,r={},a.trim()?/\S+@\S+\.\S+/.test(a)||(r.email="Email is invalid"):r.email="Email is required",s||(r.password="Password is required"),g(r),0===Object.keys(r).length){e.next=3;break}return e.abrupt("return");case 3:return d(!0),m(null),e.prev=5,e.next=8,fa(To,a,s);case 8:n=e.sent,console.log("Email/Password Sign in successful:",n.user),e.next=17;break;case 12:e.prev=12,e.t0=e.catch(5),console.error("Login error:",e.t0),m(e.t0.message||"Login failed. Please check your credentials."),d(!1);case 17:case"end":return e.stop()}var r}),e,null,[[5,12]])})));return function(t){return e.apply(this,arguments)}}(),E=function(){var e=Ci(xi().mark((function e(){var t,n,r,a,o;return xi().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return d(!0),m(null),t=new ta,e.prev=3,e.next=6,Qa(To,t);case 6:n=e.sent,r=n.user,console.log("Google Sign in successful:",r),e.next=18;break;case 11:e.prev=11,e.t0=e.catch(3),a=e.t0.code,o=e.t0.message,console.error("Google Sign in error:",a,o),m(o||"Google Sign-in failed."),d(!1);case 18:case"end":return e.stop()}}),e,null,[[3,11]])})));return function(){return e.apply(this,arguments)}}();return u&&!h?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4 text-center"},t.createElement("p",null,"Loading..."))):t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-md-6 offset-md-3"}," ",t.createElement("div",{className:"card shadow-sm"}," ",t.createElement("div",{className:"card-header bg-primary text-white"}," ",t.createElement("h1",{className:"mb-0"},"Login")),t.createElement("div",{className:"card-body"},h&&t.createElement("div",{className:"alert alert-danger",role:"alert"},h),t.createElement("form",{onSubmit:b},t.createElement("div",{className:"form-group mb-3"}," ",t.createElement("label",{htmlFor:"email"},"Email"),t.createElement("input",{type:"email",id:"email",className:"form-control ".concat(v.email?"is-invalid":""),value:a,onChange:function(e){return o(e.target.value)},required:!0}),v.email&&t.createElement("div",{className:"invalid-feedback"},v.email)),t.createElement("div",{className:"form-group mb-3"}," ",t.createElement("label",{htmlFor:"password"},"Password"),t.createElement("input",{type:"password",id:"password",className:"form-control ".concat(v.password?"is-invalid":""),value:s,onChange:function(e){return l(e.target.value)},required:!0}),v.password&&t.createElement("div",{className:"invalid-feedback"},v.password)),t.createElement("div",{className:"d-grid gap-2 mb-3"}," ",t.createElement("button",{type:"submit",className:"btn btn-primary",disabled:u},u?"Logging in...":"Login with Email"))),t.createElement("div",{className:"text-center mb-3"}," ",t.createElement("span",{className:"text-muted"},"OR")),t.createElement("div",{className:"d-grid gap-2 mb-3"}," ",t.createElement("button",{onClick:E,className:"btn btn-danger",disabled:u}," ",u?"Signing in...":"Sign in with Google")),t.createElement("div",{className:"mt-3 text-center"},t.createElement("p",null,"Don't have an account? ",t.createElement(be,{to:"/register"},"Register")))))))))};function Oi(e){return Oi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Oi(e)}function Ri(){Ri=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Oi(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Oi(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Ai(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function Di(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ji(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Di(Object(n),!0).forEach((function(t){Mi(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Di(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Mi(e,t,n){return(t=function(e){var t=function(e){if("object"!=Oi(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Oi(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Oi(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Fi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ui(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ui(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ui(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const zi=function(){var e=K(),n=Fi((0,t.useState)({firstName:"",lastName:"",email:"",password:"",confirmPassword:"",phoneNumber:"",role:"PARENT"}),2),r=n[0],a=n[1],o=Fi((0,t.useState)(!1),2),i=o[0],s=o[1],l=Fi((0,t.useState)(null),2),c=l[0],u=l[1],d=Fi((0,t.useState)({}),2),f=d[0],h=d[1],m=function(e){var t=e.target,n=t.name,r=t.value;a((function(e){return ji(ji({},e),{},Mi({},n,r))}))},p=function(){var t,n=(t=Ri().mark((function t(n){var a,o,i,l,c,d;return Ri().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n.preventDefault(),f=void 0,m=void 0,p=void 0,v=void 0,void 0,void 0,b=void 0,f={},m=r.firstName,p=r.lastName,v=r.email,g=r.password,y=r.confirmPassword,b=r.phoneNumber,m.trim()||(f.firstName="First name is required"),p.trim()||(f.lastName="Last name is required"),v.trim()?/\S+@\S+\.\S+/.test(v)||(f.email="Email is invalid"):f.email="Email is required",g?g.length<6&&(f.password="Password must be at least 6 characters"):f.password="Password is required",g!==y&&(f.confirmPassword="Passwords do not match"),b.trim()||(f.phoneNumber="Phone number is required"),h(f),0===Object.keys(f).length){t.next=3;break}return t.abrupt("return");case 3:return s(!0),u(null),t.prev=5,t.next=8,da(To,r.email,r.password);case 8:return a=t.sent,o=a.user,console.log("Firebase user created:",o),t.next=13,ha(o,{displayName:"".concat(r.firstName," ").concat(r.lastName)});case 13:return console.log("Firebase profile updated with display name."),i={firebaseUid:o.uid,firstName:r.firstName,lastName:r.lastName,email:r.email,phoneNumber:r.phoneNumber,role:r.role},t.next=17,fetch("/api/users/register-profile",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)});case 17:if((l=t.sent).ok){t.next=24;break}return t.next=21,l.json();case 21:throw c=t.sent,console.error("Backend profile creation failed:",c),new Error(c.message||"Failed to save user profile information.");case 24:console.log("Backend profile created successfully."),e("/dashboard"),t.next=35;break;case 28:t.prev=28,t.t0=t.catch(5),console.error("Registration error:",t.t0),d="Registration failed. Please try again.","auth/email-already-in-use"===t.t0.code?d="This email address is already registered. Please login or use a different email.":"auth/weak-password"===t.t0.code?d="Password is too weak. Please choose a stronger password.":t.t0.message.includes("Failed to save user profile")&&(d=t.t0.message),u(d),s(!1);case 35:case"end":return t.stop()}var f,m,p,v,g,y,b}),t,null,[[5,28]])})),function(){var e=this,n=arguments;return new Promise((function(r,a){var o=t.apply(e,n);function i(e){Ai(o,r,a,i,s,"next",e)}function s(e){Ai(o,r,a,i,s,"throw",e)}i(void 0)}))});return function(e){return n.apply(this,arguments)}}();return t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-md-8 offset-md-2"}," ",t.createElement("div",{className:"card shadow-sm"},t.createElement("div",{className:"card-header bg-primary text-white"},t.createElement("h1",{className:"mb-0"},"Create an Account")),t.createElement("div",{className:"card-body"},c&&t.createElement("div",{className:"alert alert-danger",role:"alert"},c),t.createElement("form",{onSubmit:p,noValidate:!0}," ",t.createElement("h3",{className:"mb-3"},"Personal Information"),t.createElement("div",{className:"row mb-3"},t.createElement("div",{className:"col-md-6"},t.createElement("div",{className:"form-group"},t.createElement("label",{htmlFor:"firstName"},"First Name*"),t.createElement("input",{type:"text",id:"firstName",name:"firstName",className:"form-control ".concat(f.firstName?"is-invalid":""),value:r.firstName,onChange:m,required:!0}),f.firstName&&t.createElement("div",{className:"invalid-feedback"},f.firstName))),t.createElement("div",{className:"col-md-6"},t.createElement("div",{className:"form-group"},t.createElement("label",{htmlFor:"lastName"},"Last Name*"),t.createElement("input",{type:"text",id:"lastName",name:"lastName",className:"form-control ".concat(f.lastName?"is-invalid":""),value:r.lastName,onChange:m,required:!0}),f.lastName&&t.createElement("div",{className:"invalid-feedback"},f.lastName)))),t.createElement("div",{className:"form-group mb-3"},t.createElement("label",{htmlFor:"email"},"Email*"),t.createElement("input",{type:"email",id:"email",name:"email",className:"form-control ".concat(f.email?"is-invalid":""),value:r.email,onChange:m,required:!0}),f.email&&t.createElement("div",{className:"invalid-feedback"},f.email)),t.createElement("div",{className:"form-group mb-3"},t.createElement("label",{htmlFor:"phoneNumber"},"Phone Number*"),t.createElement("input",{type:"tel",id:"phoneNumber",name:"phoneNumber",className:"form-control ".concat(f.phoneNumber?"is-invalid":""),value:r.phoneNumber,onChange:m,placeholder:"XXX-XXX-XXXX",required:!0}),f.phoneNumber&&t.createElement("div",{className:"invalid-feedback"},f.phoneNumber)),t.createElement("div",{className:"form-group mb-3"},t.createElement("label",{htmlFor:"role"},"I am registering as a:"),t.createElement("select",{id:"role",name:"role",className:"form-select",value:r.role,onChange:m},t.createElement("option",{value:"PARENT"},"Parent/Guardian"),t.createElement("option",{value:"VOLUNTEER"},"Volunteer"))),t.createElement("h3",{className:"mt-4 mb-3"},"Account Security"),t.createElement("div",{className:"form-group mb-3"},t.createElement("label",{htmlFor:"password"},"Password*"),t.createElement("input",{type:"password",id:"password",name:"password",className:"form-control ".concat(f.password?"is-invalid":""),value:r.password,onChange:m,required:!0}),f.password&&t.createElement("div",{className:"invalid-feedback"},f.password),t.createElement("small",{className:"form-text text-muted"},"Password must be at least 6 characters long.")),t.createElement("div",{className:"form-group mb-3"},t.createElement("label",{htmlFor:"confirmPassword"},"Confirm Password*"),t.createElement("input",{type:"password",id:"confirmPassword",name:"confirmPassword",className:"form-control ".concat(f.confirmPassword?"is-invalid":""),value:r.confirmPassword,onChange:m,required:!0}),f.confirmPassword&&t.createElement("div",{className:"invalid-feedback"},f.confirmPassword)),t.createElement("div",{className:"form-check mb-3"}," ",t.createElement("input",{className:"form-check-input",type:"checkbox",value:"",id:"termsCheck",required:!0}),t.createElement("label",{className:"form-check-label",htmlFor:"termsCheck"},"I agree to the ",t.createElement(be,{to:"/terms",target:"_blank"},"Terms and Conditions")," and ",t.createElement(be,{to:"/privacy",target:"_blank"},"Privacy Policy"),".")),t.createElement("div",{className:"d-grid gap-2"},t.createElement("button",{type:"submit",className:"btn btn-primary",disabled:i},i?"Creating Account...":"Create Account"))),t.createElement("div",{className:"mt-3 text-center"},t.createElement("p",null,"Already have an account? ",t.createElement(be,{to:"/login"},"Login")))))))))};function Vi(e){return Vi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vi(e)}function Bi(){Bi=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,i=Object.create(o.prototype),s=new L(r||[]);return a(i,"_invoke",{value:x(e,n,s)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",m="executing",p="completed",v={};function g(){}function y(){}function b(){}var E={};c(E,i,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==n&&r.call(k,i)&&(E=k);var N=b.prototype=g.prototype=Object.create(E);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function n(a,o,i,s){var l=d(e[a],e,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Vi(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(u).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(l.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===m)throw Error("Generator is already running");if(a===p){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var s=r.delegate;if(s){var l=I(s,r);if(l){if(l===v)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=m;var c=d(t,n,r);if("normal"===c.type){if(a=r.done?p:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=p,r.method="throw",r.arg=c.arg)}}}function I(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,I(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(Vi(t)+" is not iterable")}return y.prototype=b,a(N,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,l,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,l,"GeneratorFunction")),e.prototype=Object.create(N),e},t.awrap=function(e){return{__await:e}},S(_.prototype),c(_.prototype,s,(function(){return this})),t.AsyncIterator=_,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new _(u(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(N),c(N,l,"Generator"),c(N,i,(function(){return this})),c(N,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return s.type="throw",s.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],s=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;T(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Wi(e,t,n,r,a,o,i){try{var s=e[o](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,a)}function Hi(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Wi(o,r,a,i,s,"next",e)}function s(e){Wi(o,r,a,i,s,"throw",e)}i(void 0)}))}}function $i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw a}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Gi(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Gi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Gi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function qi(e){return e?new Date(e).toLocaleString("default",{month:"short"}):"TBD"}function Ki(e){return e?new Date(e).getDate():"TBD"}const Yi=function(){var e,n,r=K(),a=$i((0,t.useState)(null),2),o=a[0],i=a[1],s=$i((0,t.useState)([]),2),l=s[0],c=s[1],u=$i((0,t.useState)([]),2),d=u[0],f=u[1],h=$i((0,t.useState)(!0),2),m=h[0],p=h[1],v=$i((0,t.useState)(null),2),g=v[0],y=v[1],b=$i((0,t.useState)("registrations"),2),E=b[0],w=b[1],k=$i((0,t.useState)(!1),2),N=k[0],S=k[1],_=$i((0,t.useState)(null),2),x=_[0],I=_[1],C=$i((0,t.useState)(null),2),T=C[0],L=C[1];(0,t.useEffect)((function(){var e=localStorage.getItem("token");e?P(e):r("/login")}),[r]);var P=function(){var e=Hi(Bi().mark((function e(t){var n,a,o,s,l,u,d;return Bi().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("/api/auth/profile",{headers:{Authorization:"Bearer ".concat(t)}});case 3:if((n=e.sent).ok){e.next=9;break}return e.next=7,n.text();case 7:throw a=e.sent,new Error("Failed to fetch user profile: ".concat(n.status," ").concat(n.statusText,". ").concat(a));case 9:return e.next=11,n.json();case 11:return o=e.sent,i(o),e.next=15,fetch("/api/participants/me",{headers:{Authorization:"Bearer ".concat(t)}});case 15:if(!(s=e.sent).ok){e.next=21;break}return e.next=19,s.json();case 19:l=e.sent,c(l);case 21:return e.next=23,fetch("/api/volunteers/me",{headers:{Authorization:"Bearer ".concat(t)}});case 23:if(!(u=e.sent).ok){e.next=29;break}return e.next=27,u.json();case 27:d=e.sent,f(d);case 29:e.next=36;break;case 31:e.prev=31,e.t0=e.catch(0),console.error("Error fetching user data:",e.t0),y(e.t0.message),(e.t0.message.includes("unauthorized")||e.t0.message.includes("401"))&&(localStorage.removeItem("token"),r("/login"));case 36:return e.prev=36,p(!1),e.finish(36);case 39:case"end":return e.stop()}}),e,null,[[0,31,36,39]])})));return function(t){return e.apply(this,arguments)}}(),O=function(e,t){I(e),L(t),S(!0)},R=function(){S(!1),I(null),L(null)},A=function(){var e=Hi(Bi().mark((function e(){var t;return Bi().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(x&&"registration"===T){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,t=localStorage.getItem("token"),e.next=6,fetch("/api/participants/".concat(x),{method:"DELETE",headers:{Authorization:"Bearer ".concat(t)}});case 6:if(e.sent.ok){e.next=9;break}throw new Error("Failed to cancel registration");case 9:c(l.filter((function(e){return e.id!==x}))),R(),e.next=17;break;case 13:e.prev=13,e.t0=e.catch(2),console.error("Error canceling registration:",e.t0),alert("Failed to cancel registration. Please try again.");case 17:case"end":return e.stop()}}),e,null,[[2,13]])})));return function(){return e.apply(this,arguments)}}(),D=function(){var e=Hi(Bi().mark((function e(){var t;return Bi().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(x&&"volunteer"===T){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,t=localStorage.getItem("token"),e.next=6,fetch("/api/volunteers/".concat(x),{method:"DELETE",headers:{Authorization:"Bearer ".concat(t)}});case 6:if(e.sent.ok){e.next=9;break}throw new Error("Failed to cancel volunteer sign-up");case 9:f(d.filter((function(e){return e.id!==x}))),R(),e.next=17;break;case 13:e.prev=13,e.t0=e.catch(2),console.error("Error canceling volunteer sign-up:",e.t0),alert("Failed to cancel volunteer sign-up. Please try again.");case 17:case"end":return e.stop()}}),e,null,[[2,13]])})));return function(){return e.apply(this,arguments)}}();return m?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"loading-container"},t.createElement("div",{className:"loading-spinner"}),t.createElement("p",null,"Loading your dashboard...")))):g?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card error-card"},t.createElement("div",{className:"card-body text-center"},t.createElement("div",{className:"error-icon"},t.createElement("i",{className:"fas fa-exclamation-triangle"})),t.createElement("h2",null,"Error"),t.createElement("p",null,g),t.createElement("button",{onClick:function(){return window.location.reload()},className:"btn btn-primary"},"Retry"))))):t.createElement(Ho,null,t.createElement("section",{className:"hero",style:{minHeight:"30vh",display:"flex",alignItems:"center"}},t.createElement("div",{className:"hero-bg",style:{backgroundImage:'url("/img/dashboard-bg.jpg")'}}),t.createElement("div",{className:"container hero-content"},t.createElement("h1",null,"Welcome, ",null==o?void 0:o.firstName,"!"),t.createElement("p",null,"Manage your events, registrations, and volunteer activities.")),t.createElement("div",{className:"hero-wave"},t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1440 100",preserveAspectRatio:"none"},t.createElement("path",{fill:"#ede9e7",fillOpacity:"1",d:"M0,64L60,58.7C120,53,240,43,360,48C480,53,600,75,720,75C840,75,960,53,1080,48C1200,43,1320,53,1380,58.7L1440,64L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"})))),t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-third"},t.createElement("div",{className:"card profile-card mb-4 fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h3",null,"Your Profile")),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"profile-avatar"},null==o||null===(e=o.firstName)||void 0===e?void 0:e.charAt(0),null==o||null===(n=o.lastName)||void 0===n?void 0:n.charAt(0)),t.createElement("div",{className:"profile-info"},t.createElement("p",null,t.createElement("strong",null,"Name:")," ",null==o?void 0:o.firstName," ",null==o?void 0:o.lastName),t.createElement("p",null,t.createElement("strong",null,"Email:")," ",null==o?void 0:o.email),t.createElement("p",null,t.createElement("strong",null,"Phone:")," ",(null==o?void 0:o.phoneNumber)||"Not provided")),t.createElement(be,{to:"/profile/edit",className:"btn btn-outline btn-block mt-3"},t.createElement("i",{className:"fas fa-user-edit mr-2"})," Edit Profile"))),t.createElement("div",{className:"card mb-4 fade-in",style:{animationDelay:"0.2s"}},t.createElement("div",{className:"card-header"},t.createElement("h3",null,"Quick Links")),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"quick-links"},t.createElement(be,{to:"/events",className:"quick-link-item"},t.createElement("div",{className:"quick-link-icon"},t.createElement("i",{className:"fas fa-calendar-alt"})),t.createElement("div",{className:"quick-link-text"},"Browse Events")),t.createElement(be,{to:"/volunteer",className:"quick-link-item"},t.createElement("div",{className:"quick-link-icon",style:{backgroundColor:"var(--secondary)"}},t.createElement("i",{className:"fas fa-hands-helping"})),t.createElement("div",{className:"quick-link-text"},"Volunteer")),t.createElement(be,{to:"/donate",className:"quick-link-item"},t.createElement("div",{className:"quick-link-icon",style:{backgroundColor:"#28a745"}},t.createElement("i",{className:"fas fa-donate"})),t.createElement("div",{className:"quick-link-text"},"Donate")),t.createElement(be,{to:"/contact",className:"quick-link-item"},t.createElement("div",{className:"quick-link-icon",style:{backgroundColor:"#6c757d"}},t.createElement("i",{className:"fas fa-envelope"})),t.createElement("div",{className:"quick-link-text"},"Contact Us")))))),t.createElement("div",{className:"col-two-thirds"},t.createElement("div",{className:"card activities-card fade-in",style:{animationDelay:"0.3s"}},t.createElement("div",{className:"card-header tab-header"},t.createElement("ul",{className:"nav-tabs"},t.createElement("li",{className:"nav-tab ".concat("registrations"===E?"active":""),onClick:function(){return w("registrations")}},t.createElement("i",{className:"fas fa-child mr-2"}),"Your Child's Events"),t.createElement("li",{className:"nav-tab ".concat("volunteer"===E?"active":""),onClick:function(){return w("volunteer")}},t.createElement("i",{className:"fas fa-hands-helping mr-2"}),"Your Volunteer Activities"))),t.createElement("div",{className:"card-body"},"registrations"===E&&t.createElement("div",{className:"tab-content fade-in"},t.createElement("h2",null,"Your Child's Registered Events"),0===l.length?t.createElement("div",{className:"empty-state"},t.createElement("div",{className:"empty-icon"},t.createElement("i",{className:"fas fa-calendar-times"})),t.createElement("p",null,"You haven't registered your child for any events yet."),t.createElement(be,{to:"/events",className:"btn btn-primary mt-3"},"Browse Events")):t.createElement("div",{className:"events-grid"},l.map((function(e){var n,r,a,o,i,s=new Date(null===(n=e.event)||void 0===n?void 0:n.endDate)<new Date;return t.createElement("div",{className:"event-card-container",key:e.id},t.createElement("div",{className:"event-card ".concat(s?"past-event":"")},t.createElement("div",{className:"event-date"},t.createElement("div",{className:"date-month"},qi(null===(r=e.event)||void 0===r?void 0:r.startDate)),t.createElement("div",{className:"date-day"},Ki(null===(a=e.event)||void 0===a?void 0:a.startDate))),t.createElement("div",{className:"event-details"},t.createElement("h4",{className:"event-title"},(null===(o=e.event)||void 0===o?void 0:o.title)||"Unknown Event"),t.createElement("div",{className:"participant-name"},e.childFirstName," ",e.childLastName),t.createElement("div",{className:"event-location"},t.createElement("i",{className:"fas fa-map-marker-alt mr-1"})," ",null===(i=e.event)||void 0===i?void 0:i.location),t.createElement("div",{className:"event-status"},s?t.createElement("span",{className:"status-badge completed"},"Completed"):t.createElement("span",{className:"status-badge upcoming"},"Upcoming"))),t.createElement("div",{className:"event-actions"},t.createElement(be,{to:"/events/".concat(e.eventId),className:"action-btn view-btn",title:"View Event Details"},t.createElement("i",{className:"fas fa-eye"})),!s&&t.createElement("button",{onClick:function(){return O(e.id,"registration")},className:"action-btn cancel-btn",title:"Cancel Registration"},t.createElement("i",{className:"fas fa-times"})))))})))),"volunteer"===E&&t.createElement("div",{className:"tab-content fade-in"},t.createElement("h2",null,"Your Volunteer Activities"),0===d.length?t.createElement("div",{className:"empty-state"},t.createElement("div",{className:"empty-icon"},t.createElement("i",{className:"fas fa-hands"})),t.createElement("p",null,"You haven't signed up to volunteer for any events yet."),t.createElement(be,{to:"/volunteer",className:"btn btn-secondary mt-3"},"Browse Volunteer Opportunities")):t.createElement("div",{className:"events-grid"},d.map((function(e){var n,r,a,o,i,s=new Date(null===(n=e.event)||void 0===n?void 0:n.endDate)<new Date;return t.createElement("div",{className:"event-card-container",key:e.id},t.createElement("div",{className:"event-card volunteer-card ".concat(s?"past-event":"")},t.createElement("div",{className:"event-date"},t.createElement("div",{className:"date-month"},qi(null===(r=e.event)||void 0===r?void 0:r.startDate)),t.createElement("div",{className:"date-day"},Ki(null===(a=e.event)||void 0===a?void 0:a.startDate))),t.createElement("div",{className:"event-details"},t.createElement("h4",{className:"event-title"},(null===(o=e.event)||void 0===o?void 0:o.title)||"Unknown Event"),t.createElement("div",{className:"volunteer-role"},"Volunteer Role: ",e.role||"General Volunteer"),t.createElement("div",{className:"event-location"},t.createElement("i",{className:"fas fa-map-marker-alt mr-1"})," ",null===(i=e.event)||void 0===i?void 0:i.location),t.createElement("div",{className:"event-status"},s?t.createElement("span",{className:"status-badge completed"},"Completed"):t.createElement("span",{className:"status-badge status-${volunteer.status.toLowerCase()}"},e.status))),t.createElement("div",{className:"event-actions"},t.createElement(be,{to:"/events/".concat(e.eventId),className:"action-btn view-btn",title:"View Event Details"},t.createElement("i",{className:"fas fa-eye"})),!s&&"CANCELED"!==e.status&&t.createElement("button",{onClick:function(){return O(e.id,"volunteer")},className:"action-btn cancel-btn",title:"Cancel Volunteer Signup"},t.createElement("i",{className:"fas fa-times"})))))}))))))))),N&&t.createElement("div",{className:"modal-overlay"},t.createElement("div",{className:"modal-container"},t.createElement("div",{className:"modal-header"},t.createElement("h3",null,"Confirm Cancellation"),t.createElement("button",{className:"modal-close",onClick:R},t.createElement("i",{className:"fas fa-times"}))),t.createElement("div",{className:"modal-body"},t.createElement("p",null,"Are you sure you want to cancel this ","registration"===T?"registration":"volunteer signup","?"),t.createElement("p",{className:"text-danger"},t.createElement("strong",null,"Note:")," This action cannot be undone.")),t.createElement("div",{className:"modal-footer"},t.createElement("button",{className:"btn btn-outline",onClick:R},"No, Keep It"),t.createElement("button",{className:"btn btn-danger",onClick:function(){"registration"===T?A():"volunteer"===T&&D()}},"Yes, Cancel")))),t.createElement("style",{jsx:!0},"\n        .profile-card {\n          box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);\n        }\n        \n        .profile-avatar {\n          width: 80px;\n          height: 80px;\n          border-radius: 50%;\n          background-color: var(--primary);\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 2rem;\n          font-weight: 600;\n          margin: 0 auto 1.5rem;\n        }\n        \n        .profile-info {\n          text-align: center;\n        }\n        \n        .profile-info p {\n          margin-bottom: 0.5rem;\n        }\n        \n        .quick-links {\n          display: grid;\n          grid-template-columns: repeat(2, 1fr);\n          gap: 1rem;\n        }\n        \n        .quick-link-item {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          padding: 1rem;\n          border-radius: 8px;\n          transition: all 0.3s ease;\n          text-decoration: none;\n          color: var(--text);\n        }\n        \n        .quick-link-item:hover {\n          background-color: #f8f8f8;\n          transform: translateY(-5px);\n        }\n        \n        .quick-link-icon {\n          width: 50px;\n          height: 50px;\n          border-radius: 50%;\n          background-color: var(--primary);\n          color: white;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 1.2rem;\n          margin-bottom: 0.8rem;\n          transition: transform 0.3s ease;\n        }\n        \n        .quick-link-item:hover .quick-link-icon {\n          transform: scale(1.1);\n        }\n        \n        .quick-link-text {\n          font-weight: 600;\n          text-align: center;\n        }\n        \n        .activities-card {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .tab-header {\n          padding: 0;\n        }\n        \n        .nav-tabs {\n          display: flex;\n          list-style: none;\n          margin: 0;\n          padding: 0;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .nav-tab {\n          padding: 1rem 1.5rem;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          display: flex;\n          align-items: center;\n          border-bottom: 3px solid transparent;\n        }\n        \n        .nav-tab.active {\n          background-color: white;\n          border-bottom-color: var(--primary);\n          color: var(--primary);\n          font-weight: 600;\n        }\n        \n        .nav-tab:hover:not(.active) {\n          background-color: #f8f8f8;\n        }\n        \n        .tab-content {\n          padding: 1.5rem;\n        }\n        \n        .empty-state {\n          text-align: center;\n          padding: 3rem 1rem;\n          min-height: 300px;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n        }\n        \n        .empty-icon {\n          font-size: 3rem;\n          color: #ddd;\n          margin-bottom: 1.5rem;\n        }\n        \n        .events-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n          gap: 1.5rem;\n        }\n        \n        .event-card {\n          display: flex;\n          border-radius: 8px;\n          overflow: hidden;\n          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);\n          transition: all 0.3s ease;\n          background-color: white;\n          height: 100%;\n        }\n        \n        .event-card:hover {\n          transform: translateY(-5px);\n          box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n        }\n        \n        .event-card.past-event {\n          opacity: 0.7;\n        }\n        \n        .event-date {\n          width: 70px;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          background-color: var(--primary);\n          color: white;\n          padding: 1rem 0;\n        }\n        \n        .volunteer-card .event-date {\n          background-color: var(--secondary);\n        }\n        \n        .date-month {\n          font-size: 0.8rem;\n          text-transform: uppercase;\n          font-weight: 600;\n        }\n        \n        .date-day {\n          font-size: 1.8rem;\n          font-weight: 700;\n        }\n        \n        .event-details {\n          flex: 1;\n          padding: 1rem;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .event-title {\n          font-size: 1.1rem;\n          margin-bottom: 0.5rem;\n          line-height: 1.3;\n        }\n        \n        .participant-name, .volunteer-role {\n          font-size: 0.9rem;\n          font-weight: 600;\n          margin-bottom: 0.5rem;\n        }\n        \n        .event-location {\n          font-size: 0.85rem;\n          color: var(--text-light);\n          margin-bottom: 0.5rem;\n        }\n        \n        .event-status {\n          margin-top: auto;\n        }\n        \n        .status-badge {\n          display: inline-block;\n          padding: 0.25rem 0.75rem;\n          border-radius: 12px;\n          font-size: 0.75rem;\n          font-weight: 600;\n          text-transform: uppercase;\n        }\n        \n        .status-badge.upcoming {\n          background-color: #e6f7ff;\n          color: #0c6eb9;\n        }\n        \n        .status-badge.completed {\n          background-color: #f0f0f0;\n          color: #999;\n        }\n        \n        .status-badge.confirmed {\n          background-color: #e6fffa;\n          color: #0a866c;\n        }\n        \n        .status-badge.pending {\n          background-color: #fff7e6;\n          color: #b97800;\n        }\n        \n        .event-actions {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-around;\n          padding: 0.5rem;\n          background-color: #f8f8f8;\n        }\n        \n        .action-btn {\n          width: 30px;\n          height: 30px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          border: none;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          color: white;\n        }\n        \n        .view-btn {\n          background-color: var(--primary);\n        }\n        \n        .cancel-btn {\n          background-color: var(--secondary);\n        }\n        \n        .action-btn:hover {\n          transform: scale(1.1);\n        }\n        \n        .modal-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: rgba(0, 0, 0, 0.5);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          z-index: 1000;\n          animation: fadeIn 0.3s ease;\n        }\n        \n        .modal-container {\n          width: 90%;\n          max-width: 500px;\n          background-color: white;\n          border-radius: 8px;\n          overflow: hidden;\n          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n          animation: slideIn 0.3s ease;\n        }\n        \n        .modal-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 1rem;\n          background-color: #f8f8f8;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .modal-header h3 {\n          margin: 0;\n        }\n        \n        .modal-close {\n          background: none;\n          border: none;\n          font-size: 1.2rem;\n          cursor: pointer;\n          color: var(--text-light);\n          transition: color 0.3s ease;\n        }\n        \n        .modal-close:hover {\n          color: var(--secondary);\n        }\n        \n        .modal-body {\n          padding: 1.5rem;\n        }\n        \n        .modal-footer {\n          display: flex;\n          justify-content: flex-end;\n          gap: 1rem;\n          padding: 1rem;\n          background-color: #f8f8f8;\n          border-top: 1px solid #eee;\n        }\n        \n        .loading-container {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          min-height: 50vh;\n        }\n        \n        .loading-spinner {\n          width: 50px;\n          height: 50px;\n          border: 3px solid rgba(47, 80, 106, 0.3);\n          border-radius: 50%;\n          border-top-color: var(--primary);\n          animation: spin 1s ease-in-out infinite;\n          margin-bottom: 1rem;\n        }\n        \n        .error-card {\n          text-align: center;\n        }\n        \n        .error-icon {\n          font-size: 3rem;\n          color: var(--secondary);\n          margin-bottom: 1rem;\n        }\n        \n        .mr-1 {\n          margin-right: 0.25rem;\n        }\n        \n        .mr-2 {\n          margin-right: 0.5rem;\n        }\n        \n        @keyframes spin {\n          to { transform: rotate(360deg); }\n        }\n        \n        @keyframes fadeIn {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n        \n        @keyframes slideIn {\n          from { transform: translateY(-30px); opacity: 0; }\n          to { transform: translateY(0); opacity: 1; }\n        }\n        \n        @media (max-width: 992px) {\n          .events-grid {\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n          }\n        }\n        \n        @media (max-width: 768px) {\n          .nav-tabs {\n            flex-direction: column;\n          }\n          \n          .nav-tab {\n            padding: 0.8rem 1rem;\n            border-bottom: none;\n            border-left: 3px solid transparent;\n          }\n          \n          .nav-tab.active {\n            border-bottom: none;\n            border-left-color: var(--primary);\n          }\n          \n          .events-grid {\n            grid-template-columns: 1fr;\n          }\n        }\n      "))},Qi=function(){return t.createElement(Ho,null,t.createElement("section",{className:"hero",style:{minHeight:"50vh",display:"flex",alignItems:"center"}},t.createElement("div",{className:"hero-bg",style:{backgroundImage:'url("/img/about-bg.jpg")'}}),t.createElement("div",{className:"container hero-content"},t.createElement("h1",null,"About Kids in Motion"),t.createElement("p",null,"Kids in Motion was founded by student-athletes to make sports accessible to all children. Through free clinics and donated equipment, we empower kids to play, grow, and build lifelong skills.")),t.createElement("div",{className:"hero-wave"},t.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1440 100",preserveAspectRatio:"none"},t.createElement("path",{fill:"#ede9e7",fillOpacity:"1",d:"M0,64L60,58.7C120,53,240,43,360,48C480,53,600,75,720,75C840,75,960,53,1080,48C1200,43,1320,53,1380,58.7L1440,64L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"})))),t.createElement("section",{className:"section"},t.createElement("div",{className:"container"},t.createElement("div",{className:"card mb-4 fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h2",null,"Our Purpose")),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-half"},t.createElement("p",null,"At Kids in Motion, we believe that every child deserves the opportunity to play sports, regardless of their background. Sports teach teamwork, discipline, and resilience—values that extend far beyond the game."),t.createElement("p",null,"Our organization provides free sports clinics across a variety of games, including baseball, soccer, and more. We also collect and distribute gently used sports equipment, ensuring kids who may not have access to the gear they need can still participate."),t.createElement("p",null,"By connecting passionate athletes with communities in need, we aim to create a supportive environment where every child can discover their potential. Our goal is to remove barriers, foster a love for sports, and make sure no kid is left on the sidelines.")),t.createElement("div",{className:"col-half slide-in-right"},t.createElement("img",{src:"/img/about-purpose.jpg",alt:"Kids playing sports",style:{width:"100%",borderRadius:"8px",boxShadow:"0 15px 30px rgba(0, 0, 0, 0.1)",transition:"transform 0.3s ease"},className:"hover-zoom"}))))),t.createElement("div",{className:"card mb-4 fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h2",null,"What We Do")),t.createElement("div",{className:"card-body"},t.createElement("div",{className:"row"},t.createElement("div",{className:"col-third slide-in-left",style:{animationDelay:"0.1s"}},t.createElement("div",{className:"text-center mb-3 service-icon"},t.createElement("i",{className:"fas fa-running",style:{fontSize:"3rem",color:"var(--primary)"}}),t.createElement("h3",null,"Free Sports Clinics")),t.createElement("p",null,"We host free sports clinics across a range of games, giving kids the chance to learn from experienced athletes and develop their skills in a fun, supportive setting.")),t.createElement("div",{className:"col-third slide-in-left",style:{animationDelay:"0.3s"}},t.createElement("div",{className:"text-center mb-3 service-icon"},t.createElement("i",{className:"fas fa-baseball-ball",style:{fontSize:"3rem",color:"var(--primary)"}}),t.createElement("h3",null,"Equipment Donations")),t.createElement("p",null,"We collect and distribute gently used sports equipment to communities where kids may not have the resources to play.")),t.createElement("div",{className:"col-third slide-in-left",style:{animationDelay:"0.5s"}},t.createElement("div",{className:"text-center mb-3 service-icon"},t.createElement("i",{className:"fas fa-users",style:{fontSize:"3rem",color:"var(--primary)"}}),t.createElement("h3",null,"Mentorship")),t.createElement("p",null,"Beyond sports, we provide mentorship and a welcoming environment where kids can build confidence, make friends, and learn valuable life lessons."))))),t.createElement("div",{className:"section-head fade-in"},t.createElement("h2",null,"Meet Our Team")),t.createElement("div",{className:"row"},[{name:"Danny Gardner",role:"Co-Founder & Director",bio:"Danny is a student-athlete dedicated to making sports accessible for every child. With a passion for giving back, he leads the organization's clinics and outreach programs.",image:"/img/team/danny.jpg"},{name:"Ryan Spiess",role:"Co-Founder & Operations Lead",bio:"Ryan manages the logistics behind our clinics and donation drives, ensuring every event runs smoothly and every piece of equipment finds a home.",image:"/img/team/ryan.jpg"},{name:"Ty Callahan",role:"Co-Founder & Community Coordinator",bio:"Ty connects with local communities to expand our reach, helping bring Kids in Motion's mission to more kids across the state.",image:"/img/team/ty.jpg"},{name:"Nate Wilner",role:"Co-Founder & Marketing Lead",bio:"Nate handles the creative side, promoting our events and spreading the word to ensure as many kids as possible can benefit from our programs.",image:"/img/team/nate.jpg"}].map((function(e,n){return t.createElement("div",{className:"col-half mb-4 fade-in",key:n,style:{animationDelay:"".concat(.2*n,"s")}},t.createElement("div",{className:"card team-card"},t.createElement("div",{className:"card-body",style:{display:"flex",alignItems:"center"}},t.createElement("div",{style:{flexShrink:0,marginRight:"15px",overflow:"hidden",borderRadius:"50%"}},t.createElement("img",{src:e.image,alt:e.name,className:"team-image",style:{width:"120px",height:"120px",borderRadius:"50%",objectFit:"cover",transition:"transform 0.5s ease"},onError:function(e){e.target.src="/img/team/placeholder.jpg"}})),t.createElement("div",null,t.createElement("h3",null,e.name),t.createElement("h4",{style:{color:"var(--secondary)",marginBottom:"0.5rem"}},e.role),t.createElement("p",null,e.bio)))))}))),t.createElement("div",{className:"card mb-4 fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h2",null,"Our Structure")),t.createElement("div",{className:"card-body"},t.createElement("h3",null,"Board of Directors"),t.createElement("p",null,"Kids in Motion is led by our board of directors, consisting of the four co-founders and advisors from the community. The board meets regularly to plan events, coordinate fundraisers, and ensure the organization stays true to its mission."),t.createElement("h3",{className:"mt-4"},"Branches"),t.createElement("div",{className:"row mt-3"},t.createElement("div",{className:"col-half slide-in-left"},t.createElement("div",{className:"branch-box"},t.createElement("h4",null,"Logistics"),t.createElement("p",null,"The logistics team coordinates nonprofit status, manages equipment drives, handles funds, and ensures smooth operations between all branches.")),t.createElement("div",{className:"branch-box mt-3"},t.createElement("h4",null,"Member Outreach"),t.createElement("p",null,"This team recruits members to join and participate in events, coordinates roles, and manages attendance within the organization."))),t.createElement("div",{className:"col-half slide-in-right"},t.createElement("div",{className:"branch-box"},t.createElement("h4",null,"Community Outreach"),t.createElement("p",null,"Community outreach handles communication with external organizations, including local little leagues, schools, and programs for kids with disabilities or limited resources.")),t.createElement("div",{className:"branch-box mt-3"},t.createElement("h4",null,"Event Coordination"),t.createElement("p",null,"This team secures locations for clinics, develops curriculum for players, coordinates equipment, and ensures everyone has a positive experience.")))),t.createElement("h3",{className:"mt-4"},"Supporting Roles"),t.createElement("p",null,"We also have dedicated volunteers who manage our social media presence, document our events through photography and video, maintain our website, and handle administrative tasks to keep the organization running smoothly."))),t.createElement("div",{className:"card fade-in"},t.createElement("div",{className:"card-header"},t.createElement("h2",null,"Get Involved")),t.createElement("div",{className:"card-body text-center"},t.createElement("p",{className:"mb-4"},"Want to help us make sports accessible to every kid? There are many ways to support our mission and make a difference."),t.createElement("div",{className:"row"},t.createElement("div",{className:"col-third"},t.createElement(be,{to:"/volunteer",className:"btn btn-primary btn-block mb-3"},"Become a Volunteer")),t.createElement("div",{className:"col-third"},t.createElement(be,{to:"/donate",className:"btn btn-secondary btn-block mb-3"},"Make a Donation")),t.createElement("div",{className:"col-third"},t.createElement(be,{to:"/contact",className:"btn btn-outline btn-block mb-3"},"Contact Us"))))))),t.createElement("section",{className:"section parallax",style:{backgroundImage:'url("/img/volunteer-bg.jpg")',backgroundAttachment:"fixed",padding:"6rem 0",position:"relative",marginTop:"3rem"}},t.createElement("div",{className:"overlay",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%",backgroundColor:"rgba(47, 80, 106, 0.85)"}}),t.createElement("div",{className:"container",style:{position:"relative",zIndex:1}},t.createElement("div",{className:"text-center",style:{color:"white",maxWidth:"800px",margin:"0 auto"}},t.createElement("h2",{style:{color:"white"}},"Join Our Community"),t.createElement("p",{style:{fontSize:"1.25rem",marginBottom:"2rem"}},"Whether you're a parent, athlete, coach, or community member, there's a place for you in our organization. Together, we can make a difference in the lives of children through the power of sports."),t.createElement(be,{to:"/volunteer",className:"btn btn-secondary"},"Sign Up Today")))),t.createElement("style",{jsx:!0},"\n        .team-card:hover .team-image {\n          transform: scale(1.1);\n        }\n        \n        .hover-zoom:hover {\n          transform: scale(1.03);\n        }\n        \n        .service-icon i {\n          transition: transform 0.3s ease;\n        }\n        \n        .service-icon:hover i {\n          transform: scale(1.2);\n        }\n        \n        .branch-box {\n          padding: 1.5rem;\n          border-radius: 8px;\n          background-color: #f8f8f8;\n          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);\n          transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n        \n        .branch-box:hover {\n          transform: translateY(-5px);\n          box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);\n        }\n        \n        .branch-box h4 {\n          color: var(--secondary);\n          margin-bottom: 1rem;\n        }\n        \n        @media (max-width: 768px) {\n          .team-card {\n            flex-direction: column;\n            text-align: center;\n          }\n          \n          .team-card img {\n            margin-right: 0;\n            margin-bottom: 1rem;\n          }\n        }\n      "))},Ji=function(){return t.createElement(Ho,null,t.createElement("div",{className:"container mt-4"},t.createElement("div",{className:"card"},t.createElement("div",{className:"card-header"},t.createElement("h1",null,"Page Not Found")),t.createElement("div",{className:"card-body text-center"},t.createElement("div",{style:{fontSize:"72px",color:"var(--primary)"}},"404"),t.createElement("p",{className:"mb-4"},"The page you are looking for does not exist or has been moved."),t.createElement("a",{href:"/",className:"btn btn-primary"},"Return to Home")))))};var Xi=function(e){var n=e.children,r=Mo(),a=r.currentUser,o=r.loading,i=G();return o?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4 text-center"},t.createElement("p",null,"Loading authentication..."))):a?n:t.createElement(ie,{to:"/login?redirect=".concat(i.pathname),replace:!0})},Zi=function(e){var n=e.children,r=Mo(),a=r.currentUser;return r.loading?t.createElement(Ho,null,t.createElement("div",{className:"container mt-4 text-center"},t.createElement("p",null,"Loading authentication..."))):a?t.createElement(ie,{to:"/dashboard",replace:!0}):n};const es=function(){return t.createElement(Fo,null," ",t.createElement(ve,null,t.createElement(ce,null,t.createElement(se,{path:"/",element:t.createElement(Qo,null)}),t.createElement(se,{path:"/events",element:t.createElement(ri,null)}),t.createElement(se,{path:"/events/:id",element:t.createElement(ci,null)}),t.createElement(se,{path:"/about",element:t.createElement(Qi,null)}),t.createElement(se,{path:"/login",element:t.createElement(Zi,null,t.createElement(Pi,null))}),t.createElement(se,{path:"/register",element:t.createElement(Zi,null,t.createElement(zi,null))}),t.createElement(se,{path:"/dashboard",element:t.createElement(Xi,null,t.createElement(Yi,null))}),t.createElement(se,{path:"/events/:id/register",element:t.createElement(Xi,null,t.createElement(vi,null))}),t.createElement(se,{path:"/events/:id/volunteer",element:t.createElement(Xi,null,t.createElement(Si,null))}),t.createElement(se,{path:"*",element:t.createElement(Ji,null)}))))};a(917);var ts=document.getElementById("root");(0,r.H)(ts).render(t.createElement(es,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,